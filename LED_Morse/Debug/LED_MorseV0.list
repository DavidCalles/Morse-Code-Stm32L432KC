
LED_MorseV0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000424c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  080043dc  080043dc  000143dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046a4  080046a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080046a4  080046a4  000146a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046ac  080046ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046ac  080046ac  000146ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046b0  080046b0  000146b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08004724  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08004724  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dabe  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fbc  00000000  00000000  0002db5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0002fb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  00030550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000215ec  00000000  00000000  00030eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0b1  00000000  00000000  000524a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c27bb  00000000  00000000  0005d555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011fd10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ff4  00000000  00000000  0011fd64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080043c4 	.word	0x080043c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080043c4 	.word	0x080043c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
 8000584:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000586:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800058a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 800058e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000592:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000596:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000598:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800059a:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 f80e 	bl	80005ce <Lcd_init>

	return lcd;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	461d      	mov	r5, r3
 80005b6:	f107 0410 	add.w	r4, r7, #16
 80005ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005c2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80005c6:	68f8      	ldr	r0, [r7, #12]
 80005c8:	3728      	adds	r7, #40	; 0x28
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bdb0      	pop	{r4, r5, r7, pc}

080005ce <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b082      	sub	sp, #8
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	7d9b      	ldrb	r3, [r3, #22]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d10c      	bne.n	80005f8 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80005de:	2133      	movs	r1, #51	; 0x33
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f000 f863 	bl	80006ac <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80005e6:	2132      	movs	r1, #50	; 0x32
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f85f 	bl	80006ac <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80005ee:	2128      	movs	r1, #40	; 0x28
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 f85b 	bl	80006ac <lcd_write_command>
 80005f6:	e003      	b.n	8000600 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80005f8:	2138      	movs	r1, #56	; 0x38
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f000 f856 	bl	80006ac <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000600:	2101      	movs	r1, #1
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f852 	bl	80006ac <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000608:	210c      	movs	r1, #12
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 f84e 	bl	80006ac <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000610:	2106      	movs	r1, #6
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f000 f84a 	bl	80006ac <lcd_write_command>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800062a:	2300      	movs	r3, #0
 800062c:	73fb      	strb	r3, [r7, #15]
 800062e:	e00a      	b.n	8000646 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	683a      	ldr	r2, [r7, #0]
 8000634:	4413      	add	r3, r2
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f000 f864 	bl	8000708 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	3301      	adds	r3, #1
 8000644:	73fb      	strb	r3, [r7, #15]
 8000646:	7bfc      	ldrb	r4, [r7, #15]
 8000648:	6838      	ldr	r0, [r7, #0]
 800064a:	f7ff fdc1 	bl	80001d0 <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	429c      	cmp	r4, r3
 8000652:	d3ed      	bcc.n	8000630 <Lcd_string+0x10>
	}
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}
	...

08000660 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	70fb      	strb	r3, [r7, #3]
 800066c:	4613      	mov	r3, r2
 800066e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000670:	78fb      	ldrb	r3, [r7, #3]
 8000672:	4a07      	ldr	r2, [pc, #28]	; (8000690 <Lcd_cursor+0x30>)
 8000674:	5cd2      	ldrb	r2, [r2, r3]
 8000676:	78bb      	ldrb	r3, [r7, #2]
 8000678:	4413      	add	r3, r2
 800067a:	b2db      	uxtb	r3, r3
 800067c:	3b80      	subs	r3, #128	; 0x80
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4619      	mov	r1, r3
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 f812 	bl	80006ac <lcd_write_command>
	#endif
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	080045c0 	.word	0x080045c0

08000694 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800069c:	2101      	movs	r1, #1
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f804 	bl	80006ac <lcd_write_command>
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6898      	ldr	r0, [r3, #8]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	899b      	ldrh	r3, [r3, #12]
 80006c0:	2200      	movs	r2, #0
 80006c2:	4619      	mov	r1, r3
 80006c4:	f001 f818 	bl	80016f8 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7d9b      	ldrb	r3, [r3, #22]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d111      	bne.n	80006f4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	091b      	lsrs	r3, r3, #4
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2204      	movs	r2, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f000 f842 	bl	8000764 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	f003 030f 	and.w	r3, r3, #15
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	2204      	movs	r2, #4
 80006ea:	4619      	mov	r1, r3
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f839 	bl	8000764 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80006f2:	e005      	b.n	8000700 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	2208      	movs	r2, #8
 80006f8:	4619      	mov	r1, r3
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 f832 	bl	8000764 <lcd_write>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6898      	ldr	r0, [r3, #8]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	899b      	ldrh	r3, [r3, #12]
 800071c:	2201      	movs	r2, #1
 800071e:	4619      	mov	r1, r3
 8000720:	f000 ffea 	bl	80016f8 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7d9b      	ldrb	r3, [r3, #22]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d111      	bne.n	8000750 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800072c:	78fb      	ldrb	r3, [r7, #3]
 800072e:	091b      	lsrs	r3, r3, #4
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2204      	movs	r2, #4
 8000734:	4619      	mov	r1, r3
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f000 f814 	bl	8000764 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	b2db      	uxtb	r3, r3
 8000744:	2204      	movs	r2, #4
 8000746:	4619      	mov	r1, r3
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f000 f80b 	bl	8000764 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800074e:	e005      	b.n	800075c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000750:	78fb      	ldrb	r3, [r7, #3]
 8000752:	2208      	movs	r2, #8
 8000754:	4619      	mov	r1, r3
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f000 f804 	bl	8000764 <lcd_write>
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
 8000770:	4613      	mov	r3, r2
 8000772:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000774:	2300      	movs	r3, #0
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	e019      	b.n	80007ae <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	4413      	add	r3, r2
 8000784:	6818      	ldr	r0, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	685a      	ldr	r2, [r3, #4]
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4413      	add	r3, r2
 8000790:	8819      	ldrh	r1, [r3, #0]
 8000792:	78fa      	ldrb	r2, [r7, #3]
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	fa42 f303 	asr.w	r3, r2, r3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	461a      	mov	r2, r3
 80007a4:	f000 ffa8 	bl	80016f8 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	3301      	adds	r3, #1
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	7bfa      	ldrb	r2, [r7, #15]
 80007b0:	78bb      	ldrb	r3, [r7, #2]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d3e1      	bcc.n	800077a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6918      	ldr	r0, [r3, #16]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	8a9b      	ldrh	r3, [r3, #20]
 80007be:	2201      	movs	r2, #1
 80007c0:	4619      	mov	r1, r3
 80007c2:	f000 ff99 	bl	80016f8 <HAL_GPIO_WritePin>
	DELAY(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f000 fd22 	bl	8001210 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6918      	ldr	r0, [r3, #16]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	8a9b      	ldrh	r3, [r3, #20]
 80007d4:	2200      	movs	r2, #0
 80007d6:	4619      	mov	r1, r3
 80007d8:	f000 ff8e 	bl	80016f8 <HAL_GPIO_WritePin>
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 80007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e6:	b0f3      	sub	sp, #460	; 0x1cc
 80007e8:	af06      	add	r7, sp, #24

	/*General purpose variables*/
	unsigned int x = 0; // Conversions counter
 80007ea:	2300      	movs	r3, #0
 80007ec:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	char myname[] = "David Calles\n"; // Input string
 80007f0:	4b46      	ldr	r3, [pc, #280]	; (800090c <main+0x128>)
 80007f2:	f507 74ce 	add.w	r4, r7, #412	; 0x19c
 80007f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007f8:	c407      	stmia	r4!, {r0, r1, r2}
 80007fa:	8023      	strh	r3, [r4, #0]

	// GPIO Ports for LCD
	Lcd_PortType ports[] = {
 80007fc:	4b44      	ldr	r3, [pc, #272]	; (8000910 <main+0x12c>)
 80007fe:	f507 74be 	add.w	r4, r7, #380	; 0x17c
 8000802:	461d      	mov	r5, r3
 8000804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000808:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800080c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			D0_GPIO_Port, D1_GPIO_Port, D2_GPIO_Port, D3_GPIO_Port,
			D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
	  };
	// GPIO Pins for LCD
	Lcd_PinType pins[] = {D0_Pin, D1_Pin, D2_Pin, D3_Pin,
 8000810:	4b40      	ldr	r3, [pc, #256]	; (8000914 <main+0x130>)
 8000812:	f507 74b6 	add.w	r4, r7, #364	; 0x16c
 8000816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						  D4_Pin, D5_Pin, D6_Pin, D7_Pin};
	/*Morse alphabet*/
	MORSE_CHAR alphabet[ALPHABET_SIZE] = {
 800081c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000820:	4a3d      	ldr	r2, [pc, #244]	; (8000918 <main+0x134>)
 8000822:	4618      	mov	r0, r3
 8000824:	4611      	mov	r1, r2
 8000826:	f44f 739c 	mov.w	r3, #312	; 0x138
 800082a:	461a      	mov	r2, r3
 800082c:	f002 fe5e 	bl	80034ec <memcpy>
	};

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000830:	f000 fc79 	bl	8001126 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000834:	f000 f988 	bl	8000b48 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init(); // Manually modified to include LED_PIN
 8000838:	f000 fa38 	bl	8000cac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800083c:	f000 fa06 	bl	8000c4c <MX_USART2_UART_Init>

  // Create handler for the LCD
  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins,
 8000840:	f107 041c 	add.w	r4, r7, #28
 8000844:	4638      	mov	r0, r7
 8000846:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 800084a:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 800084e:	2301      	movs	r3, #1
 8000850:	9303      	str	r3, [sp, #12]
 8000852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000856:	9302      	str	r3, [sp, #8]
 8000858:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000868:	f7ff fe86 	bl	8000578 <Lcd_create>
 800086c:	463b      	mov	r3, r7
 800086e:	461d      	mov	r5, r3
 8000870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000874:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000878:	e884 0003 	stmia.w	r4, {r0, r1}
  //Lcd_clear(&lcd);

  /* Infinite loop---------------------------------------------------------*/
  while (1){
	// Show Initial message
	Lcd_clear(&lcd);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff07 	bl	8000694 <Lcd_clear>
	Lcd_cursor(&lcd, 0,1);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	2201      	movs	r2, #1
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fee6 	bl	8000660 <Lcd_cursor>
	Lcd_string(&lcd, "String 2 Morse");
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4920      	ldr	r1, [pc, #128]	; (800091c <main+0x138>)
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fec0 	bl	8000620 <Lcd_string>
	Lcd_cursor(&lcd, 1,0);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	2200      	movs	r2, #0
 80008a6:	2101      	movs	r1, #1
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fed9 	bl	8000660 <Lcd_cursor>
	Lcd_string(&lcd, "by David Calles!");
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	491b      	ldr	r1, [pc, #108]	; (8000920 <main+0x13c>)
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff feb3 	bl	8000620 <Lcd_string>
	HAL_Delay(5000);
 80008ba:	f241 3088 	movw	r0, #5000	; 0x1388
 80008be:	f000 fca7 	bl	8001210 <HAL_Delay>

	printf("Initiate conversion %d \r\n", x);
 80008c2:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 80008c6:	4817      	ldr	r0, [pc, #92]	; (8000924 <main+0x140>)
 80008c8:	f002 fe26 	bl	8003518 <iprintf>
	String2Morse(myname, 13, alphabet, lcd); // Actual morse output
 80008cc:	f107 061c 	add.w	r6, r7, #28
 80008d0:	f107 0e34 	add.w	lr, r7, #52	; 0x34
 80008d4:	f507 7cce 	add.w	ip, r7, #412	; 0x19c
 80008d8:	466d      	mov	r5, sp
 80008da:	1d34      	adds	r4, r6, #4
 80008dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008e0:	6823      	ldr	r3, [r4, #0]
 80008e2:	602b      	str	r3, [r5, #0]
 80008e4:	6833      	ldr	r3, [r6, #0]
 80008e6:	4672      	mov	r2, lr
 80008e8:	210d      	movs	r1, #13
 80008ea:	4660      	mov	r0, ip
 80008ec:	f000 f81e 	bl	800092c <String2Morse>
	printf("End conversion %d \r\n", x++);
 80008f0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80008fa:	4619      	mov	r1, r3
 80008fc:	480a      	ldr	r0, [pc, #40]	; (8000928 <main+0x144>)
 80008fe:	f002 fe0b 	bl	8003518 <iprintf>




	HAL_Delay(WAIT);
 8000902:	f241 3088 	movw	r0, #5000	; 0x1388
 8000906:	f000 fc83 	bl	8001210 <HAL_Delay>
	Lcd_clear(&lcd);
 800090a:	e7b7      	b.n	800087c <main+0x98>
 800090c:	08004434 	.word	0x08004434
 8000910:	08004444 	.word	0x08004444
 8000914:	08004464 	.word	0x08004464
 8000918:	08004474 	.word	0x08004474
 800091c:	080043dc 	.word	0x080043dc
 8000920:	080043ec 	.word	0x080043ec
 8000924:	08004400 	.word	0x08004400
 8000928:	0800441c 	.word	0x0800441c

0800092c <String2Morse>:

/**
  * @brief String2Morse
  * @retval Characters processed
  */
uint8_t String2Morse(char *name, uint8_t n, MORSE_CHAR *alphabet, Lcd_HandleTypeDef lcd){
 800092c:	b082      	sub	sp, #8
 800092e:	b580      	push	{r7, lr}
 8000930:	b088      	sub	sp, #32
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	607a      	str	r2, [r7, #4]
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800093a:	460b      	mov	r3, r1
 800093c:	72fb      	strb	r3, [r7, #11]

	//Index calculation and cases evaluation
	uint8_t i = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	77fb      	strb	r3, [r7, #31]
	uint8_t index = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	77bb      	strb	r3, [r7, #30]
	char dispC[] = "  ";
 8000946:	4a7d      	ldr	r2, [pc, #500]	; (8000b3c <String2Morse+0x210>)
 8000948:	f107 0318 	add.w	r3, r7, #24
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	4611      	mov	r1, r2
 8000950:	8019      	strh	r1, [r3, #0]
 8000952:	3302      	adds	r3, #2
 8000954:	0c12      	lsrs	r2, r2, #16
 8000956:	701a      	strb	r2, [r3, #0]
	char dispM[] = "     ";
 8000958:	4a79      	ldr	r2, [pc, #484]	; (8000b40 <String2Morse+0x214>)
 800095a:	f107 0310 	add.w	r3, r7, #16
 800095e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000962:	6018      	str	r0, [r3, #0]
 8000964:	3304      	adds	r3, #4
 8000966:	8019      	strh	r1, [r3, #0]
	CHAR_STATE state = NOTSHOW;
 8000968:	2300      	movs	r3, #0
 800096a:	777b      	strb	r3, [r7, #29]
	// Iterate through every character in string
	for(i=0; i<n; i++){
 800096c:	2300      	movs	r3, #0
 800096e:	77fb      	strb	r3, [r7, #31]
 8000970:	e0d6      	b.n	8000b20 <String2Morse+0x1f4>
		// Evaluate the type of character
		switch(name[i]){
 8000972:	7ffb      	ldrb	r3, [r7, #31]
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	4413      	add	r3, r2
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b7a      	cmp	r3, #122	; 0x7a
 800097c:	dc21      	bgt.n	80009c2 <String2Morse+0x96>
 800097e:	2b61      	cmp	r3, #97	; 0x61
 8000980:	da0f      	bge.n	80009a2 <String2Morse+0x76>
 8000982:	2b20      	cmp	r3, #32
 8000984:	d016      	beq.n	80009b4 <String2Morse+0x88>
 8000986:	2b20      	cmp	r3, #32
 8000988:	db1b      	blt.n	80009c2 <String2Morse+0x96>
 800098a:	3b41      	subs	r3, #65	; 0x41
 800098c:	2b19      	cmp	r3, #25
 800098e:	d818      	bhi.n	80009c2 <String2Morse+0x96>
			// Capital case letters evaluation according to ASCII.
			case 'A' ... 'Z':{
				index = name[i]-'A';
 8000990:	7ffb      	ldrb	r3, [r7, #31]
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	4413      	add	r3, r2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	3b41      	subs	r3, #65	; 0x41
 800099a:	77bb      	strb	r3, [r7, #30]
				state = SHOW;
 800099c:	2301      	movs	r3, #1
 800099e:	777b      	strb	r3, [r7, #29]
				break;
 80009a0:	e012      	b.n	80009c8 <String2Morse+0x9c>
			}//end case
			// Lower case letters evaluation according to ASCII.
			case 'a' ... 'z':{
				index = name[i]-'a';
 80009a2:	7ffb      	ldrb	r3, [r7, #31]
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	4413      	add	r3, r2
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	3b61      	subs	r3, #97	; 0x61
 80009ac:	77bb      	strb	r3, [r7, #30]
				state = SHOW;
 80009ae:	2301      	movs	r3, #1
 80009b0:	777b      	strb	r3, [r7, #29]
				break;
 80009b2:	e009      	b.n	80009c8 <String2Morse+0x9c>
			}//end case
			// Space evaluation
			case ' ':{
				HAL_Delay(SPACE);
 80009b4:	f640 0034 	movw	r0, #2100	; 0x834
 80009b8:	f000 fc2a 	bl	8001210 <HAL_Delay>
				state = NOTSHOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	777b      	strb	r3, [r7, #29]
				break;
 80009c0:	e002      	b.n	80009c8 <String2Morse+0x9c>
			}//end case
			// Other special characters will just be ignored
			default:{
				state = NOTSHOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	777b      	strb	r3, [r7, #29]
				break;
 80009c6:	bf00      	nop
			}//end default case
		}//end switch

		// Output of the morse code of the character
		if (state == SHOW){
 80009c8:	7f7b      	ldrb	r3, [r7, #29]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	f040 80a5 	bne.w	8000b1a <String2Morse+0x1ee>
			dispM[0] = ' ', dispM[1] = ' ', dispM[2] = ' ', dispM[3] = ' ';
 80009d0:	2320      	movs	r3, #32
 80009d2:	743b      	strb	r3, [r7, #16]
 80009d4:	2320      	movs	r3, #32
 80009d6:	747b      	strb	r3, [r7, #17]
 80009d8:	2320      	movs	r3, #32
 80009da:	74bb      	strb	r3, [r7, #18]
 80009dc:	2320      	movs	r3, #32
 80009de:	74fb      	strb	r3, [r7, #19]
			for(uint8_t j = 0; j < alphabet[index].length; j++){
 80009e0:	2300      	movs	r3, #0
 80009e2:	773b      	strb	r3, [r7, #28]
 80009e4:	e04f      	b.n	8000a86 <String2Morse+0x15a>
				//Turn LED ON,
				HAL_GPIO_WritePin(LED_GPIO, LED_PIN, GPIO_PIN_SET);
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f0:	f000 fe82 	bl	80016f8 <HAL_GPIO_WritePin>
				//Keep led on for a specific time
				HAL_Delay(alphabet[index].morse[j]);
 80009f4:	7fba      	ldrb	r2, [r7, #30]
 80009f6:	4613      	mov	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	4413      	add	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	461a      	mov	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	441a      	add	r2, r3
 8000a04:	7f3b      	ldrb	r3, [r7, #28]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	889b      	ldrh	r3, [r3, #4]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 fbff 	bl	8001210 <HAL_Delay>
				//Turn LED OFF,
				HAL_GPIO_WritePin(LED_GPIO, LED_PIN, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1c:	f000 fe6c 	bl	80016f8 <HAL_GPIO_WritePin>
				//Create morse string for lcd
				if(alphabet[index].morse[j]==DOT)
 8000a20:	7fba      	ldrb	r2, [r7, #30]
 8000a22:	4613      	mov	r3, r2
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	4413      	add	r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	441a      	add	r2, r3
 8000a30:	7f3b      	ldrb	r3, [r7, #28]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	889b      	ldrh	r3, [r3, #4]
 8000a38:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000a3c:	d106      	bne.n	8000a4c <String2Morse+0x120>
					dispM[j]='.';
 8000a3e:	7f3b      	ldrb	r3, [r7, #28]
 8000a40:	f107 0220 	add.w	r2, r7, #32
 8000a44:	4413      	add	r3, r2
 8000a46:	222e      	movs	r2, #46	; 0x2e
 8000a48:	f803 2c10 	strb.w	r2, [r3, #-16]
				if(alphabet[index].morse[j]==LINE)
 8000a4c:	7fba      	ldrb	r2, [r7, #30]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	4413      	add	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	461a      	mov	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	441a      	add	r2, r3
 8000a5c:	7f3b      	ldrb	r3, [r7, #28]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	4413      	add	r3, r2
 8000a62:	889b      	ldrh	r3, [r3, #4]
 8000a64:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000a68:	d106      	bne.n	8000a78 <String2Morse+0x14c>
					dispM[j]='_';
 8000a6a:	7f3b      	ldrb	r3, [r7, #28]
 8000a6c:	f107 0220 	add.w	r2, r7, #32
 8000a70:	4413      	add	r3, r2
 8000a72:	225f      	movs	r2, #95	; 0x5f
 8000a74:	f803 2c10 	strb.w	r2, [r3, #-16]
				HAL_Delay(PAUSE);
 8000a78:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a7c:	f000 fbc8 	bl	8001210 <HAL_Delay>
			for(uint8_t j = 0; j < alphabet[index].length; j++){
 8000a80:	7f3b      	ldrb	r3, [r7, #28]
 8000a82:	3301      	adds	r3, #1
 8000a84:	773b      	strb	r3, [r7, #28]
 8000a86:	7fba      	ldrb	r2, [r7, #30]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	461a      	mov	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	789b      	ldrb	r3, [r3, #2]
 8000a98:	7f3a      	ldrb	r2, [r7, #28]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d3a3      	bcc.n	80009e6 <String2Morse+0xba>
			}// end for j

			printf("%c\n\r", alphabet[index].capitalC); //Print detected char
 8000a9e:	7fba      	ldrb	r2, [r7, #30]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4824      	ldr	r0, [pc, #144]	; (8000b44 <String2Morse+0x218>)
 8000ab4:	f002 fd30 	bl	8003518 <iprintf>
			// Show letter on LCD
			dispC[0]= alphabet[index].capitalC;
 8000ab8:	7fba      	ldrb	r2, [r7, #30]
 8000aba:	4613      	mov	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4413      	add	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	763b      	strb	r3, [r7, #24]
			Lcd_clear(&lcd);
 8000acc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fddf 	bl	8000694 <Lcd_clear>
			Lcd_cursor(&lcd, 0, 7);
 8000ad6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ada:	2207      	movs	r2, #7
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fdbe 	bl	8000660 <Lcd_cursor>
			Lcd_string(&lcd, dispC);
 8000ae4:	f107 0218 	add.w	r2, r7, #24
 8000ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fd96 	bl	8000620 <Lcd_string>

			// Show morse on LCD
			Lcd_cursor(&lcd, 1, 7);
 8000af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000af8:	2207      	movs	r2, #7
 8000afa:	2101      	movs	r1, #1
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fdaf 	bl	8000660 <Lcd_cursor>
			Lcd_string(&lcd, dispM);
 8000b02:	f107 0210 	add.w	r2, r7, #16
 8000b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fd87 	bl	8000620 <Lcd_string>
			HAL_Delay(PAUSE_L);
 8000b12:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000b16:	f000 fb7b 	bl	8001210 <HAL_Delay>
	for(i=0; i<n; i++){
 8000b1a:	7ffb      	ldrb	r3, [r7, #31]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	77fb      	strb	r3, [r7, #31]
 8000b20:	7ffa      	ldrb	r2, [r7, #31]
 8000b22:	7afb      	ldrb	r3, [r7, #11]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	f4ff af24 	bcc.w	8000972 <String2Morse+0x46>
		}//end if (state == SHOW)

	}//end for i
	return i; // Number of characters processed
 8000b2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b36:	b002      	add	sp, #8
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	080045b4 	.word	0x080045b4
 8000b40:	080045b8 	.word	0x080045b8
 8000b44:	080045ac 	.word	0x080045ac

08000b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b0ac      	sub	sp, #176	; 0xb0
 8000b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b52:	2244      	movs	r2, #68	; 0x44
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f002 fcd6 	bl	8003508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2254      	movs	r2, #84	; 0x54
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f002 fcc8 	bl	8003508 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b78:	f000 fdd6 	bl	8001728 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b7c:	4b32      	ldr	r3, [pc, #200]	; (8000c48 <SystemClock_Config+0x100>)
 8000b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b82:	4a31      	ldr	r2, [pc, #196]	; (8000c48 <SystemClock_Config+0x100>)
 8000b84:	f023 0318 	bic.w	r3, r3, #24
 8000b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b8c:	2314      	movs	r3, #20
 8000b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b90:	2301      	movs	r3, #1
 8000b92:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b94:	2301      	movs	r3, #1
 8000b96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ba0:	2360      	movs	r3, #96	; 0x60
 8000ba2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000bac:	2301      	movs	r3, #1
 8000bae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000bb8:	2310      	movs	r3, #16
 8000bba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fe1b 	bl	8001810 <HAL_RCC_OscConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000be0:	f000 f8f4 	bl	8000dcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be4:	230f      	movs	r3, #15
 8000be6:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be8:	2303      	movs	r3, #3
 8000bea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bf8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 fa26 	bl	8002050 <HAL_RCC_ClockConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c0a:	f000 f8df 	bl	8000dcc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 fc1f 	bl	800245c <HAL_RCCEx_PeriphCLKConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000c24:	f000 f8d2 	bl	8000dcc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c28:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c2c:	f000 fd9a 	bl	8001764 <HAL_PWREx_ControlVoltageScaling>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000c36:	f000 f8c9 	bl	8000dcc <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000c3a:	f001 fe03 	bl	8002844 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000c3e:	bf00      	nop
 8000c40:	37b0      	adds	r7, #176	; 0xb0
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000

08000c4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c52:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <MX_USART2_UART_Init+0x5c>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_USART2_UART_Init+0x58>)
 8000c90:	f001 feda 	bl	8002a48 <HAL_UART_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c9a:	f000 f897 	bl	8000dcc <Error_Handler>
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000098 	.word	0x20000098
 8000ca8:	40004400 	.word	0x40004400

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc2:	4b40      	ldr	r3, [pc, #256]	; (8000dc4 <MX_GPIO_Init+0x118>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	4a3f      	ldr	r2, [pc, #252]	; (8000dc4 <MX_GPIO_Init+0x118>)
 8000cc8:	f043 0304 	orr.w	r3, r3, #4
 8000ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cce:	4b3d      	ldr	r3, [pc, #244]	; (8000dc4 <MX_GPIO_Init+0x118>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	f003 0304 	and.w	r3, r3, #4
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <MX_GPIO_Init+0x118>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	4a39      	ldr	r2, [pc, #228]	; (8000dc4 <MX_GPIO_Init+0x118>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce6:	4b37      	ldr	r3, [pc, #220]	; (8000dc4 <MX_GPIO_Init+0x118>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b34      	ldr	r3, [pc, #208]	; (8000dc4 <MX_GPIO_Init+0x118>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	4a33      	ldr	r2, [pc, #204]	; (8000dc4 <MX_GPIO_Init+0x118>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <MX_GPIO_Init+0x118>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|GPIO_PIN_4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	21fb      	movs	r1, #251	; 0xfb
 8000d0e:	482e      	ldr	r0, [pc, #184]	; (8000dc8 <MX_GPIO_Init+0x11c>)
 8000d10:	f000 fcf2 	bl	80016f8 <HAL_GPIO_WritePin>
						  |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1e:	f000 fceb 	bl	80016f8 <HAL_GPIO_WritePin>
						  |GPIO_PIN_12, GPIO_PIN_RESET);

	/*Configure LED Output level*/
	HAL_GPIO_WritePin(LED_GPIO, LED_PIN, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2c:	f000 fce4 	bl	80016f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : VCP_TX_Pin */
	GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000d30:	2304      	movs	r3, #4
 8000d32:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d40:	2307      	movs	r3, #7
 8000d42:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4e:	f000 fb69 	bl	8001424 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 LD3_Pin PB4
						   PB5 PB6 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|GPIO_PIN_4
 8000d52:	23fb      	movs	r3, #251	; 0xfb
 8000d54:	60fb      	str	r3, [r7, #12]
						  |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
	if(LED_GPIO == GPIOB) // Add Led pin if part of GPIOB
	  GPIO_InitStruct.Pin |= LED_PIN;

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	4619      	mov	r1, r3
 8000d68:	4817      	ldr	r0, [pc, #92]	; (8000dc8 <MX_GPIO_Init+0x11c>)
 8000d6a:	f000 fb5b 	bl	8001424 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 PA10 PA11
						   PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d6e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000d72:	60fb      	str	r3, [r7, #12]
						  |GPIO_PIN_12;
	if(LED_GPIO == GPIOA)// Add Led pin if part of GPIOA
	  GPIO_InitStruct.Pin |= LED_PIN;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d7a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d92:	f000 fb47 	bl	8001424 <HAL_GPIO_Init>

	/*Configure GPIO pin : VCP_RX_Pin */
	GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d9a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000da8:	2303      	movs	r3, #3
 8000daa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	4619      	mov	r1, r3
 8000db2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db6:	f000 fb35 	bl	8001424 <HAL_GPIO_Init>
}
 8000dba:	bf00      	nop
 8000dbc:	3720      	adds	r7, #32
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	48000400 	.word	0x48000400

08000dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd0:	b672      	cpsid	i
}
 8000dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <Error_Handler+0x8>
	...

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_MspInit+0x44>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de2:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <HAL_MspInit+0x44>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_MspInit+0x44>)
 8000dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_MspInit+0x44>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_MspInit+0x44>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	6593      	str	r3, [r2, #88]	; 0x58
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_MspInit+0x44>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000

08000e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a20      	ldr	r2, [pc, #128]	; (8000ec0 <HAL_UART_MspInit+0xa0>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d13a      	bne.n	8000eb8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e42:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <HAL_UART_MspInit+0xa4>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e46:	4a1f      	ldr	r2, [pc, #124]	; (8000ec4 <HAL_UART_MspInit+0xa4>)
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <HAL_UART_MspInit+0xa4>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <HAL_UART_MspInit+0xa4>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	4a19      	ldr	r2, [pc, #100]	; (8000ec4 <HAL_UART_MspInit+0xa4>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <HAL_UART_MspInit+0xa4>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e72:	2304      	movs	r3, #4
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e82:	2307      	movs	r3, #7
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e90:	f000 fac8 	bl	8001424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb4:	f000 fab6 	bl	8001424 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	3728      	adds	r7, #40	; 0x28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40004400 	.word	0x40004400
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 f95c 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8000f28:	2301      	movs	r3, #1
 8000f2a:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	4807      	ldr	r0, [pc, #28]	; (8000f54 <_read+0x38>)
 8000f38:	f001 fe68 	bl	8002c0c <HAL_UART_Receive>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	607b      	str	r3, [r7, #4]

	return len;
 8000f48:	687b      	ldr	r3, [r7, #4]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000098 	.word	0x20000098

08000f58 <_write>:

int _write(int file, char *ptr, int len)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	4809      	ldr	r0, [pc, #36]	; (8000f98 <_write+0x40>)
 8000f74:	f001 fdb6 	bl	8002ae4 <HAL_UART_Transmit>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8000f7c:	7dfb      	ldrb	r3, [r7, #23]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d002      	beq.n	8000f88 <_write+0x30>
 8000f82:	7dfb      	ldrb	r3, [r7, #23]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d101      	bne.n	8000f8c <_write+0x34>
	{
		Error_Handler();
 8000f88:	f7ff ff20 	bl	8000dcc <Error_Handler>
	}

	return len;
 8000f8c:	687b      	ldr	r3, [r7, #4]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000098 	.word	0x20000098

08000f9c <_close>:



int _close(int file)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	return -1;
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fc4:	605a      	str	r2, [r3, #4]
	return 0;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_isatty>:

int _isatty(int file)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	return 1;
 8000fdc:	2301      	movs	r3, #1
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b085      	sub	sp, #20
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
	return 0;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <_sbrk+0x5c>)
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <_sbrk+0x60>)
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <_sbrk+0x64>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <_sbrk+0x68>)
 8001024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d207      	bcs.n	8001044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001034:	f002 fa30 	bl	8003498 <__errno>
 8001038:	4603      	mov	r3, r0
 800103a:	220c      	movs	r2, #12
 800103c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	e009      	b.n	8001058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <_sbrk+0x64>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <_sbrk+0x64>)
 8001054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20010000 	.word	0x20010000
 8001064:	00000400 	.word	0x00000400
 8001068:	2000008c 	.word	0x2000008c
 800106c:	20000130 	.word	0x20000130

08001070 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <SystemInit+0x5c>)
 8001076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107a:	4a14      	ldr	r2, [pc, #80]	; (80010cc <SystemInit+0x5c>)
 800107c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <SystemInit+0x60>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a11      	ldr	r2, [pc, #68]	; (80010d0 <SystemInit+0x60>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <SystemInit+0x60>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <SystemInit+0x60>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <SystemInit+0x60>)
 800109c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80010a0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <SystemInit+0x60>)
 80010a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <SystemInit+0x60>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <SystemInit+0x60>)
 80010b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <SystemInit+0x60>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00
 80010d0:	40021000 	.word	0x40021000

080010d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800110c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010d8:	f7ff ffca 	bl	8001070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010de:	e003      	b.n	80010e8 <LoopCopyDataInit>

080010e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010e6:	3104      	adds	r1, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010e8:	480a      	ldr	r0, [pc, #40]	; (8001114 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010f0:	d3f6      	bcc.n	80010e0 <CopyDataInit>
	ldr	r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <LoopForever+0x12>)
	b	LoopFillZerobss
 80010f4:	e002      	b.n	80010fc <LoopFillZerobss>

080010f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010f8:	f842 3b04 	str.w	r3, [r2], #4

080010fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <LoopForever+0x16>)
	cmp	r2, r3
 80010fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001100:	d3f9      	bcc.n	80010f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001102:	f002 f9cf 	bl	80034a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001106:	f7ff fb6d 	bl	80007e4 <main>

0800110a <LoopForever>:

LoopForever:
    b LoopForever
 800110a:	e7fe      	b.n	800110a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800110c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001110:	080046b4 	.word	0x080046b4
	ldr	r0, =_sdata
 8001114:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001118:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800111c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001120:	20000130 	.word	0x20000130

08001124 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC1_IRQHandler>

08001126 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001130:	2003      	movs	r0, #3
 8001132:	f000 f943 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001136:	2000      	movs	r0, #0
 8001138:	f000 f80e 	bl	8001158 <HAL_InitTick>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	e001      	b.n	800114c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001148:	f7ff fe46 	bl	8000dd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800114c:	79fb      	ldrb	r3, [r7, #7]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_InitTick+0x6c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d023      	beq.n	80011b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_InitTick+0x70>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_InitTick+0x6c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	fbb3 f3f1 	udiv	r3, r3, r1
 800117e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f941 	bl	800140a <HAL_SYSTICK_Config>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10f      	bne.n	80011ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b0f      	cmp	r3, #15
 8001192:	d809      	bhi.n	80011a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001194:	2200      	movs	r2, #0
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f000 f919 	bl	80013d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <HAL_InitTick+0x74>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e007      	b.n	80011b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e004      	b.n	80011b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	73fb      	strb	r3, [r7, #15]
 80011b2:	e001      	b.n	80011b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000008 	.word	0x20000008
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x20>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x24>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <HAL_IncTick+0x24>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008
 80011f4:	2000011c 	.word	0x2000011c

080011f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_GetTick+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	2000011c 	.word	0x2000011c

08001210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff ffee 	bl	80011f8 <HAL_GetTick>
 800121c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001228:	d005      	beq.n	8001236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_Delay+0x44>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001236:	bf00      	nop
 8001238:	f7ff ffde 	bl	80011f8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	429a      	cmp	r2, r3
 8001246:	d8f7      	bhi.n	8001238 <HAL_Delay+0x28>
  {
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000008 	.word	0x20000008

08001258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001274:	4013      	ands	r3, r2
 8001276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128a:	4a04      	ldr	r2, [pc, #16]	; (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	60d3      	str	r3, [r2, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <__NVIC_GetPriorityGrouping+0x18>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	f003 0307 	and.w	r3, r3, #7
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	; (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	; (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
         );
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001388:	d301      	bcc.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e00f      	b.n	80013ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <SysTick_Config+0x40>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	210f      	movs	r1, #15
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f7ff ff8e 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <SysTick_Config+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a6:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <SysTick_Config+0x40>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff47 	bl	8001258 <__NVIC_SetPriorityGrouping>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013e4:	f7ff ff5c 	bl	80012a0 <__NVIC_GetPriorityGrouping>
 80013e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	6978      	ldr	r0, [r7, #20]
 80013f0:	f7ff ff8e 	bl	8001310 <NVIC_EncodePriority>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff5d 	bl	80012bc <__NVIC_SetPriority>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ffb0 	bl	8001378 <SysTick_Config>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001432:	e148      	b.n	80016c6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	2101      	movs	r1, #1
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	4013      	ands	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 813a 	beq.w	80016c0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d00b      	beq.n	800146c <HAL_GPIO_Init+0x48>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d007      	beq.n	800146c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001460:	2b11      	cmp	r3, #17
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b12      	cmp	r3, #18
 800146a:	d130      	bne.n	80014ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014a2:	2201      	movs	r2, #1
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	091b      	lsrs	r3, r3, #4
 80014b8:	f003 0201 	and.w	r2, r3, #1
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d003      	beq.n	800150e <HAL_GPIO_Init+0xea>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b12      	cmp	r3, #18
 800150c:	d123      	bne.n	8001556 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	08da      	lsrs	r2, r3, #3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3208      	adds	r2, #8
 8001516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	220f      	movs	r2, #15
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	691a      	ldr	r2, [r3, #16]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	08da      	lsrs	r2, r3, #3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3208      	adds	r2, #8
 8001550:	6939      	ldr	r1, [r7, #16]
 8001552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	2203      	movs	r2, #3
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0203 	and.w	r2, r3, #3
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 8094 	beq.w	80016c0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001598:	4b52      	ldr	r3, [pc, #328]	; (80016e4 <HAL_GPIO_Init+0x2c0>)
 800159a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159c:	4a51      	ldr	r2, [pc, #324]	; (80016e4 <HAL_GPIO_Init+0x2c0>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6613      	str	r3, [r2, #96]	; 0x60
 80015a4:	4b4f      	ldr	r3, [pc, #316]	; (80016e4 <HAL_GPIO_Init+0x2c0>)
 80015a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015b0:	4a4d      	ldr	r2, [pc, #308]	; (80016e8 <HAL_GPIO_Init+0x2c4>)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	089b      	lsrs	r3, r3, #2
 80015b6:	3302      	adds	r3, #2
 80015b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	220f      	movs	r2, #15
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015da:	d00d      	beq.n	80015f8 <HAL_GPIO_Init+0x1d4>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a43      	ldr	r2, [pc, #268]	; (80016ec <HAL_GPIO_Init+0x2c8>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d007      	beq.n	80015f4 <HAL_GPIO_Init+0x1d0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a42      	ldr	r2, [pc, #264]	; (80016f0 <HAL_GPIO_Init+0x2cc>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d101      	bne.n	80015f0 <HAL_GPIO_Init+0x1cc>
 80015ec:	2302      	movs	r3, #2
 80015ee:	e004      	b.n	80015fa <HAL_GPIO_Init+0x1d6>
 80015f0:	2307      	movs	r3, #7
 80015f2:	e002      	b.n	80015fa <HAL_GPIO_Init+0x1d6>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <HAL_GPIO_Init+0x1d6>
 80015f8:	2300      	movs	r3, #0
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	f002 0203 	and.w	r2, r2, #3
 8001600:	0092      	lsls	r2, r2, #2
 8001602:	4093      	lsls	r3, r2
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800160a:	4937      	ldr	r1, [pc, #220]	; (80016e8 <HAL_GPIO_Init+0x2c4>)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	3302      	adds	r3, #2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001618:	4b36      	ldr	r3, [pc, #216]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800163c:	4a2d      	ldr	r2, [pc, #180]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001642:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	43db      	mvns	r3, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001666:	4a23      	ldr	r2, [pc, #140]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800166c:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	43db      	mvns	r3, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001690:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ba:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <HAL_GPIO_Init+0x2d0>)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3301      	adds	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	fa22 f303 	lsr.w	r3, r2, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f47f aeaf 	bne.w	8001434 <HAL_GPIO_Init+0x10>
  }
}
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	371c      	adds	r7, #28
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010000 	.word	0x40010000
 80016ec:	48000400 	.word	0x48000400
 80016f0:	48000800 	.word	0x48000800
 80016f4:	40010400 	.word	0x40010400

080016f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
 8001704:	4613      	mov	r3, r2
 8001706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001708:	787b      	ldrb	r3, [r7, #1]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800170e:	887a      	ldrh	r2, [r7, #2]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001714:	e002      	b.n	800171c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40007000 	.word	0x40007000

08001748 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <HAL_PWREx_GetVoltageRange+0x18>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40007000 	.word	0x40007000

08001764 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001772:	d130      	bne.n	80017d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800177c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001780:	d038      	beq.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800178a:	4a1e      	ldr	r2, [pc, #120]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001790:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001792:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2232      	movs	r2, #50	; 0x32
 8001798:	fb02 f303 	mul.w	r3, r2, r3
 800179c:	4a1b      	ldr	r2, [pc, #108]	; (800180c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800179e:	fba2 2303 	umull	r2, r3, r2, r3
 80017a2:	0c9b      	lsrs	r3, r3, #18
 80017a4:	3301      	adds	r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017a8:	e002      	b.n	80017b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017bc:	d102      	bne.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f2      	bne.n	80017aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d0:	d110      	bne.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e00f      	b.n	80017f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e2:	d007      	beq.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017ec:	4a05      	ldr	r2, [pc, #20]	; (8001804 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40007000 	.word	0x40007000
 8001808:	20000000 	.word	0x20000000
 800180c:	431bde83 	.word	0x431bde83

08001810 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	f000 bc11 	b.w	8002046 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001824:	4ba0      	ldr	r3, [pc, #640]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800182e:	4b9e      	ldr	r3, [pc, #632]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0310 	and.w	r3, r3, #16
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80e4 	beq.w	8001a0e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d007      	beq.n	800185c <HAL_RCC_OscConfig+0x4c>
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	2b0c      	cmp	r3, #12
 8001850:	f040 808b 	bne.w	800196a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2b01      	cmp	r3, #1
 8001858:	f040 8087 	bne.w	800196a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800185c:	4b92      	ldr	r3, [pc, #584]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <HAL_RCC_OscConfig+0x64>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e3e8      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a1a      	ldr	r2, [r3, #32]
 8001878:	4b8b      	ldr	r3, [pc, #556]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	2b00      	cmp	r3, #0
 8001882:	d004      	beq.n	800188e <HAL_RCC_OscConfig+0x7e>
 8001884:	4b88      	ldr	r3, [pc, #544]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800188c:	e005      	b.n	800189a <HAL_RCC_OscConfig+0x8a>
 800188e:	4b86      	ldr	r3, [pc, #536]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001894:	091b      	lsrs	r3, r3, #4
 8001896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800189a:	4293      	cmp	r3, r2
 800189c:	d223      	bcs.n	80018e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fd7a 	bl	800239c <RCC_SetFlashLatencyFromMSIRange>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e3c9      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018b2:	4b7d      	ldr	r3, [pc, #500]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a7c      	ldr	r2, [pc, #496]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b7a      	ldr	r3, [pc, #488]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4977      	ldr	r1, [pc, #476]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018d0:	4b75      	ldr	r3, [pc, #468]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	4972      	ldr	r1, [pc, #456]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
 80018e4:	e025      	b.n	8001932 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e6:	4b70      	ldr	r3, [pc, #448]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a6f      	ldr	r2, [pc, #444]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80018ec:	f043 0308 	orr.w	r3, r3, #8
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	496a      	ldr	r1, [pc, #424]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001904:	4b68      	ldr	r3, [pc, #416]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	4965      	ldr	r1, [pc, #404]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4618      	mov	r0, r3
 8001924:	f000 fd3a 	bl	800239c <RCC_SetFlashLatencyFromMSIRange>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e389      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001932:	f000 fc6f 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 8001936:	4602      	mov	r2, r0
 8001938:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	495a      	ldr	r1, [pc, #360]	; (8001aac <HAL_RCC_OscConfig+0x29c>)
 8001944:	5ccb      	ldrb	r3, [r1, r3]
 8001946:	f003 031f 	and.w	r3, r3, #31
 800194a:	fa22 f303 	lsr.w	r3, r2, r3
 800194e:	4a58      	ldr	r2, [pc, #352]	; (8001ab0 <HAL_RCC_OscConfig+0x2a0>)
 8001950:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001952:	4b58      	ldr	r3, [pc, #352]	; (8001ab4 <HAL_RCC_OscConfig+0x2a4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fbfe 	bl	8001158 <HAL_InitTick>
 800195c:	4603      	mov	r3, r0
 800195e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d052      	beq.n	8001a0c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	e36d      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d032      	beq.n	80019d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001972:	4b4d      	ldr	r3, [pc, #308]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a4c      	ldr	r2, [pc, #304]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800197e:	f7ff fc3b 	bl	80011f8 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001986:	f7ff fc37 	bl	80011f8 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e356      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001998:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a4:	4b40      	ldr	r3, [pc, #256]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a3f      	ldr	r2, [pc, #252]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80019aa:	f043 0308 	orr.w	r3, r3, #8
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	493a      	ldr	r1, [pc, #232]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019c2:	4b39      	ldr	r3, [pc, #228]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	4935      	ldr	r1, [pc, #212]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
 80019d6:	e01a      	b.n	8001a0e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019d8:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a32      	ldr	r2, [pc, #200]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 80019de:	f023 0301 	bic.w	r3, r3, #1
 80019e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019e4:	f7ff fc08 	bl	80011f8 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ec:	f7ff fc04 	bl	80011f8 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e323      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019fe:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x1dc>
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d073      	beq.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_OscConfig+0x21c>
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d10e      	bne.n	8001a44 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d10b      	bne.n	8001a44 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d063      	beq.n	8001b00 <HAL_RCC_OscConfig+0x2f0>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d15f      	bne.n	8001b00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e300      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4c:	d106      	bne.n	8001a5c <HAL_RCC_OscConfig+0x24c>
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e01d      	b.n	8001a98 <HAL_RCC_OscConfig+0x288>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x270>
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a0f      	ldr	r2, [pc, #60]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a0c      	ldr	r2, [pc, #48]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e00b      	b.n	8001a98 <HAL_RCC_OscConfig+0x288>
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <HAL_RCC_OscConfig+0x298>)
 8001a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d01b      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fbaa 	bl	80011f8 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa6:	e010      	b.n	8001aca <HAL_RCC_OscConfig+0x2ba>
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	080045c4 	.word	0x080045c4
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7ff fb9e 	bl	80011f8 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	; 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e2bd      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aca:	4baf      	ldr	r3, [pc, #700]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x2a8>
 8001ad6:	e014      	b.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fb8e 	bl	80011f8 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fb8a 	bl	80011f8 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e2a9      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001af2:	4ba5      	ldr	r3, [pc, #660]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x2d0>
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d060      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_OscConfig+0x310>
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d119      	bne.n	8001b4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d116      	bne.n	8001b4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b20:	4b99      	ldr	r3, [pc, #612]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_OscConfig+0x328>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e286      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b38:	4b93      	ldr	r3, [pc, #588]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	061b      	lsls	r3, r3, #24
 8001b46:	4990      	ldr	r1, [pc, #576]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	e040      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d023      	beq.n	8001b9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b56:	4b8c      	ldr	r3, [pc, #560]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a8b      	ldr	r2, [pc, #556]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7ff fb49 	bl	80011f8 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6a:	f7ff fb45 	bl	80011f8 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e264      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b7c:	4b82      	ldr	r3, [pc, #520]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b88:	4b7f      	ldr	r3, [pc, #508]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	061b      	lsls	r3, r3, #24
 8001b96:	497c      	ldr	r1, [pc, #496]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
 8001b9c:	e018      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9e:	4b7a      	ldr	r3, [pc, #488]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a79      	ldr	r2, [pc, #484]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7ff fb25 	bl	80011f8 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb2:	f7ff fb21 	bl	80011f8 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e240      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bc4:	4b70      	ldr	r3, [pc, #448]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d03c      	beq.n	8001c56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d01c      	beq.n	8001c1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be4:	4b68      	ldr	r3, [pc, #416]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bea:	4a67      	ldr	r2, [pc, #412]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fb00 	bl	80011f8 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fafc 	bl	80011f8 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e21b      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c0e:	4b5e      	ldr	r3, [pc, #376]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ef      	beq.n	8001bfc <HAL_RCC_OscConfig+0x3ec>
 8001c1c:	e01b      	b.n	8001c56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1e:	4b5a      	ldr	r3, [pc, #360]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c24:	4a58      	ldr	r2, [pc, #352]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001c26:	f023 0301 	bic.w	r3, r3, #1
 8001c2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2e:	f7ff fae3 	bl	80011f8 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c36:	f7ff fadf 	bl	80011f8 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e1fe      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c48:	4b4f      	ldr	r3, [pc, #316]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1ef      	bne.n	8001c36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80a6 	beq.w	8001db0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c64:	2300      	movs	r3, #0
 8001c66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c68:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10d      	bne.n	8001c90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c74:	4b44      	ldr	r3, [pc, #272]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c78:	4a43      	ldr	r2, [pc, #268]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c80:	4b41      	ldr	r3, [pc, #260]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c90:	4b3e      	ldr	r3, [pc, #248]	; (8001d8c <HAL_RCC_OscConfig+0x57c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d118      	bne.n	8001cce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c9c:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <HAL_RCC_OscConfig+0x57c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a3a      	ldr	r2, [pc, #232]	; (8001d8c <HAL_RCC_OscConfig+0x57c>)
 8001ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca8:	f7ff faa6 	bl	80011f8 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb0:	f7ff faa2 	bl	80011f8 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1c1      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc2:	4b32      	ldr	r3, [pc, #200]	; (8001d8c <HAL_RCC_OscConfig+0x57c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d108      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4d8>
 8001cd6:	4b2c      	ldr	r3, [pc, #176]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cdc:	4a2a      	ldr	r2, [pc, #168]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ce6:	e024      	b.n	8001d32 <HAL_RCC_OscConfig+0x522>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	d110      	bne.n	8001d12 <HAL_RCC_OscConfig+0x502>
 8001cf0:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf6:	4a24      	ldr	r2, [pc, #144]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d00:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d06:	4a20      	ldr	r2, [pc, #128]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d10:	e00f      	b.n	8001d32 <HAL_RCC_OscConfig+0x522>
 8001d12:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d18:	4a1b      	ldr	r2, [pc, #108]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d28:	4a17      	ldr	r2, [pc, #92]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001d2a:	f023 0304 	bic.w	r3, r3, #4
 8001d2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d016      	beq.n	8001d68 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fa5d 	bl	80011f8 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7ff fa59 	bl	80011f8 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e176      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_RCC_OscConfig+0x578>)
 8001d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0ed      	beq.n	8001d42 <HAL_RCC_OscConfig+0x532>
 8001d66:	e01a      	b.n	8001d9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7ff fa46 	bl	80011f8 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d6e:	e00f      	b.n	8001d90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d70:	f7ff fa42 	bl	80011f8 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d906      	bls.n	8001d90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e15f      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d90:	4baa      	ldr	r3, [pc, #680]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1e8      	bne.n	8001d70 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d9e:	7ffb      	ldrb	r3, [r7, #31]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d105      	bne.n	8001db0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da4:	4ba5      	ldr	r3, [pc, #660]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	4aa4      	ldr	r2, [pc, #656]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0320 	and.w	r3, r3, #32
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d03c      	beq.n	8001e36 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d01c      	beq.n	8001dfe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dc4:	4b9d      	ldr	r3, [pc, #628]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001dc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dca:	4a9c      	ldr	r2, [pc, #624]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7ff fa10 	bl	80011f8 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ddc:	f7ff fa0c 	bl	80011f8 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e12b      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dee:	4b93      	ldr	r3, [pc, #588]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001df0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0ef      	beq.n	8001ddc <HAL_RCC_OscConfig+0x5cc>
 8001dfc:	e01b      	b.n	8001e36 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dfe:	4b8f      	ldr	r3, [pc, #572]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e04:	4a8d      	ldr	r2, [pc, #564]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001e06:	f023 0301 	bic.w	r3, r3, #1
 8001e0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0e:	f7ff f9f3 	bl	80011f8 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e16:	f7ff f9ef 	bl	80011f8 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e10e      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e28:	4b84      	ldr	r3, [pc, #528]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001e2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1ef      	bne.n	8001e16 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8102 	beq.w	8002044 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	f040 80c5 	bne.w	8001fd4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e4a:	4b7c      	ldr	r3, [pc, #496]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f003 0203 	and.w	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d12c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d123      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d113      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9a:	085b      	lsrs	r3, r3, #1
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d109      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	085b      	lsrs	r3, r3, #1
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d067      	beq.n	8001f88 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	2b0c      	cmp	r3, #12
 8001ebc:	d062      	beq.n	8001f84 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ebe:	4b5f      	ldr	r3, [pc, #380]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0bb      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ece:	4b5b      	ldr	r3, [pc, #364]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a5a      	ldr	r2, [pc, #360]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001ed4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ed8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001eda:	f7ff f98d 	bl	80011f8 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7ff f989 	bl	80011f8 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e0a8      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef4:	4b51      	ldr	r3, [pc, #324]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f0      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f00:	4b4e      	ldr	r3, [pc, #312]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	4b4e      	ldr	r3, [pc, #312]	; (8002040 <HAL_RCC_OscConfig+0x830>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f10:	3a01      	subs	r2, #1
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	4311      	orrs	r1, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f1a:	0212      	lsls	r2, r2, #8
 8001f1c:	4311      	orrs	r1, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f22:	0852      	lsrs	r2, r2, #1
 8001f24:	3a01      	subs	r2, #1
 8001f26:	0552      	lsls	r2, r2, #21
 8001f28:	4311      	orrs	r1, r2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f2e:	0852      	lsrs	r2, r2, #1
 8001f30:	3a01      	subs	r2, #1
 8001f32:	0652      	lsls	r2, r2, #25
 8001f34:	4311      	orrs	r1, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f3a:	06d2      	lsls	r2, r2, #27
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	493f      	ldr	r1, [pc, #252]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f44:	4b3d      	ldr	r3, [pc, #244]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a3c      	ldr	r2, [pc, #240]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f50:	4b3a      	ldr	r3, [pc, #232]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4a39      	ldr	r2, [pc, #228]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f5c:	f7ff f94c 	bl	80011f8 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f64:	f7ff f948 	bl	80011f8 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e067      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f76:	4b31      	ldr	r3, [pc, #196]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f82:	e05f      	b.n	8002044 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e05e      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f88:	4b2c      	ldr	r3, [pc, #176]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d157      	bne.n	8002044 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f94:	4b29      	ldr	r3, [pc, #164]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a28      	ldr	r2, [pc, #160]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fa0:	4b26      	ldr	r3, [pc, #152]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a25      	ldr	r2, [pc, #148]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001faa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fac:	f7ff f924 	bl	80011f8 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7ff f920 	bl	80011f8 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e03f      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x7a4>
 8001fd2:	e037      	b.n	8002044 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2b0c      	cmp	r3, #12
 8001fd8:	d02d      	beq.n	8002036 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fda:	4b18      	ldr	r3, [pc, #96]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a17      	ldr	r2, [pc, #92]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d105      	bne.n	8001ffe <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	4a11      	ldr	r2, [pc, #68]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8001ff8:	f023 0303 	bic.w	r3, r3, #3
 8001ffc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	4a0e      	ldr	r2, [pc, #56]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 8002004:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200e:	f7ff f8f3 	bl	80011f8 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002016:	f7ff f8ef 	bl	80011f8 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e00e      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <HAL_RCC_OscConfig+0x82c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f0      	bne.n	8002016 <HAL_RCC_OscConfig+0x806>
 8002034:	e006      	b.n	8002044 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e005      	b.n	8002046 <HAL_RCC_OscConfig+0x836>
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3720      	adds	r7, #32
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop

08002050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0c8      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002064:	4b66      	ldr	r3, [pc, #408]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d910      	bls.n	8002094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b63      	ldr	r3, [pc, #396]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 0207 	bic.w	r2, r3, #7
 800207a:	4961      	ldr	r1, [pc, #388]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b5f      	ldr	r3, [pc, #380]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0b0      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d04c      	beq.n	800213a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a8:	4b56      	ldr	r3, [pc, #344]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d121      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e09e      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d107      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c0:	4b50      	ldr	r3, [pc, #320]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d115      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e092      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d107      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020d8:	4b4a      	ldr	r3, [pc, #296]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d109      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e086      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e8:	4b46      	ldr	r3, [pc, #280]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e07e      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020f8:	4b42      	ldr	r3, [pc, #264]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 0203 	bic.w	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	493f      	ldr	r1, [pc, #252]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800210a:	f7ff f875 	bl	80011f8 <HAL_GetTick>
 800210e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002110:	e00a      	b.n	8002128 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002112:	f7ff f871 	bl	80011f8 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e066      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002128:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 020c 	and.w	r2, r3, #12
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	429a      	cmp	r2, r3
 8002138:	d1eb      	bne.n	8002112 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d008      	beq.n	8002158 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002146:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	492c      	ldr	r1, [pc, #176]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 8002154:	4313      	orrs	r3, r2
 8002156:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002158:	4b29      	ldr	r3, [pc, #164]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d210      	bcs.n	8002188 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b26      	ldr	r3, [pc, #152]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 0207 	bic.w	r2, r3, #7
 800216e:	4924      	ldr	r1, [pc, #144]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b22      	ldr	r3, [pc, #136]	; (8002200 <HAL_RCC_ClockConfig+0x1b0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e036      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002194:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4918      	ldr	r1, [pc, #96]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4910      	ldr	r1, [pc, #64]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021c6:	f000 f825 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80021ca:	4602      	mov	r2, r0
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_RCC_ClockConfig+0x1b4>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	490c      	ldr	r1, [pc, #48]	; (8002208 <HAL_RCC_ClockConfig+0x1b8>)
 80021d8:	5ccb      	ldrb	r3, [r1, r3]
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	fa22 f303 	lsr.w	r3, r2, r3
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe ffb4 	bl	8001158 <HAL_InitTick>
 80021f0:	4603      	mov	r3, r0
 80021f2:	72fb      	strb	r3, [r7, #11]

  return status;
 80021f4:	7afb      	ldrb	r3, [r7, #11]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40022000 	.word	0x40022000
 8002204:	40021000 	.word	0x40021000
 8002208:	080045c4 	.word	0x080045c4
 800220c:	20000000 	.word	0x20000000
 8002210:	20000004 	.word	0x20000004

08002214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002222:	4b3e      	ldr	r3, [pc, #248]	; (800231c <HAL_RCC_GetSysClockFreq+0x108>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800222c:	4b3b      	ldr	r3, [pc, #236]	; (800231c <HAL_RCC_GetSysClockFreq+0x108>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x34>
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b0c      	cmp	r3, #12
 8002240:	d121      	bne.n	8002286 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d11e      	bne.n	8002286 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002248:	4b34      	ldr	r3, [pc, #208]	; (800231c <HAL_RCC_GetSysClockFreq+0x108>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d107      	bne.n	8002264 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002254:	4b31      	ldr	r3, [pc, #196]	; (800231c <HAL_RCC_GetSysClockFreq+0x108>)
 8002256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	e005      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002264:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_RCC_GetSysClockFreq+0x108>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002270:	4a2b      	ldr	r2, [pc, #172]	; (8002320 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002278:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10d      	bne.n	800229c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002284:	e00a      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	2b04      	cmp	r3, #4
 800228a:	d102      	bne.n	8002292 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800228c:	4b25      	ldr	r3, [pc, #148]	; (8002324 <HAL_RCC_GetSysClockFreq+0x110>)
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	e004      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b08      	cmp	r3, #8
 8002296:	d101      	bne.n	800229c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002298:	4b23      	ldr	r3, [pc, #140]	; (8002328 <HAL_RCC_GetSysClockFreq+0x114>)
 800229a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2b0c      	cmp	r3, #12
 80022a0:	d134      	bne.n	800230c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022a2:	4b1e      	ldr	r3, [pc, #120]	; (800231c <HAL_RCC_GetSysClockFreq+0x108>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d003      	beq.n	80022ba <HAL_RCC_GetSysClockFreq+0xa6>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d003      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0xac>
 80022b8:	e005      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022ba:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <HAL_RCC_GetSysClockFreq+0x110>)
 80022bc:	617b      	str	r3, [r7, #20]
      break;
 80022be:	e005      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022c0:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_RCC_GetSysClockFreq+0x114>)
 80022c2:	617b      	str	r3, [r7, #20]
      break;
 80022c4:	e002      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	617b      	str	r3, [r7, #20]
      break;
 80022ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <HAL_RCC_GetSysClockFreq+0x108>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	3301      	adds	r3, #1
 80022d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <HAL_RCC_GetSysClockFreq+0x108>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	fb02 f203 	mul.w	r2, r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <HAL_RCC_GetSysClockFreq+0x108>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	0e5b      	lsrs	r3, r3, #25
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	3301      	adds	r3, #1
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	fbb2 f3f3 	udiv	r3, r2, r3
 800230a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800230c:	69bb      	ldr	r3, [r7, #24]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3724      	adds	r7, #36	; 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	080045dc 	.word	0x080045dc
 8002324:	00f42400 	.word	0x00f42400
 8002328:	007a1200 	.word	0x007a1200

0800232c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <HAL_RCC_GetHCLKFreq+0x14>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000000 	.word	0x20000000

08002344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002348:	f7ff fff0 	bl	800232c <HAL_RCC_GetHCLKFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	4904      	ldr	r1, [pc, #16]	; (800236c <HAL_RCC_GetPCLK1Freq+0x28>)
 800235a:	5ccb      	ldrb	r3, [r1, r3]
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	080045d4 	.word	0x080045d4

08002370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002374:	f7ff ffda 	bl	800232c <HAL_RCC_GetHCLKFreq>
 8002378:	4602      	mov	r2, r0
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	0adb      	lsrs	r3, r3, #11
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	4904      	ldr	r1, [pc, #16]	; (8002398 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002386:	5ccb      	ldrb	r3, [r1, r3]
 8002388:	f003 031f 	and.w	r3, r3, #31
 800238c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	080045d4 	.word	0x080045d4

0800239c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023a4:	2300      	movs	r3, #0
 80023a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023a8:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023b4:	f7ff f9c8 	bl	8001748 <HAL_PWREx_GetVoltageRange>
 80023b8:	6178      	str	r0, [r7, #20]
 80023ba:	e014      	b.n	80023e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023bc:	4b25      	ldr	r3, [pc, #148]	; (8002454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c0:	4a24      	ldr	r2, [pc, #144]	; (8002454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c6:	6593      	str	r3, [r2, #88]	; 0x58
 80023c8:	4b22      	ldr	r3, [pc, #136]	; (8002454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023d4:	f7ff f9b8 	bl	8001748 <HAL_PWREx_GetVoltageRange>
 80023d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023da:	4b1e      	ldr	r3, [pc, #120]	; (8002454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ec:	d10b      	bne.n	8002406 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b80      	cmp	r3, #128	; 0x80
 80023f2:	d919      	bls.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2ba0      	cmp	r3, #160	; 0xa0
 80023f8:	d902      	bls.n	8002400 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023fa:	2302      	movs	r3, #2
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	e013      	b.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002400:	2301      	movs	r3, #1
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	e010      	b.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b80      	cmp	r3, #128	; 0x80
 800240a:	d902      	bls.n	8002412 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800240c:	2303      	movs	r3, #3
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	e00a      	b.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b80      	cmp	r3, #128	; 0x80
 8002416:	d102      	bne.n	800241e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002418:	2302      	movs	r3, #2
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	e004      	b.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b70      	cmp	r3, #112	; 0x70
 8002422:	d101      	bne.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002424:	2301      	movs	r3, #1
 8002426:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f023 0207 	bic.w	r2, r3, #7
 8002430:	4909      	ldr	r1, [pc, #36]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002438:	4b07      	ldr	r3, [pc, #28]	; (8002458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	429a      	cmp	r2, r3
 8002444:	d001      	beq.n	800244a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40021000 	.word	0x40021000
 8002458:	40022000 	.word	0x40022000

0800245c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002464:	2300      	movs	r3, #0
 8002466:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002468:	2300      	movs	r3, #0
 800246a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002474:	2b00      	cmp	r3, #0
 8002476:	d031      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002480:	d01a      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002482:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002486:	d814      	bhi.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002488:	2b00      	cmp	r3, #0
 800248a:	d009      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800248c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002490:	d10f      	bne.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002492:	4bac      	ldr	r3, [pc, #688]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	4aab      	ldr	r2, [pc, #684]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800249e:	e00c      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3304      	adds	r3, #4
 80024a4:	2100      	movs	r1, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f9dc 	bl	8002864 <RCCEx_PLLSAI1_Config>
 80024ac:	4603      	mov	r3, r0
 80024ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024b0:	e003      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	74fb      	strb	r3, [r7, #19]
      break;
 80024b6:	e000      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80024b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ba:	7cfb      	ldrb	r3, [r7, #19]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10b      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024c0:	4ba0      	ldr	r3, [pc, #640]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ce:	499d      	ldr	r1, [pc, #628]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024d6:	e001      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d8:	7cfb      	ldrb	r3, [r7, #19]
 80024da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8099 	beq.w	800261c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024ee:	4b95      	ldr	r3, [pc, #596]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80024fe:	2300      	movs	r3, #0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00d      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002504:	4b8f      	ldr	r3, [pc, #572]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002508:	4a8e      	ldr	r2, [pc, #568]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800250a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250e:	6593      	str	r3, [r2, #88]	; 0x58
 8002510:	4b8c      	ldr	r3, [pc, #560]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800251c:	2301      	movs	r3, #1
 800251e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002520:	4b89      	ldr	r3, [pc, #548]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a88      	ldr	r2, [pc, #544]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800252c:	f7fe fe64 	bl	80011f8 <HAL_GetTick>
 8002530:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002532:	e009      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002534:	f7fe fe60 	bl	80011f8 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d902      	bls.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	74fb      	strb	r3, [r7, #19]
        break;
 8002546:	e005      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002548:	4b7f      	ldr	r3, [pc, #508]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ef      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d155      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800255a:	4b7a      	ldr	r3, [pc, #488]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002564:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01e      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	429a      	cmp	r2, r3
 8002574:	d019      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002576:	4b73      	ldr	r3, [pc, #460]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002580:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002582:	4b70      	ldr	r3, [pc, #448]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002588:	4a6e      	ldr	r2, [pc, #440]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800258a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002592:	4b6c      	ldr	r3, [pc, #432]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002598:	4a6a      	ldr	r2, [pc, #424]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800259a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025a2:	4a68      	ldr	r2, [pc, #416]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d016      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7fe fe20 	bl	80011f8 <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ba:	e00b      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025bc:	f7fe fe1c 	bl	80011f8 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d902      	bls.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	74fb      	strb	r3, [r7, #19]
            break;
 80025d2:	e006      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d4:	4b5b      	ldr	r3, [pc, #364]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0ec      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80025e2:	7cfb      	ldrb	r3, [r7, #19]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10b      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025e8:	4b56      	ldr	r3, [pc, #344]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f6:	4953      	ldr	r1, [pc, #332]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025fe:	e004      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002600:	7cfb      	ldrb	r3, [r7, #19]
 8002602:	74bb      	strb	r3, [r7, #18]
 8002604:	e001      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800260a:	7c7b      	ldrb	r3, [r7, #17]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d105      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002610:	4b4c      	ldr	r3, [pc, #304]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	4a4b      	ldr	r2, [pc, #300]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800261a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002628:	4b46      	ldr	r3, [pc, #280]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	f023 0203 	bic.w	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	4943      	ldr	r1, [pc, #268]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800264a:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800264c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002650:	f023 020c 	bic.w	r2, r3, #12
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	493a      	ldr	r1, [pc, #232]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800266c:	4b35      	ldr	r3, [pc, #212]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267a:	4932      	ldr	r1, [pc, #200]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800268e:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002694:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269c:	4929      	ldr	r1, [pc, #164]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026b0:	4b24      	ldr	r3, [pc, #144]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	4921      	ldr	r1, [pc, #132]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	4918      	ldr	r1, [pc, #96]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4910      	ldr	r1, [pc, #64]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d02c      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	4907      	ldr	r1, [pc, #28]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002734:	d10a      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002736:	4b03      	ldr	r3, [pc, #12]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	4a02      	ldr	r2, [pc, #8]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800273c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002740:	60d3      	str	r3, [r2, #12]
 8002742:	e015      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002744:	40021000 	.word	0x40021000
 8002748:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002754:	d10c      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3304      	adds	r3, #4
 800275a:	2101      	movs	r1, #1
 800275c:	4618      	mov	r0, r3
 800275e:	f000 f881 	bl	8002864 <RCCEx_PLLSAI1_Config>
 8002762:	4603      	mov	r3, r0
 8002764:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002766:	7cfb      	ldrb	r3, [r7, #19]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800276c:	7cfb      	ldrb	r3, [r7, #19]
 800276e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d028      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800277c:	4b30      	ldr	r3, [pc, #192]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	492d      	ldr	r1, [pc, #180]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800279a:	d106      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800279c:	4b28      	ldr	r3, [pc, #160]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a27      	ldr	r2, [pc, #156]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027a6:	60d3      	str	r3, [r2, #12]
 80027a8:	e011      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027b2:	d10c      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3304      	adds	r3, #4
 80027b8:	2101      	movs	r1, #1
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f852 	bl	8002864 <RCCEx_PLLSAI1_Config>
 80027c0:	4603      	mov	r3, r0
 80027c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027c4:	7cfb      	ldrb	r3, [r7, #19]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80027ca:	7cfb      	ldrb	r3, [r7, #19]
 80027cc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d01c      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027da:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4915      	ldr	r1, [pc, #84]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027f8:	d10c      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3304      	adds	r3, #4
 80027fe:	2102      	movs	r1, #2
 8002800:	4618      	mov	r0, r3
 8002802:	f000 f82f 	bl	8002864 <RCCEx_PLLSAI1_Config>
 8002806:	4603      	mov	r3, r0
 8002808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800280a:	7cfb      	ldrb	r3, [r7, #19]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282e:	4904      	ldr	r1, [pc, #16]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002836:	7cbb      	ldrb	r3, [r7, #18]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000

08002844 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a04      	ldr	r2, [pc, #16]	; (8002860 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800284e:	f043 0304 	orr.w	r3, r3, #4
 8002852:	6013      	str	r3, [r2, #0]
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000

08002864 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002872:	4b74      	ldr	r3, [pc, #464]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d018      	beq.n	80028b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800287e:	4b71      	ldr	r3, [pc, #452]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f003 0203 	and.w	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d10d      	bne.n	80028aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
       ||
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002896:	4b6b      	ldr	r3, [pc, #428]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
       ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d047      	beq.n	800293a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
 80028ae:	e044      	b.n	800293a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d018      	beq.n	80028ea <RCCEx_PLLSAI1_Config+0x86>
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d825      	bhi.n	8002908 <RCCEx_PLLSAI1_Config+0xa4>
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d002      	beq.n	80028c6 <RCCEx_PLLSAI1_Config+0x62>
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d009      	beq.n	80028d8 <RCCEx_PLLSAI1_Config+0x74>
 80028c4:	e020      	b.n	8002908 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028c6:	4b5f      	ldr	r3, [pc, #380]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d11d      	bne.n	800290e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d6:	e01a      	b.n	800290e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028d8:	4b5a      	ldr	r3, [pc, #360]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d116      	bne.n	8002912 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e8:	e013      	b.n	8002912 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028ea:	4b56      	ldr	r3, [pc, #344]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028f6:	4b53      	ldr	r3, [pc, #332]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002906:	e006      	b.n	8002916 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
      break;
 800290c:	e004      	b.n	8002918 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800290e:	bf00      	nop
 8002910:	e002      	b.n	8002918 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002912:	bf00      	nop
 8002914:	e000      	b.n	8002918 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002916:	bf00      	nop
    }

    if(status == HAL_OK)
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10d      	bne.n	800293a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800291e:	4b49      	ldr	r3, [pc, #292]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6819      	ldr	r1, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	430b      	orrs	r3, r1
 8002934:	4943      	ldr	r1, [pc, #268]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002936:	4313      	orrs	r3, r2
 8002938:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d17c      	bne.n	8002a3a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002940:	4b40      	ldr	r3, [pc, #256]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a3f      	ldr	r2, [pc, #252]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002946:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800294a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800294c:	f7fe fc54 	bl	80011f8 <HAL_GetTick>
 8002950:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002952:	e009      	b.n	8002968 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002954:	f7fe fc50 	bl	80011f8 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d902      	bls.n	8002968 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	73fb      	strb	r3, [r7, #15]
        break;
 8002966:	e005      	b.n	8002974 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002968:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1ef      	bne.n	8002954 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d15f      	bne.n	8002a3a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d110      	bne.n	80029a2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002980:	4b30      	ldr	r3, [pc, #192]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002988:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6892      	ldr	r2, [r2, #8]
 8002990:	0211      	lsls	r1, r2, #8
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68d2      	ldr	r2, [r2, #12]
 8002996:	06d2      	lsls	r2, r2, #27
 8002998:	430a      	orrs	r2, r1
 800299a:	492a      	ldr	r1, [pc, #168]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 800299c:	4313      	orrs	r3, r2
 800299e:	610b      	str	r3, [r1, #16]
 80029a0:	e027      	b.n	80029f2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d112      	bne.n	80029ce <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a8:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6892      	ldr	r2, [r2, #8]
 80029b8:	0211      	lsls	r1, r2, #8
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6912      	ldr	r2, [r2, #16]
 80029be:	0852      	lsrs	r2, r2, #1
 80029c0:	3a01      	subs	r2, #1
 80029c2:	0552      	lsls	r2, r2, #21
 80029c4:	430a      	orrs	r2, r1
 80029c6:	491f      	ldr	r1, [pc, #124]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	610b      	str	r3, [r1, #16]
 80029cc:	e011      	b.n	80029f2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6892      	ldr	r2, [r2, #8]
 80029de:	0211      	lsls	r1, r2, #8
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6952      	ldr	r2, [r2, #20]
 80029e4:	0852      	lsrs	r2, r2, #1
 80029e6:	3a01      	subs	r2, #1
 80029e8:	0652      	lsls	r2, r2, #25
 80029ea:	430a      	orrs	r2, r1
 80029ec:	4915      	ldr	r1, [pc, #84]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029f2:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a13      	ldr	r2, [pc, #76]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7fe fbfb 	bl	80011f8 <HAL_GetTick>
 8002a02:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a04:	e009      	b.n	8002a1a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a06:	f7fe fbf7 	bl	80011f8 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d902      	bls.n	8002a1a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	73fb      	strb	r3, [r7, #15]
          break;
 8002a18:	e005      	b.n	8002a26 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0ef      	beq.n	8002a06 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d106      	bne.n	8002a3a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	4903      	ldr	r1, [pc, #12]	; (8002a44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000

08002a48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e040      	b.n	8002adc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fe f9d8 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2224      	movs	r2, #36	; 0x24
 8002a74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0201 	bic.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f992 	bl	8002db0 <UART_SetConfig>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e022      	b.n	8002adc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fb92 	bl	80031c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ab2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ac2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 fc19 	bl	800330c <UART_CheckIdleState>
 8002ada:	4603      	mov	r3, r0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08a      	sub	sp, #40	; 0x28
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002af8:	2b20      	cmp	r3, #32
 8002afa:	f040 8082 	bne.w	8002c02 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_UART_Transmit+0x26>
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e07a      	b.n	8002c04 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_UART_Transmit+0x38>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e073      	b.n	8002c04 <HAL_UART_Transmit+0x120>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2221      	movs	r2, #33	; 0x21
 8002b30:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b32:	f7fe fb61 	bl	80011f8 <HAL_GetTick>
 8002b36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	88fa      	ldrh	r2, [r7, #6]
 8002b3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	88fa      	ldrh	r2, [r7, #6]
 8002b44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b50:	d108      	bne.n	8002b64 <HAL_UART_Transmit+0x80>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d104      	bne.n	8002b64 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	e003      	b.n	8002b6c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002b74:	e02d      	b.n	8002bd2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2180      	movs	r1, #128	; 0x80
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fc0c 	bl	800339e <UART_WaitOnFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e039      	b.n	8002c04 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10b      	bne.n	8002bae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	881a      	ldrh	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ba2:	b292      	uxth	r2, r2
 8002ba4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	3302      	adds	r3, #2
 8002baa:	61bb      	str	r3, [r7, #24]
 8002bac:	e008      	b.n	8002bc0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	781a      	ldrb	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	b292      	uxth	r2, r2
 8002bb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1cb      	bne.n	8002b76 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2200      	movs	r2, #0
 8002be6:	2140      	movs	r1, #64	; 0x40
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 fbd8 	bl	800339e <UART_WaitOnFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e005      	b.n	8002c04 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
  }
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3720      	adds	r7, #32
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	; 0x28
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	f040 80bf 	bne.w	8002da4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HAL_UART_Receive+0x26>
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e0b7      	b.n	8002da6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_UART_Receive+0x38>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e0b0      	b.n	8002da6 <HAL_UART_Receive+0x19a>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2222      	movs	r2, #34	; 0x22
 8002c58:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c60:	f7fe faca 	bl	80011f8 <HAL_GetTick>
 8002c64:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	88fa      	ldrh	r2, [r7, #6]
 8002c6a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	88fa      	ldrh	r2, [r7, #6]
 8002c72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7e:	d10e      	bne.n	8002c9e <HAL_UART_Receive+0x92>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d105      	bne.n	8002c94 <HAL_UART_Receive+0x88>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002c8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c92:	e02d      	b.n	8002cf0 <HAL_UART_Receive+0xe4>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	22ff      	movs	r2, #255	; 0xff
 8002c98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c9c:	e028      	b.n	8002cf0 <HAL_UART_Receive+0xe4>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10d      	bne.n	8002cc2 <HAL_UART_Receive+0xb6>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d104      	bne.n	8002cb8 <HAL_UART_Receive+0xac>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	22ff      	movs	r2, #255	; 0xff
 8002cb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002cb6:	e01b      	b.n	8002cf0 <HAL_UART_Receive+0xe4>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	227f      	movs	r2, #127	; 0x7f
 8002cbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002cc0:	e016      	b.n	8002cf0 <HAL_UART_Receive+0xe4>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cca:	d10d      	bne.n	8002ce8 <HAL_UART_Receive+0xdc>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d104      	bne.n	8002cde <HAL_UART_Receive+0xd2>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	227f      	movs	r2, #127	; 0x7f
 8002cd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002cdc:	e008      	b.n	8002cf0 <HAL_UART_Receive+0xe4>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	223f      	movs	r2, #63	; 0x3f
 8002ce2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ce6:	e003      	b.n	8002cf0 <HAL_UART_Receive+0xe4>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002cf6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d00:	d108      	bne.n	8002d14 <HAL_UART_Receive+0x108>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d104      	bne.n	8002d14 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	61bb      	str	r3, [r7, #24]
 8002d12:	e003      	b.n	8002d1c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002d24:	e033      	b.n	8002d8e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2120      	movs	r1, #32
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 fb34 	bl	800339e <UART_WaitOnFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e032      	b.n	8002da6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10c      	bne.n	8002d60 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	8a7b      	ldrh	r3, [r7, #18]
 8002d50:	4013      	ands	r3, r2
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	e00d      	b.n	8002d7c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	8a7b      	ldrh	r3, [r7, #18]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	4013      	ands	r3, r2
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1c5      	bne.n	8002d26 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	e000      	b.n	8002da6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002da4:	2302      	movs	r3, #2
  }
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002db0:	b5b0      	push	{r4, r5, r7, lr}
 8002db2:	b088      	sub	sp, #32
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4baf      	ldr	r3, [pc, #700]	; (8003098 <UART_SetConfig+0x2e8>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	69f9      	ldr	r1, [r7, #28]
 8002de4:	430b      	orrs	r3, r1
 8002de6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4aa4      	ldr	r2, [pc, #656]	; (800309c <UART_SetConfig+0x2ec>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a9b      	ldr	r2, [pc, #620]	; (80030a0 <UART_SetConfig+0x2f0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d121      	bne.n	8002e7a <UART_SetConfig+0xca>
 8002e36:	4b9b      	ldr	r3, [pc, #620]	; (80030a4 <UART_SetConfig+0x2f4>)
 8002e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d817      	bhi.n	8002e74 <UART_SetConfig+0xc4>
 8002e44:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <UART_SetConfig+0x9c>)
 8002e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4a:	bf00      	nop
 8002e4c:	08002e5d 	.word	0x08002e5d
 8002e50:	08002e69 	.word	0x08002e69
 8002e54:	08002e63 	.word	0x08002e63
 8002e58:	08002e6f 	.word	0x08002e6f
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	76fb      	strb	r3, [r7, #27]
 8002e60:	e070      	b.n	8002f44 <UART_SetConfig+0x194>
 8002e62:	2302      	movs	r3, #2
 8002e64:	76fb      	strb	r3, [r7, #27]
 8002e66:	e06d      	b.n	8002f44 <UART_SetConfig+0x194>
 8002e68:	2304      	movs	r3, #4
 8002e6a:	76fb      	strb	r3, [r7, #27]
 8002e6c:	e06a      	b.n	8002f44 <UART_SetConfig+0x194>
 8002e6e:	2308      	movs	r3, #8
 8002e70:	76fb      	strb	r3, [r7, #27]
 8002e72:	e067      	b.n	8002f44 <UART_SetConfig+0x194>
 8002e74:	2310      	movs	r3, #16
 8002e76:	76fb      	strb	r3, [r7, #27]
 8002e78:	e064      	b.n	8002f44 <UART_SetConfig+0x194>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a8a      	ldr	r2, [pc, #552]	; (80030a8 <UART_SetConfig+0x2f8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d132      	bne.n	8002eea <UART_SetConfig+0x13a>
 8002e84:	4b87      	ldr	r3, [pc, #540]	; (80030a4 <UART_SetConfig+0x2f4>)
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b0c      	cmp	r3, #12
 8002e90:	d828      	bhi.n	8002ee4 <UART_SetConfig+0x134>
 8002e92:	a201      	add	r2, pc, #4	; (adr r2, 8002e98 <UART_SetConfig+0xe8>)
 8002e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e98:	08002ecd 	.word	0x08002ecd
 8002e9c:	08002ee5 	.word	0x08002ee5
 8002ea0:	08002ee5 	.word	0x08002ee5
 8002ea4:	08002ee5 	.word	0x08002ee5
 8002ea8:	08002ed9 	.word	0x08002ed9
 8002eac:	08002ee5 	.word	0x08002ee5
 8002eb0:	08002ee5 	.word	0x08002ee5
 8002eb4:	08002ee5 	.word	0x08002ee5
 8002eb8:	08002ed3 	.word	0x08002ed3
 8002ebc:	08002ee5 	.word	0x08002ee5
 8002ec0:	08002ee5 	.word	0x08002ee5
 8002ec4:	08002ee5 	.word	0x08002ee5
 8002ec8:	08002edf 	.word	0x08002edf
 8002ecc:	2300      	movs	r3, #0
 8002ece:	76fb      	strb	r3, [r7, #27]
 8002ed0:	e038      	b.n	8002f44 <UART_SetConfig+0x194>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	76fb      	strb	r3, [r7, #27]
 8002ed6:	e035      	b.n	8002f44 <UART_SetConfig+0x194>
 8002ed8:	2304      	movs	r3, #4
 8002eda:	76fb      	strb	r3, [r7, #27]
 8002edc:	e032      	b.n	8002f44 <UART_SetConfig+0x194>
 8002ede:	2308      	movs	r3, #8
 8002ee0:	76fb      	strb	r3, [r7, #27]
 8002ee2:	e02f      	b.n	8002f44 <UART_SetConfig+0x194>
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	76fb      	strb	r3, [r7, #27]
 8002ee8:	e02c      	b.n	8002f44 <UART_SetConfig+0x194>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a6b      	ldr	r2, [pc, #428]	; (800309c <UART_SetConfig+0x2ec>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d125      	bne.n	8002f40 <UART_SetConfig+0x190>
 8002ef4:	4b6b      	ldr	r3, [pc, #428]	; (80030a4 <UART_SetConfig+0x2f4>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002efe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f02:	d017      	beq.n	8002f34 <UART_SetConfig+0x184>
 8002f04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f08:	d817      	bhi.n	8002f3a <UART_SetConfig+0x18a>
 8002f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f0e:	d00b      	beq.n	8002f28 <UART_SetConfig+0x178>
 8002f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f14:	d811      	bhi.n	8002f3a <UART_SetConfig+0x18a>
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <UART_SetConfig+0x172>
 8002f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f1e:	d006      	beq.n	8002f2e <UART_SetConfig+0x17e>
 8002f20:	e00b      	b.n	8002f3a <UART_SetConfig+0x18a>
 8002f22:	2300      	movs	r3, #0
 8002f24:	76fb      	strb	r3, [r7, #27]
 8002f26:	e00d      	b.n	8002f44 <UART_SetConfig+0x194>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	76fb      	strb	r3, [r7, #27]
 8002f2c:	e00a      	b.n	8002f44 <UART_SetConfig+0x194>
 8002f2e:	2304      	movs	r3, #4
 8002f30:	76fb      	strb	r3, [r7, #27]
 8002f32:	e007      	b.n	8002f44 <UART_SetConfig+0x194>
 8002f34:	2308      	movs	r3, #8
 8002f36:	76fb      	strb	r3, [r7, #27]
 8002f38:	e004      	b.n	8002f44 <UART_SetConfig+0x194>
 8002f3a:	2310      	movs	r3, #16
 8002f3c:	76fb      	strb	r3, [r7, #27]
 8002f3e:	e001      	b.n	8002f44 <UART_SetConfig+0x194>
 8002f40:	2310      	movs	r3, #16
 8002f42:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a54      	ldr	r2, [pc, #336]	; (800309c <UART_SetConfig+0x2ec>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d173      	bne.n	8003036 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f4e:	7efb      	ldrb	r3, [r7, #27]
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d824      	bhi.n	8002f9e <UART_SetConfig+0x1ee>
 8002f54:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <UART_SetConfig+0x1ac>)
 8002f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5a:	bf00      	nop
 8002f5c:	08002f81 	.word	0x08002f81
 8002f60:	08002f9f 	.word	0x08002f9f
 8002f64:	08002f89 	.word	0x08002f89
 8002f68:	08002f9f 	.word	0x08002f9f
 8002f6c:	08002f8f 	.word	0x08002f8f
 8002f70:	08002f9f 	.word	0x08002f9f
 8002f74:	08002f9f 	.word	0x08002f9f
 8002f78:	08002f9f 	.word	0x08002f9f
 8002f7c:	08002f97 	.word	0x08002f97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f80:	f7ff f9e0 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8002f84:	6178      	str	r0, [r7, #20]
        break;
 8002f86:	e00f      	b.n	8002fa8 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f88:	4b48      	ldr	r3, [pc, #288]	; (80030ac <UART_SetConfig+0x2fc>)
 8002f8a:	617b      	str	r3, [r7, #20]
        break;
 8002f8c:	e00c      	b.n	8002fa8 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f8e:	f7ff f941 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 8002f92:	6178      	str	r0, [r7, #20]
        break;
 8002f94:	e008      	b.n	8002fa8 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f9a:	617b      	str	r3, [r7, #20]
        break;
 8002f9c:	e004      	b.n	8002fa8 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	76bb      	strb	r3, [r7, #26]
        break;
 8002fa6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80fe 	beq.w	80031ac <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d305      	bcc.n	8002fcc <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d902      	bls.n	8002fd2 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	76bb      	strb	r3, [r7, #26]
 8002fd0:	e0ec      	b.n	80031ac <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f04f 0100 	mov.w	r1, #0
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	020b      	lsls	r3, r1, #8
 8002fe4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002fe8:	0202      	lsls	r2, r0, #8
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	6849      	ldr	r1, [r1, #4]
 8002fee:	0849      	lsrs	r1, r1, #1
 8002ff0:	4608      	mov	r0, r1
 8002ff2:	f04f 0100 	mov.w	r1, #0
 8002ff6:	1814      	adds	r4, r2, r0
 8002ff8:	eb43 0501 	adc.w	r5, r3, r1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	461a      	mov	r2, r3
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	4620      	mov	r0, r4
 8003008:	4629      	mov	r1, r5
 800300a:	f7fd f939 	bl	8000280 <__aeabi_uldivmod>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4613      	mov	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800301c:	d308      	bcc.n	8003030 <UART_SetConfig+0x280>
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003024:	d204      	bcs.n	8003030 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	e0bd      	b.n	80031ac <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	76bb      	strb	r3, [r7, #26]
 8003034:	e0ba      	b.n	80031ac <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800303e:	d168      	bne.n	8003112 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8003040:	7efb      	ldrb	r3, [r7, #27]
 8003042:	2b08      	cmp	r3, #8
 8003044:	d834      	bhi.n	80030b0 <UART_SetConfig+0x300>
 8003046:	a201      	add	r2, pc, #4	; (adr r2, 800304c <UART_SetConfig+0x29c>)
 8003048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304c:	08003071 	.word	0x08003071
 8003050:	08003079 	.word	0x08003079
 8003054:	08003081 	.word	0x08003081
 8003058:	080030b1 	.word	0x080030b1
 800305c:	08003087 	.word	0x08003087
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030b1 	.word	0x080030b1
 800306c:	0800308f 	.word	0x0800308f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003070:	f7ff f968 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8003074:	6178      	str	r0, [r7, #20]
        break;
 8003076:	e020      	b.n	80030ba <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003078:	f7ff f97a 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 800307c:	6178      	str	r0, [r7, #20]
        break;
 800307e:	e01c      	b.n	80030ba <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <UART_SetConfig+0x2fc>)
 8003082:	617b      	str	r3, [r7, #20]
        break;
 8003084:	e019      	b.n	80030ba <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003086:	f7ff f8c5 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 800308a:	6178      	str	r0, [r7, #20]
        break;
 800308c:	e015      	b.n	80030ba <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800308e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003092:	617b      	str	r3, [r7, #20]
        break;
 8003094:	e011      	b.n	80030ba <UART_SetConfig+0x30a>
 8003096:	bf00      	nop
 8003098:	efff69f3 	.word	0xefff69f3
 800309c:	40008000 	.word	0x40008000
 80030a0:	40013800 	.word	0x40013800
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40004400 	.word	0x40004400
 80030ac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d075      	beq.n	80031ac <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	005a      	lsls	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	085b      	lsrs	r3, r3, #1
 80030ca:	441a      	add	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	2b0f      	cmp	r3, #15
 80030dc:	d916      	bls.n	800310c <UART_SetConfig+0x35c>
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e4:	d212      	bcs.n	800310c <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	f023 030f 	bic.w	r3, r3, #15
 80030ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	085b      	lsrs	r3, r3, #1
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	89fb      	ldrh	r3, [r7, #14]
 80030fe:	4313      	orrs	r3, r2
 8003100:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	89fa      	ldrh	r2, [r7, #14]
 8003108:	60da      	str	r2, [r3, #12]
 800310a:	e04f      	b.n	80031ac <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	76bb      	strb	r3, [r7, #26]
 8003110:	e04c      	b.n	80031ac <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003112:	7efb      	ldrb	r3, [r7, #27]
 8003114:	2b08      	cmp	r3, #8
 8003116:	d828      	bhi.n	800316a <UART_SetConfig+0x3ba>
 8003118:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <UART_SetConfig+0x370>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003145 	.word	0x08003145
 8003124:	0800314d 	.word	0x0800314d
 8003128:	08003155 	.word	0x08003155
 800312c:	0800316b 	.word	0x0800316b
 8003130:	0800315b 	.word	0x0800315b
 8003134:	0800316b 	.word	0x0800316b
 8003138:	0800316b 	.word	0x0800316b
 800313c:	0800316b 	.word	0x0800316b
 8003140:	08003163 	.word	0x08003163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003144:	f7ff f8fe 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8003148:	6178      	str	r0, [r7, #20]
        break;
 800314a:	e013      	b.n	8003174 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800314c:	f7ff f910 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 8003150:	6178      	str	r0, [r7, #20]
        break;
 8003152:	e00f      	b.n	8003174 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003154:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <UART_SetConfig+0x414>)
 8003156:	617b      	str	r3, [r7, #20]
        break;
 8003158:	e00c      	b.n	8003174 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800315a:	f7ff f85b 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 800315e:	6178      	str	r0, [r7, #20]
        break;
 8003160:	e008      	b.n	8003174 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003166:	617b      	str	r3, [r7, #20]
        break;
 8003168:	e004      	b.n	8003174 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	76bb      	strb	r3, [r7, #26]
        break;
 8003172:	bf00      	nop
    }

    if (pclk != 0U)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d018      	beq.n	80031ac <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	085a      	lsrs	r2, r3, #1
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	441a      	add	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	fbb2 f3f3 	udiv	r3, r2, r3
 800318c:	b29b      	uxth	r3, r3
 800318e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	2b0f      	cmp	r3, #15
 8003194:	d908      	bls.n	80031a8 <UART_SetConfig+0x3f8>
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319c:	d204      	bcs.n	80031a8 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	e001      	b.n	80031ac <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80031b8:	7ebb      	ldrb	r3, [r7, #26]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bdb0      	pop	{r4, r5, r7, pc}
 80031c2:	bf00      	nop
 80031c4:	00f42400 	.word	0x00f42400

080031c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01a      	beq.n	80032de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c6:	d10a      	bne.n	80032de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	605a      	str	r2, [r3, #4]
  }
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af02      	add	r7, sp, #8
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800331c:	f7fd ff6c 	bl	80011f8 <HAL_GetTick>
 8003320:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b08      	cmp	r3, #8
 800332e:	d10e      	bne.n	800334e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003330:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f82d 	bl	800339e <UART_WaitOnFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e023      	b.n	8003396 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b04      	cmp	r3, #4
 800335a:	d10e      	bne.n	800337a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800335c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f817 	bl	800339e <UART_WaitOnFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e00d      	b.n	8003396 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2220      	movs	r2, #32
 800337e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	4613      	mov	r3, r2
 80033ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ae:	e05e      	b.n	800346e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b6:	d05a      	beq.n	800346e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b8:	f7fd ff1e 	bl	80011f8 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d302      	bcc.n	80033ce <UART_WaitOnFlagUntilTimeout+0x30>
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d11b      	bne.n	8003406 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033dc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0201 	bic.w	r2, r2, #1
 80033ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2220      	movs	r2, #32
 80033f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e043      	b.n	800348e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d02c      	beq.n	800346e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800341e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003422:	d124      	bne.n	800346e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800342c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800343c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0201 	bic.w	r2, r2, #1
 800344c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2220      	movs	r2, #32
 800345e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e00f      	b.n	800348e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4013      	ands	r3, r2
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	429a      	cmp	r2, r3
 800347c:	bf0c      	ite	eq
 800347e:	2301      	moveq	r3, #1
 8003480:	2300      	movne	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	429a      	cmp	r2, r3
 800348a:	d091      	beq.n	80033b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <__errno>:
 8003498:	4b01      	ldr	r3, [pc, #4]	; (80034a0 <__errno+0x8>)
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	2000000c 	.word	0x2000000c

080034a4 <__libc_init_array>:
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	4d0d      	ldr	r5, [pc, #52]	; (80034dc <__libc_init_array+0x38>)
 80034a8:	4c0d      	ldr	r4, [pc, #52]	; (80034e0 <__libc_init_array+0x3c>)
 80034aa:	1b64      	subs	r4, r4, r5
 80034ac:	10a4      	asrs	r4, r4, #2
 80034ae:	2600      	movs	r6, #0
 80034b0:	42a6      	cmp	r6, r4
 80034b2:	d109      	bne.n	80034c8 <__libc_init_array+0x24>
 80034b4:	4d0b      	ldr	r5, [pc, #44]	; (80034e4 <__libc_init_array+0x40>)
 80034b6:	4c0c      	ldr	r4, [pc, #48]	; (80034e8 <__libc_init_array+0x44>)
 80034b8:	f000 ff84 	bl	80043c4 <_init>
 80034bc:	1b64      	subs	r4, r4, r5
 80034be:	10a4      	asrs	r4, r4, #2
 80034c0:	2600      	movs	r6, #0
 80034c2:	42a6      	cmp	r6, r4
 80034c4:	d105      	bne.n	80034d2 <__libc_init_array+0x2e>
 80034c6:	bd70      	pop	{r4, r5, r6, pc}
 80034c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034cc:	4798      	blx	r3
 80034ce:	3601      	adds	r6, #1
 80034d0:	e7ee      	b.n	80034b0 <__libc_init_array+0xc>
 80034d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034d6:	4798      	blx	r3
 80034d8:	3601      	adds	r6, #1
 80034da:	e7f2      	b.n	80034c2 <__libc_init_array+0x1e>
 80034dc:	080046ac 	.word	0x080046ac
 80034e0:	080046ac 	.word	0x080046ac
 80034e4:	080046ac 	.word	0x080046ac
 80034e8:	080046b0 	.word	0x080046b0

080034ec <memcpy>:
 80034ec:	440a      	add	r2, r1
 80034ee:	4291      	cmp	r1, r2
 80034f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80034f4:	d100      	bne.n	80034f8 <memcpy+0xc>
 80034f6:	4770      	bx	lr
 80034f8:	b510      	push	{r4, lr}
 80034fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003502:	4291      	cmp	r1, r2
 8003504:	d1f9      	bne.n	80034fa <memcpy+0xe>
 8003506:	bd10      	pop	{r4, pc}

08003508 <memset>:
 8003508:	4402      	add	r2, r0
 800350a:	4603      	mov	r3, r0
 800350c:	4293      	cmp	r3, r2
 800350e:	d100      	bne.n	8003512 <memset+0xa>
 8003510:	4770      	bx	lr
 8003512:	f803 1b01 	strb.w	r1, [r3], #1
 8003516:	e7f9      	b.n	800350c <memset+0x4>

08003518 <iprintf>:
 8003518:	b40f      	push	{r0, r1, r2, r3}
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <iprintf+0x2c>)
 800351c:	b513      	push	{r0, r1, r4, lr}
 800351e:	681c      	ldr	r4, [r3, #0]
 8003520:	b124      	cbz	r4, 800352c <iprintf+0x14>
 8003522:	69a3      	ldr	r3, [r4, #24]
 8003524:	b913      	cbnz	r3, 800352c <iprintf+0x14>
 8003526:	4620      	mov	r0, r4
 8003528:	f000 f866 	bl	80035f8 <__sinit>
 800352c:	ab05      	add	r3, sp, #20
 800352e:	9a04      	ldr	r2, [sp, #16]
 8003530:	68a1      	ldr	r1, [r4, #8]
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	4620      	mov	r0, r4
 8003536:	f000 f983 	bl	8003840 <_vfiprintf_r>
 800353a:	b002      	add	sp, #8
 800353c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003540:	b004      	add	sp, #16
 8003542:	4770      	bx	lr
 8003544:	2000000c 	.word	0x2000000c

08003548 <std>:
 8003548:	2300      	movs	r3, #0
 800354a:	b510      	push	{r4, lr}
 800354c:	4604      	mov	r4, r0
 800354e:	e9c0 3300 	strd	r3, r3, [r0]
 8003552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003556:	6083      	str	r3, [r0, #8]
 8003558:	8181      	strh	r1, [r0, #12]
 800355a:	6643      	str	r3, [r0, #100]	; 0x64
 800355c:	81c2      	strh	r2, [r0, #14]
 800355e:	6183      	str	r3, [r0, #24]
 8003560:	4619      	mov	r1, r3
 8003562:	2208      	movs	r2, #8
 8003564:	305c      	adds	r0, #92	; 0x5c
 8003566:	f7ff ffcf 	bl	8003508 <memset>
 800356a:	4b05      	ldr	r3, [pc, #20]	; (8003580 <std+0x38>)
 800356c:	6263      	str	r3, [r4, #36]	; 0x24
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <std+0x3c>)
 8003570:	62a3      	str	r3, [r4, #40]	; 0x28
 8003572:	4b05      	ldr	r3, [pc, #20]	; (8003588 <std+0x40>)
 8003574:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003576:	4b05      	ldr	r3, [pc, #20]	; (800358c <std+0x44>)
 8003578:	6224      	str	r4, [r4, #32]
 800357a:	6323      	str	r3, [r4, #48]	; 0x30
 800357c:	bd10      	pop	{r4, pc}
 800357e:	bf00      	nop
 8003580:	08003de9 	.word	0x08003de9
 8003584:	08003e0b 	.word	0x08003e0b
 8003588:	08003e43 	.word	0x08003e43
 800358c:	08003e67 	.word	0x08003e67

08003590 <_cleanup_r>:
 8003590:	4901      	ldr	r1, [pc, #4]	; (8003598 <_cleanup_r+0x8>)
 8003592:	f000 b8af 	b.w	80036f4 <_fwalk_reent>
 8003596:	bf00      	nop
 8003598:	08004141 	.word	0x08004141

0800359c <__sfmoreglue>:
 800359c:	b570      	push	{r4, r5, r6, lr}
 800359e:	1e4a      	subs	r2, r1, #1
 80035a0:	2568      	movs	r5, #104	; 0x68
 80035a2:	4355      	muls	r5, r2
 80035a4:	460e      	mov	r6, r1
 80035a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80035aa:	f000 f8c5 	bl	8003738 <_malloc_r>
 80035ae:	4604      	mov	r4, r0
 80035b0:	b140      	cbz	r0, 80035c4 <__sfmoreglue+0x28>
 80035b2:	2100      	movs	r1, #0
 80035b4:	e9c0 1600 	strd	r1, r6, [r0]
 80035b8:	300c      	adds	r0, #12
 80035ba:	60a0      	str	r0, [r4, #8]
 80035bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80035c0:	f7ff ffa2 	bl	8003508 <memset>
 80035c4:	4620      	mov	r0, r4
 80035c6:	bd70      	pop	{r4, r5, r6, pc}

080035c8 <__sfp_lock_acquire>:
 80035c8:	4801      	ldr	r0, [pc, #4]	; (80035d0 <__sfp_lock_acquire+0x8>)
 80035ca:	f000 b8b3 	b.w	8003734 <__retarget_lock_acquire_recursive>
 80035ce:	bf00      	nop
 80035d0:	20000128 	.word	0x20000128

080035d4 <__sfp_lock_release>:
 80035d4:	4801      	ldr	r0, [pc, #4]	; (80035dc <__sfp_lock_release+0x8>)
 80035d6:	f000 b8ae 	b.w	8003736 <__retarget_lock_release_recursive>
 80035da:	bf00      	nop
 80035dc:	20000128 	.word	0x20000128

080035e0 <__sinit_lock_acquire>:
 80035e0:	4801      	ldr	r0, [pc, #4]	; (80035e8 <__sinit_lock_acquire+0x8>)
 80035e2:	f000 b8a7 	b.w	8003734 <__retarget_lock_acquire_recursive>
 80035e6:	bf00      	nop
 80035e8:	20000123 	.word	0x20000123

080035ec <__sinit_lock_release>:
 80035ec:	4801      	ldr	r0, [pc, #4]	; (80035f4 <__sinit_lock_release+0x8>)
 80035ee:	f000 b8a2 	b.w	8003736 <__retarget_lock_release_recursive>
 80035f2:	bf00      	nop
 80035f4:	20000123 	.word	0x20000123

080035f8 <__sinit>:
 80035f8:	b510      	push	{r4, lr}
 80035fa:	4604      	mov	r4, r0
 80035fc:	f7ff fff0 	bl	80035e0 <__sinit_lock_acquire>
 8003600:	69a3      	ldr	r3, [r4, #24]
 8003602:	b11b      	cbz	r3, 800360c <__sinit+0x14>
 8003604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003608:	f7ff bff0 	b.w	80035ec <__sinit_lock_release>
 800360c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003610:	6523      	str	r3, [r4, #80]	; 0x50
 8003612:	4b13      	ldr	r3, [pc, #76]	; (8003660 <__sinit+0x68>)
 8003614:	4a13      	ldr	r2, [pc, #76]	; (8003664 <__sinit+0x6c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	62a2      	str	r2, [r4, #40]	; 0x28
 800361a:	42a3      	cmp	r3, r4
 800361c:	bf04      	itt	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	61a3      	streq	r3, [r4, #24]
 8003622:	4620      	mov	r0, r4
 8003624:	f000 f820 	bl	8003668 <__sfp>
 8003628:	6060      	str	r0, [r4, #4]
 800362a:	4620      	mov	r0, r4
 800362c:	f000 f81c 	bl	8003668 <__sfp>
 8003630:	60a0      	str	r0, [r4, #8]
 8003632:	4620      	mov	r0, r4
 8003634:	f000 f818 	bl	8003668 <__sfp>
 8003638:	2200      	movs	r2, #0
 800363a:	60e0      	str	r0, [r4, #12]
 800363c:	2104      	movs	r1, #4
 800363e:	6860      	ldr	r0, [r4, #4]
 8003640:	f7ff ff82 	bl	8003548 <std>
 8003644:	68a0      	ldr	r0, [r4, #8]
 8003646:	2201      	movs	r2, #1
 8003648:	2109      	movs	r1, #9
 800364a:	f7ff ff7d 	bl	8003548 <std>
 800364e:	68e0      	ldr	r0, [r4, #12]
 8003650:	2202      	movs	r2, #2
 8003652:	2112      	movs	r1, #18
 8003654:	f7ff ff78 	bl	8003548 <std>
 8003658:	2301      	movs	r3, #1
 800365a:	61a3      	str	r3, [r4, #24]
 800365c:	e7d2      	b.n	8003604 <__sinit+0xc>
 800365e:	bf00      	nop
 8003660:	0800460c 	.word	0x0800460c
 8003664:	08003591 	.word	0x08003591

08003668 <__sfp>:
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366a:	4607      	mov	r7, r0
 800366c:	f7ff ffac 	bl	80035c8 <__sfp_lock_acquire>
 8003670:	4b1e      	ldr	r3, [pc, #120]	; (80036ec <__sfp+0x84>)
 8003672:	681e      	ldr	r6, [r3, #0]
 8003674:	69b3      	ldr	r3, [r6, #24]
 8003676:	b913      	cbnz	r3, 800367e <__sfp+0x16>
 8003678:	4630      	mov	r0, r6
 800367a:	f7ff ffbd 	bl	80035f8 <__sinit>
 800367e:	3648      	adds	r6, #72	; 0x48
 8003680:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003684:	3b01      	subs	r3, #1
 8003686:	d503      	bpl.n	8003690 <__sfp+0x28>
 8003688:	6833      	ldr	r3, [r6, #0]
 800368a:	b30b      	cbz	r3, 80036d0 <__sfp+0x68>
 800368c:	6836      	ldr	r6, [r6, #0]
 800368e:	e7f7      	b.n	8003680 <__sfp+0x18>
 8003690:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003694:	b9d5      	cbnz	r5, 80036cc <__sfp+0x64>
 8003696:	4b16      	ldr	r3, [pc, #88]	; (80036f0 <__sfp+0x88>)
 8003698:	60e3      	str	r3, [r4, #12]
 800369a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800369e:	6665      	str	r5, [r4, #100]	; 0x64
 80036a0:	f000 f847 	bl	8003732 <__retarget_lock_init_recursive>
 80036a4:	f7ff ff96 	bl	80035d4 <__sfp_lock_release>
 80036a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80036ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80036b0:	6025      	str	r5, [r4, #0]
 80036b2:	61a5      	str	r5, [r4, #24]
 80036b4:	2208      	movs	r2, #8
 80036b6:	4629      	mov	r1, r5
 80036b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80036bc:	f7ff ff24 	bl	8003508 <memset>
 80036c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80036c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80036c8:	4620      	mov	r0, r4
 80036ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036cc:	3468      	adds	r4, #104	; 0x68
 80036ce:	e7d9      	b.n	8003684 <__sfp+0x1c>
 80036d0:	2104      	movs	r1, #4
 80036d2:	4638      	mov	r0, r7
 80036d4:	f7ff ff62 	bl	800359c <__sfmoreglue>
 80036d8:	4604      	mov	r4, r0
 80036da:	6030      	str	r0, [r6, #0]
 80036dc:	2800      	cmp	r0, #0
 80036de:	d1d5      	bne.n	800368c <__sfp+0x24>
 80036e0:	f7ff ff78 	bl	80035d4 <__sfp_lock_release>
 80036e4:	230c      	movs	r3, #12
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	e7ee      	b.n	80036c8 <__sfp+0x60>
 80036ea:	bf00      	nop
 80036ec:	0800460c 	.word	0x0800460c
 80036f0:	ffff0001 	.word	0xffff0001

080036f4 <_fwalk_reent>:
 80036f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036f8:	4606      	mov	r6, r0
 80036fa:	4688      	mov	r8, r1
 80036fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003700:	2700      	movs	r7, #0
 8003702:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003706:	f1b9 0901 	subs.w	r9, r9, #1
 800370a:	d505      	bpl.n	8003718 <_fwalk_reent+0x24>
 800370c:	6824      	ldr	r4, [r4, #0]
 800370e:	2c00      	cmp	r4, #0
 8003710:	d1f7      	bne.n	8003702 <_fwalk_reent+0xe>
 8003712:	4638      	mov	r0, r7
 8003714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003718:	89ab      	ldrh	r3, [r5, #12]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d907      	bls.n	800372e <_fwalk_reent+0x3a>
 800371e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003722:	3301      	adds	r3, #1
 8003724:	d003      	beq.n	800372e <_fwalk_reent+0x3a>
 8003726:	4629      	mov	r1, r5
 8003728:	4630      	mov	r0, r6
 800372a:	47c0      	blx	r8
 800372c:	4307      	orrs	r7, r0
 800372e:	3568      	adds	r5, #104	; 0x68
 8003730:	e7e9      	b.n	8003706 <_fwalk_reent+0x12>

08003732 <__retarget_lock_init_recursive>:
 8003732:	4770      	bx	lr

08003734 <__retarget_lock_acquire_recursive>:
 8003734:	4770      	bx	lr

08003736 <__retarget_lock_release_recursive>:
 8003736:	4770      	bx	lr

08003738 <_malloc_r>:
 8003738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373a:	1ccd      	adds	r5, r1, #3
 800373c:	f025 0503 	bic.w	r5, r5, #3
 8003740:	3508      	adds	r5, #8
 8003742:	2d0c      	cmp	r5, #12
 8003744:	bf38      	it	cc
 8003746:	250c      	movcc	r5, #12
 8003748:	2d00      	cmp	r5, #0
 800374a:	4606      	mov	r6, r0
 800374c:	db01      	blt.n	8003752 <_malloc_r+0x1a>
 800374e:	42a9      	cmp	r1, r5
 8003750:	d903      	bls.n	800375a <_malloc_r+0x22>
 8003752:	230c      	movs	r3, #12
 8003754:	6033      	str	r3, [r6, #0]
 8003756:	2000      	movs	r0, #0
 8003758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800375a:	f000 fda3 	bl	80042a4 <__malloc_lock>
 800375e:	4921      	ldr	r1, [pc, #132]	; (80037e4 <_malloc_r+0xac>)
 8003760:	680a      	ldr	r2, [r1, #0]
 8003762:	4614      	mov	r4, r2
 8003764:	b99c      	cbnz	r4, 800378e <_malloc_r+0x56>
 8003766:	4f20      	ldr	r7, [pc, #128]	; (80037e8 <_malloc_r+0xb0>)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	b923      	cbnz	r3, 8003776 <_malloc_r+0x3e>
 800376c:	4621      	mov	r1, r4
 800376e:	4630      	mov	r0, r6
 8003770:	f000 fb2a 	bl	8003dc8 <_sbrk_r>
 8003774:	6038      	str	r0, [r7, #0]
 8003776:	4629      	mov	r1, r5
 8003778:	4630      	mov	r0, r6
 800377a:	f000 fb25 	bl	8003dc8 <_sbrk_r>
 800377e:	1c43      	adds	r3, r0, #1
 8003780:	d123      	bne.n	80037ca <_malloc_r+0x92>
 8003782:	230c      	movs	r3, #12
 8003784:	6033      	str	r3, [r6, #0]
 8003786:	4630      	mov	r0, r6
 8003788:	f000 fd92 	bl	80042b0 <__malloc_unlock>
 800378c:	e7e3      	b.n	8003756 <_malloc_r+0x1e>
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	1b5b      	subs	r3, r3, r5
 8003792:	d417      	bmi.n	80037c4 <_malloc_r+0x8c>
 8003794:	2b0b      	cmp	r3, #11
 8003796:	d903      	bls.n	80037a0 <_malloc_r+0x68>
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	441c      	add	r4, r3
 800379c:	6025      	str	r5, [r4, #0]
 800379e:	e004      	b.n	80037aa <_malloc_r+0x72>
 80037a0:	6863      	ldr	r3, [r4, #4]
 80037a2:	42a2      	cmp	r2, r4
 80037a4:	bf0c      	ite	eq
 80037a6:	600b      	streq	r3, [r1, #0]
 80037a8:	6053      	strne	r3, [r2, #4]
 80037aa:	4630      	mov	r0, r6
 80037ac:	f000 fd80 	bl	80042b0 <__malloc_unlock>
 80037b0:	f104 000b 	add.w	r0, r4, #11
 80037b4:	1d23      	adds	r3, r4, #4
 80037b6:	f020 0007 	bic.w	r0, r0, #7
 80037ba:	1ac2      	subs	r2, r0, r3
 80037bc:	d0cc      	beq.n	8003758 <_malloc_r+0x20>
 80037be:	1a1b      	subs	r3, r3, r0
 80037c0:	50a3      	str	r3, [r4, r2]
 80037c2:	e7c9      	b.n	8003758 <_malloc_r+0x20>
 80037c4:	4622      	mov	r2, r4
 80037c6:	6864      	ldr	r4, [r4, #4]
 80037c8:	e7cc      	b.n	8003764 <_malloc_r+0x2c>
 80037ca:	1cc4      	adds	r4, r0, #3
 80037cc:	f024 0403 	bic.w	r4, r4, #3
 80037d0:	42a0      	cmp	r0, r4
 80037d2:	d0e3      	beq.n	800379c <_malloc_r+0x64>
 80037d4:	1a21      	subs	r1, r4, r0
 80037d6:	4630      	mov	r0, r6
 80037d8:	f000 faf6 	bl	8003dc8 <_sbrk_r>
 80037dc:	3001      	adds	r0, #1
 80037de:	d1dd      	bne.n	800379c <_malloc_r+0x64>
 80037e0:	e7cf      	b.n	8003782 <_malloc_r+0x4a>
 80037e2:	bf00      	nop
 80037e4:	20000090 	.word	0x20000090
 80037e8:	20000094 	.word	0x20000094

080037ec <__sfputc_r>:
 80037ec:	6893      	ldr	r3, [r2, #8]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	b410      	push	{r4}
 80037f4:	6093      	str	r3, [r2, #8]
 80037f6:	da08      	bge.n	800380a <__sfputc_r+0x1e>
 80037f8:	6994      	ldr	r4, [r2, #24]
 80037fa:	42a3      	cmp	r3, r4
 80037fc:	db01      	blt.n	8003802 <__sfputc_r+0x16>
 80037fe:	290a      	cmp	r1, #10
 8003800:	d103      	bne.n	800380a <__sfputc_r+0x1e>
 8003802:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003806:	f000 bb33 	b.w	8003e70 <__swbuf_r>
 800380a:	6813      	ldr	r3, [r2, #0]
 800380c:	1c58      	adds	r0, r3, #1
 800380e:	6010      	str	r0, [r2, #0]
 8003810:	7019      	strb	r1, [r3, #0]
 8003812:	4608      	mov	r0, r1
 8003814:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003818:	4770      	bx	lr

0800381a <__sfputs_r>:
 800381a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381c:	4606      	mov	r6, r0
 800381e:	460f      	mov	r7, r1
 8003820:	4614      	mov	r4, r2
 8003822:	18d5      	adds	r5, r2, r3
 8003824:	42ac      	cmp	r4, r5
 8003826:	d101      	bne.n	800382c <__sfputs_r+0x12>
 8003828:	2000      	movs	r0, #0
 800382a:	e007      	b.n	800383c <__sfputs_r+0x22>
 800382c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003830:	463a      	mov	r2, r7
 8003832:	4630      	mov	r0, r6
 8003834:	f7ff ffda 	bl	80037ec <__sfputc_r>
 8003838:	1c43      	adds	r3, r0, #1
 800383a:	d1f3      	bne.n	8003824 <__sfputs_r+0xa>
 800383c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003840 <_vfiprintf_r>:
 8003840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003844:	460d      	mov	r5, r1
 8003846:	b09d      	sub	sp, #116	; 0x74
 8003848:	4614      	mov	r4, r2
 800384a:	4698      	mov	r8, r3
 800384c:	4606      	mov	r6, r0
 800384e:	b118      	cbz	r0, 8003858 <_vfiprintf_r+0x18>
 8003850:	6983      	ldr	r3, [r0, #24]
 8003852:	b90b      	cbnz	r3, 8003858 <_vfiprintf_r+0x18>
 8003854:	f7ff fed0 	bl	80035f8 <__sinit>
 8003858:	4b89      	ldr	r3, [pc, #548]	; (8003a80 <_vfiprintf_r+0x240>)
 800385a:	429d      	cmp	r5, r3
 800385c:	d11b      	bne.n	8003896 <_vfiprintf_r+0x56>
 800385e:	6875      	ldr	r5, [r6, #4]
 8003860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003862:	07d9      	lsls	r1, r3, #31
 8003864:	d405      	bmi.n	8003872 <_vfiprintf_r+0x32>
 8003866:	89ab      	ldrh	r3, [r5, #12]
 8003868:	059a      	lsls	r2, r3, #22
 800386a:	d402      	bmi.n	8003872 <_vfiprintf_r+0x32>
 800386c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800386e:	f7ff ff61 	bl	8003734 <__retarget_lock_acquire_recursive>
 8003872:	89ab      	ldrh	r3, [r5, #12]
 8003874:	071b      	lsls	r3, r3, #28
 8003876:	d501      	bpl.n	800387c <_vfiprintf_r+0x3c>
 8003878:	692b      	ldr	r3, [r5, #16]
 800387a:	b9eb      	cbnz	r3, 80038b8 <_vfiprintf_r+0x78>
 800387c:	4629      	mov	r1, r5
 800387e:	4630      	mov	r0, r6
 8003880:	f000 fb5a 	bl	8003f38 <__swsetup_r>
 8003884:	b1c0      	cbz	r0, 80038b8 <_vfiprintf_r+0x78>
 8003886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003888:	07dc      	lsls	r4, r3, #31
 800388a:	d50e      	bpl.n	80038aa <_vfiprintf_r+0x6a>
 800388c:	f04f 30ff 	mov.w	r0, #4294967295
 8003890:	b01d      	add	sp, #116	; 0x74
 8003892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003896:	4b7b      	ldr	r3, [pc, #492]	; (8003a84 <_vfiprintf_r+0x244>)
 8003898:	429d      	cmp	r5, r3
 800389a:	d101      	bne.n	80038a0 <_vfiprintf_r+0x60>
 800389c:	68b5      	ldr	r5, [r6, #8]
 800389e:	e7df      	b.n	8003860 <_vfiprintf_r+0x20>
 80038a0:	4b79      	ldr	r3, [pc, #484]	; (8003a88 <_vfiprintf_r+0x248>)
 80038a2:	429d      	cmp	r5, r3
 80038a4:	bf08      	it	eq
 80038a6:	68f5      	ldreq	r5, [r6, #12]
 80038a8:	e7da      	b.n	8003860 <_vfiprintf_r+0x20>
 80038aa:	89ab      	ldrh	r3, [r5, #12]
 80038ac:	0598      	lsls	r0, r3, #22
 80038ae:	d4ed      	bmi.n	800388c <_vfiprintf_r+0x4c>
 80038b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038b2:	f7ff ff40 	bl	8003736 <__retarget_lock_release_recursive>
 80038b6:	e7e9      	b.n	800388c <_vfiprintf_r+0x4c>
 80038b8:	2300      	movs	r3, #0
 80038ba:	9309      	str	r3, [sp, #36]	; 0x24
 80038bc:	2320      	movs	r3, #32
 80038be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80038c6:	2330      	movs	r3, #48	; 0x30
 80038c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003a8c <_vfiprintf_r+0x24c>
 80038cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038d0:	f04f 0901 	mov.w	r9, #1
 80038d4:	4623      	mov	r3, r4
 80038d6:	469a      	mov	sl, r3
 80038d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038dc:	b10a      	cbz	r2, 80038e2 <_vfiprintf_r+0xa2>
 80038de:	2a25      	cmp	r2, #37	; 0x25
 80038e0:	d1f9      	bne.n	80038d6 <_vfiprintf_r+0x96>
 80038e2:	ebba 0b04 	subs.w	fp, sl, r4
 80038e6:	d00b      	beq.n	8003900 <_vfiprintf_r+0xc0>
 80038e8:	465b      	mov	r3, fp
 80038ea:	4622      	mov	r2, r4
 80038ec:	4629      	mov	r1, r5
 80038ee:	4630      	mov	r0, r6
 80038f0:	f7ff ff93 	bl	800381a <__sfputs_r>
 80038f4:	3001      	adds	r0, #1
 80038f6:	f000 80aa 	beq.w	8003a4e <_vfiprintf_r+0x20e>
 80038fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038fc:	445a      	add	r2, fp
 80038fe:	9209      	str	r2, [sp, #36]	; 0x24
 8003900:	f89a 3000 	ldrb.w	r3, [sl]
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80a2 	beq.w	8003a4e <_vfiprintf_r+0x20e>
 800390a:	2300      	movs	r3, #0
 800390c:	f04f 32ff 	mov.w	r2, #4294967295
 8003910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003914:	f10a 0a01 	add.w	sl, sl, #1
 8003918:	9304      	str	r3, [sp, #16]
 800391a:	9307      	str	r3, [sp, #28]
 800391c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003920:	931a      	str	r3, [sp, #104]	; 0x68
 8003922:	4654      	mov	r4, sl
 8003924:	2205      	movs	r2, #5
 8003926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800392a:	4858      	ldr	r0, [pc, #352]	; (8003a8c <_vfiprintf_r+0x24c>)
 800392c:	f7fc fc58 	bl	80001e0 <memchr>
 8003930:	9a04      	ldr	r2, [sp, #16]
 8003932:	b9d8      	cbnz	r0, 800396c <_vfiprintf_r+0x12c>
 8003934:	06d1      	lsls	r1, r2, #27
 8003936:	bf44      	itt	mi
 8003938:	2320      	movmi	r3, #32
 800393a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800393e:	0713      	lsls	r3, r2, #28
 8003940:	bf44      	itt	mi
 8003942:	232b      	movmi	r3, #43	; 0x2b
 8003944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003948:	f89a 3000 	ldrb.w	r3, [sl]
 800394c:	2b2a      	cmp	r3, #42	; 0x2a
 800394e:	d015      	beq.n	800397c <_vfiprintf_r+0x13c>
 8003950:	9a07      	ldr	r2, [sp, #28]
 8003952:	4654      	mov	r4, sl
 8003954:	2000      	movs	r0, #0
 8003956:	f04f 0c0a 	mov.w	ip, #10
 800395a:	4621      	mov	r1, r4
 800395c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003960:	3b30      	subs	r3, #48	; 0x30
 8003962:	2b09      	cmp	r3, #9
 8003964:	d94e      	bls.n	8003a04 <_vfiprintf_r+0x1c4>
 8003966:	b1b0      	cbz	r0, 8003996 <_vfiprintf_r+0x156>
 8003968:	9207      	str	r2, [sp, #28]
 800396a:	e014      	b.n	8003996 <_vfiprintf_r+0x156>
 800396c:	eba0 0308 	sub.w	r3, r0, r8
 8003970:	fa09 f303 	lsl.w	r3, r9, r3
 8003974:	4313      	orrs	r3, r2
 8003976:	9304      	str	r3, [sp, #16]
 8003978:	46a2      	mov	sl, r4
 800397a:	e7d2      	b.n	8003922 <_vfiprintf_r+0xe2>
 800397c:	9b03      	ldr	r3, [sp, #12]
 800397e:	1d19      	adds	r1, r3, #4
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	9103      	str	r1, [sp, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	bfbb      	ittet	lt
 8003988:	425b      	neglt	r3, r3
 800398a:	f042 0202 	orrlt.w	r2, r2, #2
 800398e:	9307      	strge	r3, [sp, #28]
 8003990:	9307      	strlt	r3, [sp, #28]
 8003992:	bfb8      	it	lt
 8003994:	9204      	strlt	r2, [sp, #16]
 8003996:	7823      	ldrb	r3, [r4, #0]
 8003998:	2b2e      	cmp	r3, #46	; 0x2e
 800399a:	d10c      	bne.n	80039b6 <_vfiprintf_r+0x176>
 800399c:	7863      	ldrb	r3, [r4, #1]
 800399e:	2b2a      	cmp	r3, #42	; 0x2a
 80039a0:	d135      	bne.n	8003a0e <_vfiprintf_r+0x1ce>
 80039a2:	9b03      	ldr	r3, [sp, #12]
 80039a4:	1d1a      	adds	r2, r3, #4
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	9203      	str	r2, [sp, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	bfb8      	it	lt
 80039ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80039b2:	3402      	adds	r4, #2
 80039b4:	9305      	str	r3, [sp, #20]
 80039b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003a9c <_vfiprintf_r+0x25c>
 80039ba:	7821      	ldrb	r1, [r4, #0]
 80039bc:	2203      	movs	r2, #3
 80039be:	4650      	mov	r0, sl
 80039c0:	f7fc fc0e 	bl	80001e0 <memchr>
 80039c4:	b140      	cbz	r0, 80039d8 <_vfiprintf_r+0x198>
 80039c6:	2340      	movs	r3, #64	; 0x40
 80039c8:	eba0 000a 	sub.w	r0, r0, sl
 80039cc:	fa03 f000 	lsl.w	r0, r3, r0
 80039d0:	9b04      	ldr	r3, [sp, #16]
 80039d2:	4303      	orrs	r3, r0
 80039d4:	3401      	adds	r4, #1
 80039d6:	9304      	str	r3, [sp, #16]
 80039d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039dc:	482c      	ldr	r0, [pc, #176]	; (8003a90 <_vfiprintf_r+0x250>)
 80039de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039e2:	2206      	movs	r2, #6
 80039e4:	f7fc fbfc 	bl	80001e0 <memchr>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	d03f      	beq.n	8003a6c <_vfiprintf_r+0x22c>
 80039ec:	4b29      	ldr	r3, [pc, #164]	; (8003a94 <_vfiprintf_r+0x254>)
 80039ee:	bb1b      	cbnz	r3, 8003a38 <_vfiprintf_r+0x1f8>
 80039f0:	9b03      	ldr	r3, [sp, #12]
 80039f2:	3307      	adds	r3, #7
 80039f4:	f023 0307 	bic.w	r3, r3, #7
 80039f8:	3308      	adds	r3, #8
 80039fa:	9303      	str	r3, [sp, #12]
 80039fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039fe:	443b      	add	r3, r7
 8003a00:	9309      	str	r3, [sp, #36]	; 0x24
 8003a02:	e767      	b.n	80038d4 <_vfiprintf_r+0x94>
 8003a04:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a08:	460c      	mov	r4, r1
 8003a0a:	2001      	movs	r0, #1
 8003a0c:	e7a5      	b.n	800395a <_vfiprintf_r+0x11a>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	3401      	adds	r4, #1
 8003a12:	9305      	str	r3, [sp, #20]
 8003a14:	4619      	mov	r1, r3
 8003a16:	f04f 0c0a 	mov.w	ip, #10
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a20:	3a30      	subs	r2, #48	; 0x30
 8003a22:	2a09      	cmp	r2, #9
 8003a24:	d903      	bls.n	8003a2e <_vfiprintf_r+0x1ee>
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0c5      	beq.n	80039b6 <_vfiprintf_r+0x176>
 8003a2a:	9105      	str	r1, [sp, #20]
 8003a2c:	e7c3      	b.n	80039b6 <_vfiprintf_r+0x176>
 8003a2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a32:	4604      	mov	r4, r0
 8003a34:	2301      	movs	r3, #1
 8003a36:	e7f0      	b.n	8003a1a <_vfiprintf_r+0x1da>
 8003a38:	ab03      	add	r3, sp, #12
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	462a      	mov	r2, r5
 8003a3e:	4b16      	ldr	r3, [pc, #88]	; (8003a98 <_vfiprintf_r+0x258>)
 8003a40:	a904      	add	r1, sp, #16
 8003a42:	4630      	mov	r0, r6
 8003a44:	f3af 8000 	nop.w
 8003a48:	4607      	mov	r7, r0
 8003a4a:	1c78      	adds	r0, r7, #1
 8003a4c:	d1d6      	bne.n	80039fc <_vfiprintf_r+0x1bc>
 8003a4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a50:	07d9      	lsls	r1, r3, #31
 8003a52:	d405      	bmi.n	8003a60 <_vfiprintf_r+0x220>
 8003a54:	89ab      	ldrh	r3, [r5, #12]
 8003a56:	059a      	lsls	r2, r3, #22
 8003a58:	d402      	bmi.n	8003a60 <_vfiprintf_r+0x220>
 8003a5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a5c:	f7ff fe6b 	bl	8003736 <__retarget_lock_release_recursive>
 8003a60:	89ab      	ldrh	r3, [r5, #12]
 8003a62:	065b      	lsls	r3, r3, #25
 8003a64:	f53f af12 	bmi.w	800388c <_vfiprintf_r+0x4c>
 8003a68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a6a:	e711      	b.n	8003890 <_vfiprintf_r+0x50>
 8003a6c:	ab03      	add	r3, sp, #12
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	462a      	mov	r2, r5
 8003a72:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <_vfiprintf_r+0x258>)
 8003a74:	a904      	add	r1, sp, #16
 8003a76:	4630      	mov	r0, r6
 8003a78:	f000 f880 	bl	8003b7c <_printf_i>
 8003a7c:	e7e4      	b.n	8003a48 <_vfiprintf_r+0x208>
 8003a7e:	bf00      	nop
 8003a80:	08004630 	.word	0x08004630
 8003a84:	08004650 	.word	0x08004650
 8003a88:	08004610 	.word	0x08004610
 8003a8c:	08004670 	.word	0x08004670
 8003a90:	0800467a 	.word	0x0800467a
 8003a94:	00000000 	.word	0x00000000
 8003a98:	0800381b 	.word	0x0800381b
 8003a9c:	08004676 	.word	0x08004676

08003aa0 <_printf_common>:
 8003aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa4:	4616      	mov	r6, r2
 8003aa6:	4699      	mov	r9, r3
 8003aa8:	688a      	ldr	r2, [r1, #8]
 8003aaa:	690b      	ldr	r3, [r1, #16]
 8003aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	bfb8      	it	lt
 8003ab4:	4613      	movlt	r3, r2
 8003ab6:	6033      	str	r3, [r6, #0]
 8003ab8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003abc:	4607      	mov	r7, r0
 8003abe:	460c      	mov	r4, r1
 8003ac0:	b10a      	cbz	r2, 8003ac6 <_printf_common+0x26>
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	6033      	str	r3, [r6, #0]
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	0699      	lsls	r1, r3, #26
 8003aca:	bf42      	ittt	mi
 8003acc:	6833      	ldrmi	r3, [r6, #0]
 8003ace:	3302      	addmi	r3, #2
 8003ad0:	6033      	strmi	r3, [r6, #0]
 8003ad2:	6825      	ldr	r5, [r4, #0]
 8003ad4:	f015 0506 	ands.w	r5, r5, #6
 8003ad8:	d106      	bne.n	8003ae8 <_printf_common+0x48>
 8003ada:	f104 0a19 	add.w	sl, r4, #25
 8003ade:	68e3      	ldr	r3, [r4, #12]
 8003ae0:	6832      	ldr	r2, [r6, #0]
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	42ab      	cmp	r3, r5
 8003ae6:	dc26      	bgt.n	8003b36 <_printf_common+0x96>
 8003ae8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003aec:	1e13      	subs	r3, r2, #0
 8003aee:	6822      	ldr	r2, [r4, #0]
 8003af0:	bf18      	it	ne
 8003af2:	2301      	movne	r3, #1
 8003af4:	0692      	lsls	r2, r2, #26
 8003af6:	d42b      	bmi.n	8003b50 <_printf_common+0xb0>
 8003af8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003afc:	4649      	mov	r1, r9
 8003afe:	4638      	mov	r0, r7
 8003b00:	47c0      	blx	r8
 8003b02:	3001      	adds	r0, #1
 8003b04:	d01e      	beq.n	8003b44 <_printf_common+0xa4>
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	68e5      	ldr	r5, [r4, #12]
 8003b0a:	6832      	ldr	r2, [r6, #0]
 8003b0c:	f003 0306 	and.w	r3, r3, #6
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	bf08      	it	eq
 8003b14:	1aad      	subeq	r5, r5, r2
 8003b16:	68a3      	ldr	r3, [r4, #8]
 8003b18:	6922      	ldr	r2, [r4, #16]
 8003b1a:	bf0c      	ite	eq
 8003b1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b20:	2500      	movne	r5, #0
 8003b22:	4293      	cmp	r3, r2
 8003b24:	bfc4      	itt	gt
 8003b26:	1a9b      	subgt	r3, r3, r2
 8003b28:	18ed      	addgt	r5, r5, r3
 8003b2a:	2600      	movs	r6, #0
 8003b2c:	341a      	adds	r4, #26
 8003b2e:	42b5      	cmp	r5, r6
 8003b30:	d11a      	bne.n	8003b68 <_printf_common+0xc8>
 8003b32:	2000      	movs	r0, #0
 8003b34:	e008      	b.n	8003b48 <_printf_common+0xa8>
 8003b36:	2301      	movs	r3, #1
 8003b38:	4652      	mov	r2, sl
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	4638      	mov	r0, r7
 8003b3e:	47c0      	blx	r8
 8003b40:	3001      	adds	r0, #1
 8003b42:	d103      	bne.n	8003b4c <_printf_common+0xac>
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b4c:	3501      	adds	r5, #1
 8003b4e:	e7c6      	b.n	8003ade <_printf_common+0x3e>
 8003b50:	18e1      	adds	r1, r4, r3
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	2030      	movs	r0, #48	; 0x30
 8003b56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b5a:	4422      	add	r2, r4
 8003b5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b64:	3302      	adds	r3, #2
 8003b66:	e7c7      	b.n	8003af8 <_printf_common+0x58>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	4622      	mov	r2, r4
 8003b6c:	4649      	mov	r1, r9
 8003b6e:	4638      	mov	r0, r7
 8003b70:	47c0      	blx	r8
 8003b72:	3001      	adds	r0, #1
 8003b74:	d0e6      	beq.n	8003b44 <_printf_common+0xa4>
 8003b76:	3601      	adds	r6, #1
 8003b78:	e7d9      	b.n	8003b2e <_printf_common+0x8e>
	...

08003b7c <_printf_i>:
 8003b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b80:	460c      	mov	r4, r1
 8003b82:	4691      	mov	r9, r2
 8003b84:	7e27      	ldrb	r7, [r4, #24]
 8003b86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b88:	2f78      	cmp	r7, #120	; 0x78
 8003b8a:	4680      	mov	r8, r0
 8003b8c:	469a      	mov	sl, r3
 8003b8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b92:	d807      	bhi.n	8003ba4 <_printf_i+0x28>
 8003b94:	2f62      	cmp	r7, #98	; 0x62
 8003b96:	d80a      	bhi.n	8003bae <_printf_i+0x32>
 8003b98:	2f00      	cmp	r7, #0
 8003b9a:	f000 80d8 	beq.w	8003d4e <_printf_i+0x1d2>
 8003b9e:	2f58      	cmp	r7, #88	; 0x58
 8003ba0:	f000 80a3 	beq.w	8003cea <_printf_i+0x16e>
 8003ba4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ba8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bac:	e03a      	b.n	8003c24 <_printf_i+0xa8>
 8003bae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bb2:	2b15      	cmp	r3, #21
 8003bb4:	d8f6      	bhi.n	8003ba4 <_printf_i+0x28>
 8003bb6:	a001      	add	r0, pc, #4	; (adr r0, 8003bbc <_printf_i+0x40>)
 8003bb8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003bbc:	08003c15 	.word	0x08003c15
 8003bc0:	08003c29 	.word	0x08003c29
 8003bc4:	08003ba5 	.word	0x08003ba5
 8003bc8:	08003ba5 	.word	0x08003ba5
 8003bcc:	08003ba5 	.word	0x08003ba5
 8003bd0:	08003ba5 	.word	0x08003ba5
 8003bd4:	08003c29 	.word	0x08003c29
 8003bd8:	08003ba5 	.word	0x08003ba5
 8003bdc:	08003ba5 	.word	0x08003ba5
 8003be0:	08003ba5 	.word	0x08003ba5
 8003be4:	08003ba5 	.word	0x08003ba5
 8003be8:	08003d35 	.word	0x08003d35
 8003bec:	08003c59 	.word	0x08003c59
 8003bf0:	08003d17 	.word	0x08003d17
 8003bf4:	08003ba5 	.word	0x08003ba5
 8003bf8:	08003ba5 	.word	0x08003ba5
 8003bfc:	08003d57 	.word	0x08003d57
 8003c00:	08003ba5 	.word	0x08003ba5
 8003c04:	08003c59 	.word	0x08003c59
 8003c08:	08003ba5 	.word	0x08003ba5
 8003c0c:	08003ba5 	.word	0x08003ba5
 8003c10:	08003d1f 	.word	0x08003d1f
 8003c14:	680b      	ldr	r3, [r1, #0]
 8003c16:	1d1a      	adds	r2, r3, #4
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	600a      	str	r2, [r1, #0]
 8003c1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0a3      	b.n	8003d70 <_printf_i+0x1f4>
 8003c28:	6825      	ldr	r5, [r4, #0]
 8003c2a:	6808      	ldr	r0, [r1, #0]
 8003c2c:	062e      	lsls	r6, r5, #24
 8003c2e:	f100 0304 	add.w	r3, r0, #4
 8003c32:	d50a      	bpl.n	8003c4a <_printf_i+0xce>
 8003c34:	6805      	ldr	r5, [r0, #0]
 8003c36:	600b      	str	r3, [r1, #0]
 8003c38:	2d00      	cmp	r5, #0
 8003c3a:	da03      	bge.n	8003c44 <_printf_i+0xc8>
 8003c3c:	232d      	movs	r3, #45	; 0x2d
 8003c3e:	426d      	negs	r5, r5
 8003c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c44:	485e      	ldr	r0, [pc, #376]	; (8003dc0 <_printf_i+0x244>)
 8003c46:	230a      	movs	r3, #10
 8003c48:	e019      	b.n	8003c7e <_printf_i+0x102>
 8003c4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003c4e:	6805      	ldr	r5, [r0, #0]
 8003c50:	600b      	str	r3, [r1, #0]
 8003c52:	bf18      	it	ne
 8003c54:	b22d      	sxthne	r5, r5
 8003c56:	e7ef      	b.n	8003c38 <_printf_i+0xbc>
 8003c58:	680b      	ldr	r3, [r1, #0]
 8003c5a:	6825      	ldr	r5, [r4, #0]
 8003c5c:	1d18      	adds	r0, r3, #4
 8003c5e:	6008      	str	r0, [r1, #0]
 8003c60:	0628      	lsls	r0, r5, #24
 8003c62:	d501      	bpl.n	8003c68 <_printf_i+0xec>
 8003c64:	681d      	ldr	r5, [r3, #0]
 8003c66:	e002      	b.n	8003c6e <_printf_i+0xf2>
 8003c68:	0669      	lsls	r1, r5, #25
 8003c6a:	d5fb      	bpl.n	8003c64 <_printf_i+0xe8>
 8003c6c:	881d      	ldrh	r5, [r3, #0]
 8003c6e:	4854      	ldr	r0, [pc, #336]	; (8003dc0 <_printf_i+0x244>)
 8003c70:	2f6f      	cmp	r7, #111	; 0x6f
 8003c72:	bf0c      	ite	eq
 8003c74:	2308      	moveq	r3, #8
 8003c76:	230a      	movne	r3, #10
 8003c78:	2100      	movs	r1, #0
 8003c7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c7e:	6866      	ldr	r6, [r4, #4]
 8003c80:	60a6      	str	r6, [r4, #8]
 8003c82:	2e00      	cmp	r6, #0
 8003c84:	bfa2      	ittt	ge
 8003c86:	6821      	ldrge	r1, [r4, #0]
 8003c88:	f021 0104 	bicge.w	r1, r1, #4
 8003c8c:	6021      	strge	r1, [r4, #0]
 8003c8e:	b90d      	cbnz	r5, 8003c94 <_printf_i+0x118>
 8003c90:	2e00      	cmp	r6, #0
 8003c92:	d04d      	beq.n	8003d30 <_printf_i+0x1b4>
 8003c94:	4616      	mov	r6, r2
 8003c96:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c9a:	fb03 5711 	mls	r7, r3, r1, r5
 8003c9e:	5dc7      	ldrb	r7, [r0, r7]
 8003ca0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ca4:	462f      	mov	r7, r5
 8003ca6:	42bb      	cmp	r3, r7
 8003ca8:	460d      	mov	r5, r1
 8003caa:	d9f4      	bls.n	8003c96 <_printf_i+0x11a>
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d10b      	bne.n	8003cc8 <_printf_i+0x14c>
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	07df      	lsls	r7, r3, #31
 8003cb4:	d508      	bpl.n	8003cc8 <_printf_i+0x14c>
 8003cb6:	6923      	ldr	r3, [r4, #16]
 8003cb8:	6861      	ldr	r1, [r4, #4]
 8003cba:	4299      	cmp	r1, r3
 8003cbc:	bfde      	ittt	le
 8003cbe:	2330      	movle	r3, #48	; 0x30
 8003cc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003cc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003cc8:	1b92      	subs	r2, r2, r6
 8003cca:	6122      	str	r2, [r4, #16]
 8003ccc:	f8cd a000 	str.w	sl, [sp]
 8003cd0:	464b      	mov	r3, r9
 8003cd2:	aa03      	add	r2, sp, #12
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	4640      	mov	r0, r8
 8003cd8:	f7ff fee2 	bl	8003aa0 <_printf_common>
 8003cdc:	3001      	adds	r0, #1
 8003cde:	d14c      	bne.n	8003d7a <_printf_i+0x1fe>
 8003ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce4:	b004      	add	sp, #16
 8003ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cea:	4835      	ldr	r0, [pc, #212]	; (8003dc0 <_printf_i+0x244>)
 8003cec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	680e      	ldr	r6, [r1, #0]
 8003cf4:	061f      	lsls	r7, r3, #24
 8003cf6:	f856 5b04 	ldr.w	r5, [r6], #4
 8003cfa:	600e      	str	r6, [r1, #0]
 8003cfc:	d514      	bpl.n	8003d28 <_printf_i+0x1ac>
 8003cfe:	07d9      	lsls	r1, r3, #31
 8003d00:	bf44      	itt	mi
 8003d02:	f043 0320 	orrmi.w	r3, r3, #32
 8003d06:	6023      	strmi	r3, [r4, #0]
 8003d08:	b91d      	cbnz	r5, 8003d12 <_printf_i+0x196>
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	f023 0320 	bic.w	r3, r3, #32
 8003d10:	6023      	str	r3, [r4, #0]
 8003d12:	2310      	movs	r3, #16
 8003d14:	e7b0      	b.n	8003c78 <_printf_i+0xfc>
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	f043 0320 	orr.w	r3, r3, #32
 8003d1c:	6023      	str	r3, [r4, #0]
 8003d1e:	2378      	movs	r3, #120	; 0x78
 8003d20:	4828      	ldr	r0, [pc, #160]	; (8003dc4 <_printf_i+0x248>)
 8003d22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d26:	e7e3      	b.n	8003cf0 <_printf_i+0x174>
 8003d28:	065e      	lsls	r6, r3, #25
 8003d2a:	bf48      	it	mi
 8003d2c:	b2ad      	uxthmi	r5, r5
 8003d2e:	e7e6      	b.n	8003cfe <_printf_i+0x182>
 8003d30:	4616      	mov	r6, r2
 8003d32:	e7bb      	b.n	8003cac <_printf_i+0x130>
 8003d34:	680b      	ldr	r3, [r1, #0]
 8003d36:	6826      	ldr	r6, [r4, #0]
 8003d38:	6960      	ldr	r0, [r4, #20]
 8003d3a:	1d1d      	adds	r5, r3, #4
 8003d3c:	600d      	str	r5, [r1, #0]
 8003d3e:	0635      	lsls	r5, r6, #24
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	d501      	bpl.n	8003d48 <_printf_i+0x1cc>
 8003d44:	6018      	str	r0, [r3, #0]
 8003d46:	e002      	b.n	8003d4e <_printf_i+0x1d2>
 8003d48:	0671      	lsls	r1, r6, #25
 8003d4a:	d5fb      	bpl.n	8003d44 <_printf_i+0x1c8>
 8003d4c:	8018      	strh	r0, [r3, #0]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	6123      	str	r3, [r4, #16]
 8003d52:	4616      	mov	r6, r2
 8003d54:	e7ba      	b.n	8003ccc <_printf_i+0x150>
 8003d56:	680b      	ldr	r3, [r1, #0]
 8003d58:	1d1a      	adds	r2, r3, #4
 8003d5a:	600a      	str	r2, [r1, #0]
 8003d5c:	681e      	ldr	r6, [r3, #0]
 8003d5e:	6862      	ldr	r2, [r4, #4]
 8003d60:	2100      	movs	r1, #0
 8003d62:	4630      	mov	r0, r6
 8003d64:	f7fc fa3c 	bl	80001e0 <memchr>
 8003d68:	b108      	cbz	r0, 8003d6e <_printf_i+0x1f2>
 8003d6a:	1b80      	subs	r0, r0, r6
 8003d6c:	6060      	str	r0, [r4, #4]
 8003d6e:	6863      	ldr	r3, [r4, #4]
 8003d70:	6123      	str	r3, [r4, #16]
 8003d72:	2300      	movs	r3, #0
 8003d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d78:	e7a8      	b.n	8003ccc <_printf_i+0x150>
 8003d7a:	6923      	ldr	r3, [r4, #16]
 8003d7c:	4632      	mov	r2, r6
 8003d7e:	4649      	mov	r1, r9
 8003d80:	4640      	mov	r0, r8
 8003d82:	47d0      	blx	sl
 8003d84:	3001      	adds	r0, #1
 8003d86:	d0ab      	beq.n	8003ce0 <_printf_i+0x164>
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	079b      	lsls	r3, r3, #30
 8003d8c:	d413      	bmi.n	8003db6 <_printf_i+0x23a>
 8003d8e:	68e0      	ldr	r0, [r4, #12]
 8003d90:	9b03      	ldr	r3, [sp, #12]
 8003d92:	4298      	cmp	r0, r3
 8003d94:	bfb8      	it	lt
 8003d96:	4618      	movlt	r0, r3
 8003d98:	e7a4      	b.n	8003ce4 <_printf_i+0x168>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	4632      	mov	r2, r6
 8003d9e:	4649      	mov	r1, r9
 8003da0:	4640      	mov	r0, r8
 8003da2:	47d0      	blx	sl
 8003da4:	3001      	adds	r0, #1
 8003da6:	d09b      	beq.n	8003ce0 <_printf_i+0x164>
 8003da8:	3501      	adds	r5, #1
 8003daa:	68e3      	ldr	r3, [r4, #12]
 8003dac:	9903      	ldr	r1, [sp, #12]
 8003dae:	1a5b      	subs	r3, r3, r1
 8003db0:	42ab      	cmp	r3, r5
 8003db2:	dcf2      	bgt.n	8003d9a <_printf_i+0x21e>
 8003db4:	e7eb      	b.n	8003d8e <_printf_i+0x212>
 8003db6:	2500      	movs	r5, #0
 8003db8:	f104 0619 	add.w	r6, r4, #25
 8003dbc:	e7f5      	b.n	8003daa <_printf_i+0x22e>
 8003dbe:	bf00      	nop
 8003dc0:	08004681 	.word	0x08004681
 8003dc4:	08004692 	.word	0x08004692

08003dc8 <_sbrk_r>:
 8003dc8:	b538      	push	{r3, r4, r5, lr}
 8003dca:	4d06      	ldr	r5, [pc, #24]	; (8003de4 <_sbrk_r+0x1c>)
 8003dcc:	2300      	movs	r3, #0
 8003dce:	4604      	mov	r4, r0
 8003dd0:	4608      	mov	r0, r1
 8003dd2:	602b      	str	r3, [r5, #0]
 8003dd4:	f7fd f916 	bl	8001004 <_sbrk>
 8003dd8:	1c43      	adds	r3, r0, #1
 8003dda:	d102      	bne.n	8003de2 <_sbrk_r+0x1a>
 8003ddc:	682b      	ldr	r3, [r5, #0]
 8003dde:	b103      	cbz	r3, 8003de2 <_sbrk_r+0x1a>
 8003de0:	6023      	str	r3, [r4, #0]
 8003de2:	bd38      	pop	{r3, r4, r5, pc}
 8003de4:	2000012c 	.word	0x2000012c

08003de8 <__sread>:
 8003de8:	b510      	push	{r4, lr}
 8003dea:	460c      	mov	r4, r1
 8003dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df0:	f000 fab4 	bl	800435c <_read_r>
 8003df4:	2800      	cmp	r0, #0
 8003df6:	bfab      	itete	ge
 8003df8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003dfa:	89a3      	ldrhlt	r3, [r4, #12]
 8003dfc:	181b      	addge	r3, r3, r0
 8003dfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e02:	bfac      	ite	ge
 8003e04:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e06:	81a3      	strhlt	r3, [r4, #12]
 8003e08:	bd10      	pop	{r4, pc}

08003e0a <__swrite>:
 8003e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e0e:	461f      	mov	r7, r3
 8003e10:	898b      	ldrh	r3, [r1, #12]
 8003e12:	05db      	lsls	r3, r3, #23
 8003e14:	4605      	mov	r5, r0
 8003e16:	460c      	mov	r4, r1
 8003e18:	4616      	mov	r6, r2
 8003e1a:	d505      	bpl.n	8003e28 <__swrite+0x1e>
 8003e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e20:	2302      	movs	r3, #2
 8003e22:	2200      	movs	r2, #0
 8003e24:	f000 f9c8 	bl	80041b8 <_lseek_r>
 8003e28:	89a3      	ldrh	r3, [r4, #12]
 8003e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e32:	81a3      	strh	r3, [r4, #12]
 8003e34:	4632      	mov	r2, r6
 8003e36:	463b      	mov	r3, r7
 8003e38:	4628      	mov	r0, r5
 8003e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3e:	f000 b869 	b.w	8003f14 <_write_r>

08003e42 <__sseek>:
 8003e42:	b510      	push	{r4, lr}
 8003e44:	460c      	mov	r4, r1
 8003e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e4a:	f000 f9b5 	bl	80041b8 <_lseek_r>
 8003e4e:	1c43      	adds	r3, r0, #1
 8003e50:	89a3      	ldrh	r3, [r4, #12]
 8003e52:	bf15      	itete	ne
 8003e54:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e5e:	81a3      	strheq	r3, [r4, #12]
 8003e60:	bf18      	it	ne
 8003e62:	81a3      	strhne	r3, [r4, #12]
 8003e64:	bd10      	pop	{r4, pc}

08003e66 <__sclose>:
 8003e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e6a:	f000 b8d3 	b.w	8004014 <_close_r>
	...

08003e70 <__swbuf_r>:
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	460e      	mov	r6, r1
 8003e74:	4614      	mov	r4, r2
 8003e76:	4605      	mov	r5, r0
 8003e78:	b118      	cbz	r0, 8003e82 <__swbuf_r+0x12>
 8003e7a:	6983      	ldr	r3, [r0, #24]
 8003e7c:	b90b      	cbnz	r3, 8003e82 <__swbuf_r+0x12>
 8003e7e:	f7ff fbbb 	bl	80035f8 <__sinit>
 8003e82:	4b21      	ldr	r3, [pc, #132]	; (8003f08 <__swbuf_r+0x98>)
 8003e84:	429c      	cmp	r4, r3
 8003e86:	d12b      	bne.n	8003ee0 <__swbuf_r+0x70>
 8003e88:	686c      	ldr	r4, [r5, #4]
 8003e8a:	69a3      	ldr	r3, [r4, #24]
 8003e8c:	60a3      	str	r3, [r4, #8]
 8003e8e:	89a3      	ldrh	r3, [r4, #12]
 8003e90:	071a      	lsls	r2, r3, #28
 8003e92:	d52f      	bpl.n	8003ef4 <__swbuf_r+0x84>
 8003e94:	6923      	ldr	r3, [r4, #16]
 8003e96:	b36b      	cbz	r3, 8003ef4 <__swbuf_r+0x84>
 8003e98:	6923      	ldr	r3, [r4, #16]
 8003e9a:	6820      	ldr	r0, [r4, #0]
 8003e9c:	1ac0      	subs	r0, r0, r3
 8003e9e:	6963      	ldr	r3, [r4, #20]
 8003ea0:	b2f6      	uxtb	r6, r6
 8003ea2:	4283      	cmp	r3, r0
 8003ea4:	4637      	mov	r7, r6
 8003ea6:	dc04      	bgt.n	8003eb2 <__swbuf_r+0x42>
 8003ea8:	4621      	mov	r1, r4
 8003eaa:	4628      	mov	r0, r5
 8003eac:	f000 f948 	bl	8004140 <_fflush_r>
 8003eb0:	bb30      	cbnz	r0, 8003f00 <__swbuf_r+0x90>
 8003eb2:	68a3      	ldr	r3, [r4, #8]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	60a3      	str	r3, [r4, #8]
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	6022      	str	r2, [r4, #0]
 8003ebe:	701e      	strb	r6, [r3, #0]
 8003ec0:	6963      	ldr	r3, [r4, #20]
 8003ec2:	3001      	adds	r0, #1
 8003ec4:	4283      	cmp	r3, r0
 8003ec6:	d004      	beq.n	8003ed2 <__swbuf_r+0x62>
 8003ec8:	89a3      	ldrh	r3, [r4, #12]
 8003eca:	07db      	lsls	r3, r3, #31
 8003ecc:	d506      	bpl.n	8003edc <__swbuf_r+0x6c>
 8003ece:	2e0a      	cmp	r6, #10
 8003ed0:	d104      	bne.n	8003edc <__swbuf_r+0x6c>
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	f000 f933 	bl	8004140 <_fflush_r>
 8003eda:	b988      	cbnz	r0, 8003f00 <__swbuf_r+0x90>
 8003edc:	4638      	mov	r0, r7
 8003ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <__swbuf_r+0x9c>)
 8003ee2:	429c      	cmp	r4, r3
 8003ee4:	d101      	bne.n	8003eea <__swbuf_r+0x7a>
 8003ee6:	68ac      	ldr	r4, [r5, #8]
 8003ee8:	e7cf      	b.n	8003e8a <__swbuf_r+0x1a>
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <__swbuf_r+0xa0>)
 8003eec:	429c      	cmp	r4, r3
 8003eee:	bf08      	it	eq
 8003ef0:	68ec      	ldreq	r4, [r5, #12]
 8003ef2:	e7ca      	b.n	8003e8a <__swbuf_r+0x1a>
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f000 f81e 	bl	8003f38 <__swsetup_r>
 8003efc:	2800      	cmp	r0, #0
 8003efe:	d0cb      	beq.n	8003e98 <__swbuf_r+0x28>
 8003f00:	f04f 37ff 	mov.w	r7, #4294967295
 8003f04:	e7ea      	b.n	8003edc <__swbuf_r+0x6c>
 8003f06:	bf00      	nop
 8003f08:	08004630 	.word	0x08004630
 8003f0c:	08004650 	.word	0x08004650
 8003f10:	08004610 	.word	0x08004610

08003f14 <_write_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	4d07      	ldr	r5, [pc, #28]	; (8003f34 <_write_r+0x20>)
 8003f18:	4604      	mov	r4, r0
 8003f1a:	4608      	mov	r0, r1
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	2200      	movs	r2, #0
 8003f20:	602a      	str	r2, [r5, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	f7fd f818 	bl	8000f58 <_write>
 8003f28:	1c43      	adds	r3, r0, #1
 8003f2a:	d102      	bne.n	8003f32 <_write_r+0x1e>
 8003f2c:	682b      	ldr	r3, [r5, #0]
 8003f2e:	b103      	cbz	r3, 8003f32 <_write_r+0x1e>
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	bd38      	pop	{r3, r4, r5, pc}
 8003f34:	2000012c 	.word	0x2000012c

08003f38 <__swsetup_r>:
 8003f38:	4b32      	ldr	r3, [pc, #200]	; (8004004 <__swsetup_r+0xcc>)
 8003f3a:	b570      	push	{r4, r5, r6, lr}
 8003f3c:	681d      	ldr	r5, [r3, #0]
 8003f3e:	4606      	mov	r6, r0
 8003f40:	460c      	mov	r4, r1
 8003f42:	b125      	cbz	r5, 8003f4e <__swsetup_r+0x16>
 8003f44:	69ab      	ldr	r3, [r5, #24]
 8003f46:	b913      	cbnz	r3, 8003f4e <__swsetup_r+0x16>
 8003f48:	4628      	mov	r0, r5
 8003f4a:	f7ff fb55 	bl	80035f8 <__sinit>
 8003f4e:	4b2e      	ldr	r3, [pc, #184]	; (8004008 <__swsetup_r+0xd0>)
 8003f50:	429c      	cmp	r4, r3
 8003f52:	d10f      	bne.n	8003f74 <__swsetup_r+0x3c>
 8003f54:	686c      	ldr	r4, [r5, #4]
 8003f56:	89a3      	ldrh	r3, [r4, #12]
 8003f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f5c:	0719      	lsls	r1, r3, #28
 8003f5e:	d42c      	bmi.n	8003fba <__swsetup_r+0x82>
 8003f60:	06dd      	lsls	r5, r3, #27
 8003f62:	d411      	bmi.n	8003f88 <__swsetup_r+0x50>
 8003f64:	2309      	movs	r3, #9
 8003f66:	6033      	str	r3, [r6, #0]
 8003f68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f6c:	81a3      	strh	r3, [r4, #12]
 8003f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f72:	e03e      	b.n	8003ff2 <__swsetup_r+0xba>
 8003f74:	4b25      	ldr	r3, [pc, #148]	; (800400c <__swsetup_r+0xd4>)
 8003f76:	429c      	cmp	r4, r3
 8003f78:	d101      	bne.n	8003f7e <__swsetup_r+0x46>
 8003f7a:	68ac      	ldr	r4, [r5, #8]
 8003f7c:	e7eb      	b.n	8003f56 <__swsetup_r+0x1e>
 8003f7e:	4b24      	ldr	r3, [pc, #144]	; (8004010 <__swsetup_r+0xd8>)
 8003f80:	429c      	cmp	r4, r3
 8003f82:	bf08      	it	eq
 8003f84:	68ec      	ldreq	r4, [r5, #12]
 8003f86:	e7e6      	b.n	8003f56 <__swsetup_r+0x1e>
 8003f88:	0758      	lsls	r0, r3, #29
 8003f8a:	d512      	bpl.n	8003fb2 <__swsetup_r+0x7a>
 8003f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f8e:	b141      	cbz	r1, 8003fa2 <__swsetup_r+0x6a>
 8003f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f94:	4299      	cmp	r1, r3
 8003f96:	d002      	beq.n	8003f9e <__swsetup_r+0x66>
 8003f98:	4630      	mov	r0, r6
 8003f9a:	f000 f98f 	bl	80042bc <_free_r>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	6363      	str	r3, [r4, #52]	; 0x34
 8003fa2:	89a3      	ldrh	r3, [r4, #12]
 8003fa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fa8:	81a3      	strh	r3, [r4, #12]
 8003faa:	2300      	movs	r3, #0
 8003fac:	6063      	str	r3, [r4, #4]
 8003fae:	6923      	ldr	r3, [r4, #16]
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	89a3      	ldrh	r3, [r4, #12]
 8003fb4:	f043 0308 	orr.w	r3, r3, #8
 8003fb8:	81a3      	strh	r3, [r4, #12]
 8003fba:	6923      	ldr	r3, [r4, #16]
 8003fbc:	b94b      	cbnz	r3, 8003fd2 <__swsetup_r+0x9a>
 8003fbe:	89a3      	ldrh	r3, [r4, #12]
 8003fc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc8:	d003      	beq.n	8003fd2 <__swsetup_r+0x9a>
 8003fca:	4621      	mov	r1, r4
 8003fcc:	4630      	mov	r0, r6
 8003fce:	f000 f929 	bl	8004224 <__smakebuf_r>
 8003fd2:	89a0      	ldrh	r0, [r4, #12]
 8003fd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003fd8:	f010 0301 	ands.w	r3, r0, #1
 8003fdc:	d00a      	beq.n	8003ff4 <__swsetup_r+0xbc>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60a3      	str	r3, [r4, #8]
 8003fe2:	6963      	ldr	r3, [r4, #20]
 8003fe4:	425b      	negs	r3, r3
 8003fe6:	61a3      	str	r3, [r4, #24]
 8003fe8:	6923      	ldr	r3, [r4, #16]
 8003fea:	b943      	cbnz	r3, 8003ffe <__swsetup_r+0xc6>
 8003fec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ff0:	d1ba      	bne.n	8003f68 <__swsetup_r+0x30>
 8003ff2:	bd70      	pop	{r4, r5, r6, pc}
 8003ff4:	0781      	lsls	r1, r0, #30
 8003ff6:	bf58      	it	pl
 8003ff8:	6963      	ldrpl	r3, [r4, #20]
 8003ffa:	60a3      	str	r3, [r4, #8]
 8003ffc:	e7f4      	b.n	8003fe8 <__swsetup_r+0xb0>
 8003ffe:	2000      	movs	r0, #0
 8004000:	e7f7      	b.n	8003ff2 <__swsetup_r+0xba>
 8004002:	bf00      	nop
 8004004:	2000000c 	.word	0x2000000c
 8004008:	08004630 	.word	0x08004630
 800400c:	08004650 	.word	0x08004650
 8004010:	08004610 	.word	0x08004610

08004014 <_close_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	4d06      	ldr	r5, [pc, #24]	; (8004030 <_close_r+0x1c>)
 8004018:	2300      	movs	r3, #0
 800401a:	4604      	mov	r4, r0
 800401c:	4608      	mov	r0, r1
 800401e:	602b      	str	r3, [r5, #0]
 8004020:	f7fc ffbc 	bl	8000f9c <_close>
 8004024:	1c43      	adds	r3, r0, #1
 8004026:	d102      	bne.n	800402e <_close_r+0x1a>
 8004028:	682b      	ldr	r3, [r5, #0]
 800402a:	b103      	cbz	r3, 800402e <_close_r+0x1a>
 800402c:	6023      	str	r3, [r4, #0]
 800402e:	bd38      	pop	{r3, r4, r5, pc}
 8004030:	2000012c 	.word	0x2000012c

08004034 <__sflush_r>:
 8004034:	898a      	ldrh	r2, [r1, #12]
 8004036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800403a:	4605      	mov	r5, r0
 800403c:	0710      	lsls	r0, r2, #28
 800403e:	460c      	mov	r4, r1
 8004040:	d458      	bmi.n	80040f4 <__sflush_r+0xc0>
 8004042:	684b      	ldr	r3, [r1, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	dc05      	bgt.n	8004054 <__sflush_r+0x20>
 8004048:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	dc02      	bgt.n	8004054 <__sflush_r+0x20>
 800404e:	2000      	movs	r0, #0
 8004050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004054:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004056:	2e00      	cmp	r6, #0
 8004058:	d0f9      	beq.n	800404e <__sflush_r+0x1a>
 800405a:	2300      	movs	r3, #0
 800405c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004060:	682f      	ldr	r7, [r5, #0]
 8004062:	602b      	str	r3, [r5, #0]
 8004064:	d032      	beq.n	80040cc <__sflush_r+0x98>
 8004066:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004068:	89a3      	ldrh	r3, [r4, #12]
 800406a:	075a      	lsls	r2, r3, #29
 800406c:	d505      	bpl.n	800407a <__sflush_r+0x46>
 800406e:	6863      	ldr	r3, [r4, #4]
 8004070:	1ac0      	subs	r0, r0, r3
 8004072:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004074:	b10b      	cbz	r3, 800407a <__sflush_r+0x46>
 8004076:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004078:	1ac0      	subs	r0, r0, r3
 800407a:	2300      	movs	r3, #0
 800407c:	4602      	mov	r2, r0
 800407e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004080:	6a21      	ldr	r1, [r4, #32]
 8004082:	4628      	mov	r0, r5
 8004084:	47b0      	blx	r6
 8004086:	1c43      	adds	r3, r0, #1
 8004088:	89a3      	ldrh	r3, [r4, #12]
 800408a:	d106      	bne.n	800409a <__sflush_r+0x66>
 800408c:	6829      	ldr	r1, [r5, #0]
 800408e:	291d      	cmp	r1, #29
 8004090:	d82c      	bhi.n	80040ec <__sflush_r+0xb8>
 8004092:	4a2a      	ldr	r2, [pc, #168]	; (800413c <__sflush_r+0x108>)
 8004094:	40ca      	lsrs	r2, r1
 8004096:	07d6      	lsls	r6, r2, #31
 8004098:	d528      	bpl.n	80040ec <__sflush_r+0xb8>
 800409a:	2200      	movs	r2, #0
 800409c:	6062      	str	r2, [r4, #4]
 800409e:	04d9      	lsls	r1, r3, #19
 80040a0:	6922      	ldr	r2, [r4, #16]
 80040a2:	6022      	str	r2, [r4, #0]
 80040a4:	d504      	bpl.n	80040b0 <__sflush_r+0x7c>
 80040a6:	1c42      	adds	r2, r0, #1
 80040a8:	d101      	bne.n	80040ae <__sflush_r+0x7a>
 80040aa:	682b      	ldr	r3, [r5, #0]
 80040ac:	b903      	cbnz	r3, 80040b0 <__sflush_r+0x7c>
 80040ae:	6560      	str	r0, [r4, #84]	; 0x54
 80040b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040b2:	602f      	str	r7, [r5, #0]
 80040b4:	2900      	cmp	r1, #0
 80040b6:	d0ca      	beq.n	800404e <__sflush_r+0x1a>
 80040b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040bc:	4299      	cmp	r1, r3
 80040be:	d002      	beq.n	80040c6 <__sflush_r+0x92>
 80040c0:	4628      	mov	r0, r5
 80040c2:	f000 f8fb 	bl	80042bc <_free_r>
 80040c6:	2000      	movs	r0, #0
 80040c8:	6360      	str	r0, [r4, #52]	; 0x34
 80040ca:	e7c1      	b.n	8004050 <__sflush_r+0x1c>
 80040cc:	6a21      	ldr	r1, [r4, #32]
 80040ce:	2301      	movs	r3, #1
 80040d0:	4628      	mov	r0, r5
 80040d2:	47b0      	blx	r6
 80040d4:	1c41      	adds	r1, r0, #1
 80040d6:	d1c7      	bne.n	8004068 <__sflush_r+0x34>
 80040d8:	682b      	ldr	r3, [r5, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0c4      	beq.n	8004068 <__sflush_r+0x34>
 80040de:	2b1d      	cmp	r3, #29
 80040e0:	d001      	beq.n	80040e6 <__sflush_r+0xb2>
 80040e2:	2b16      	cmp	r3, #22
 80040e4:	d101      	bne.n	80040ea <__sflush_r+0xb6>
 80040e6:	602f      	str	r7, [r5, #0]
 80040e8:	e7b1      	b.n	800404e <__sflush_r+0x1a>
 80040ea:	89a3      	ldrh	r3, [r4, #12]
 80040ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f0:	81a3      	strh	r3, [r4, #12]
 80040f2:	e7ad      	b.n	8004050 <__sflush_r+0x1c>
 80040f4:	690f      	ldr	r7, [r1, #16]
 80040f6:	2f00      	cmp	r7, #0
 80040f8:	d0a9      	beq.n	800404e <__sflush_r+0x1a>
 80040fa:	0793      	lsls	r3, r2, #30
 80040fc:	680e      	ldr	r6, [r1, #0]
 80040fe:	bf08      	it	eq
 8004100:	694b      	ldreq	r3, [r1, #20]
 8004102:	600f      	str	r7, [r1, #0]
 8004104:	bf18      	it	ne
 8004106:	2300      	movne	r3, #0
 8004108:	eba6 0807 	sub.w	r8, r6, r7
 800410c:	608b      	str	r3, [r1, #8]
 800410e:	f1b8 0f00 	cmp.w	r8, #0
 8004112:	dd9c      	ble.n	800404e <__sflush_r+0x1a>
 8004114:	6a21      	ldr	r1, [r4, #32]
 8004116:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004118:	4643      	mov	r3, r8
 800411a:	463a      	mov	r2, r7
 800411c:	4628      	mov	r0, r5
 800411e:	47b0      	blx	r6
 8004120:	2800      	cmp	r0, #0
 8004122:	dc06      	bgt.n	8004132 <__sflush_r+0xfe>
 8004124:	89a3      	ldrh	r3, [r4, #12]
 8004126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800412a:	81a3      	strh	r3, [r4, #12]
 800412c:	f04f 30ff 	mov.w	r0, #4294967295
 8004130:	e78e      	b.n	8004050 <__sflush_r+0x1c>
 8004132:	4407      	add	r7, r0
 8004134:	eba8 0800 	sub.w	r8, r8, r0
 8004138:	e7e9      	b.n	800410e <__sflush_r+0xda>
 800413a:	bf00      	nop
 800413c:	20400001 	.word	0x20400001

08004140 <_fflush_r>:
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	690b      	ldr	r3, [r1, #16]
 8004144:	4605      	mov	r5, r0
 8004146:	460c      	mov	r4, r1
 8004148:	b913      	cbnz	r3, 8004150 <_fflush_r+0x10>
 800414a:	2500      	movs	r5, #0
 800414c:	4628      	mov	r0, r5
 800414e:	bd38      	pop	{r3, r4, r5, pc}
 8004150:	b118      	cbz	r0, 800415a <_fflush_r+0x1a>
 8004152:	6983      	ldr	r3, [r0, #24]
 8004154:	b90b      	cbnz	r3, 800415a <_fflush_r+0x1a>
 8004156:	f7ff fa4f 	bl	80035f8 <__sinit>
 800415a:	4b14      	ldr	r3, [pc, #80]	; (80041ac <_fflush_r+0x6c>)
 800415c:	429c      	cmp	r4, r3
 800415e:	d11b      	bne.n	8004198 <_fflush_r+0x58>
 8004160:	686c      	ldr	r4, [r5, #4]
 8004162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0ef      	beq.n	800414a <_fflush_r+0xa>
 800416a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800416c:	07d0      	lsls	r0, r2, #31
 800416e:	d404      	bmi.n	800417a <_fflush_r+0x3a>
 8004170:	0599      	lsls	r1, r3, #22
 8004172:	d402      	bmi.n	800417a <_fflush_r+0x3a>
 8004174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004176:	f7ff fadd 	bl	8003734 <__retarget_lock_acquire_recursive>
 800417a:	4628      	mov	r0, r5
 800417c:	4621      	mov	r1, r4
 800417e:	f7ff ff59 	bl	8004034 <__sflush_r>
 8004182:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004184:	07da      	lsls	r2, r3, #31
 8004186:	4605      	mov	r5, r0
 8004188:	d4e0      	bmi.n	800414c <_fflush_r+0xc>
 800418a:	89a3      	ldrh	r3, [r4, #12]
 800418c:	059b      	lsls	r3, r3, #22
 800418e:	d4dd      	bmi.n	800414c <_fflush_r+0xc>
 8004190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004192:	f7ff fad0 	bl	8003736 <__retarget_lock_release_recursive>
 8004196:	e7d9      	b.n	800414c <_fflush_r+0xc>
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <_fflush_r+0x70>)
 800419a:	429c      	cmp	r4, r3
 800419c:	d101      	bne.n	80041a2 <_fflush_r+0x62>
 800419e:	68ac      	ldr	r4, [r5, #8]
 80041a0:	e7df      	b.n	8004162 <_fflush_r+0x22>
 80041a2:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <_fflush_r+0x74>)
 80041a4:	429c      	cmp	r4, r3
 80041a6:	bf08      	it	eq
 80041a8:	68ec      	ldreq	r4, [r5, #12]
 80041aa:	e7da      	b.n	8004162 <_fflush_r+0x22>
 80041ac:	08004630 	.word	0x08004630
 80041b0:	08004650 	.word	0x08004650
 80041b4:	08004610 	.word	0x08004610

080041b8 <_lseek_r>:
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	4d07      	ldr	r5, [pc, #28]	; (80041d8 <_lseek_r+0x20>)
 80041bc:	4604      	mov	r4, r0
 80041be:	4608      	mov	r0, r1
 80041c0:	4611      	mov	r1, r2
 80041c2:	2200      	movs	r2, #0
 80041c4:	602a      	str	r2, [r5, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	f7fc ff0f 	bl	8000fea <_lseek>
 80041cc:	1c43      	adds	r3, r0, #1
 80041ce:	d102      	bne.n	80041d6 <_lseek_r+0x1e>
 80041d0:	682b      	ldr	r3, [r5, #0]
 80041d2:	b103      	cbz	r3, 80041d6 <_lseek_r+0x1e>
 80041d4:	6023      	str	r3, [r4, #0]
 80041d6:	bd38      	pop	{r3, r4, r5, pc}
 80041d8:	2000012c 	.word	0x2000012c

080041dc <__swhatbuf_r>:
 80041dc:	b570      	push	{r4, r5, r6, lr}
 80041de:	460e      	mov	r6, r1
 80041e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041e4:	2900      	cmp	r1, #0
 80041e6:	b096      	sub	sp, #88	; 0x58
 80041e8:	4614      	mov	r4, r2
 80041ea:	461d      	mov	r5, r3
 80041ec:	da07      	bge.n	80041fe <__swhatbuf_r+0x22>
 80041ee:	2300      	movs	r3, #0
 80041f0:	602b      	str	r3, [r5, #0]
 80041f2:	89b3      	ldrh	r3, [r6, #12]
 80041f4:	061a      	lsls	r2, r3, #24
 80041f6:	d410      	bmi.n	800421a <__swhatbuf_r+0x3e>
 80041f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041fc:	e00e      	b.n	800421c <__swhatbuf_r+0x40>
 80041fe:	466a      	mov	r2, sp
 8004200:	f000 f8be 	bl	8004380 <_fstat_r>
 8004204:	2800      	cmp	r0, #0
 8004206:	dbf2      	blt.n	80041ee <__swhatbuf_r+0x12>
 8004208:	9a01      	ldr	r2, [sp, #4]
 800420a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800420e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004212:	425a      	negs	r2, r3
 8004214:	415a      	adcs	r2, r3
 8004216:	602a      	str	r2, [r5, #0]
 8004218:	e7ee      	b.n	80041f8 <__swhatbuf_r+0x1c>
 800421a:	2340      	movs	r3, #64	; 0x40
 800421c:	2000      	movs	r0, #0
 800421e:	6023      	str	r3, [r4, #0]
 8004220:	b016      	add	sp, #88	; 0x58
 8004222:	bd70      	pop	{r4, r5, r6, pc}

08004224 <__smakebuf_r>:
 8004224:	898b      	ldrh	r3, [r1, #12]
 8004226:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004228:	079d      	lsls	r5, r3, #30
 800422a:	4606      	mov	r6, r0
 800422c:	460c      	mov	r4, r1
 800422e:	d507      	bpl.n	8004240 <__smakebuf_r+0x1c>
 8004230:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004234:	6023      	str	r3, [r4, #0]
 8004236:	6123      	str	r3, [r4, #16]
 8004238:	2301      	movs	r3, #1
 800423a:	6163      	str	r3, [r4, #20]
 800423c:	b002      	add	sp, #8
 800423e:	bd70      	pop	{r4, r5, r6, pc}
 8004240:	ab01      	add	r3, sp, #4
 8004242:	466a      	mov	r2, sp
 8004244:	f7ff ffca 	bl	80041dc <__swhatbuf_r>
 8004248:	9900      	ldr	r1, [sp, #0]
 800424a:	4605      	mov	r5, r0
 800424c:	4630      	mov	r0, r6
 800424e:	f7ff fa73 	bl	8003738 <_malloc_r>
 8004252:	b948      	cbnz	r0, 8004268 <__smakebuf_r+0x44>
 8004254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004258:	059a      	lsls	r2, r3, #22
 800425a:	d4ef      	bmi.n	800423c <__smakebuf_r+0x18>
 800425c:	f023 0303 	bic.w	r3, r3, #3
 8004260:	f043 0302 	orr.w	r3, r3, #2
 8004264:	81a3      	strh	r3, [r4, #12]
 8004266:	e7e3      	b.n	8004230 <__smakebuf_r+0xc>
 8004268:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <__smakebuf_r+0x7c>)
 800426a:	62b3      	str	r3, [r6, #40]	; 0x28
 800426c:	89a3      	ldrh	r3, [r4, #12]
 800426e:	6020      	str	r0, [r4, #0]
 8004270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004274:	81a3      	strh	r3, [r4, #12]
 8004276:	9b00      	ldr	r3, [sp, #0]
 8004278:	6163      	str	r3, [r4, #20]
 800427a:	9b01      	ldr	r3, [sp, #4]
 800427c:	6120      	str	r0, [r4, #16]
 800427e:	b15b      	cbz	r3, 8004298 <__smakebuf_r+0x74>
 8004280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004284:	4630      	mov	r0, r6
 8004286:	f000 f88d 	bl	80043a4 <_isatty_r>
 800428a:	b128      	cbz	r0, 8004298 <__smakebuf_r+0x74>
 800428c:	89a3      	ldrh	r3, [r4, #12]
 800428e:	f023 0303 	bic.w	r3, r3, #3
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	81a3      	strh	r3, [r4, #12]
 8004298:	89a0      	ldrh	r0, [r4, #12]
 800429a:	4305      	orrs	r5, r0
 800429c:	81a5      	strh	r5, [r4, #12]
 800429e:	e7cd      	b.n	800423c <__smakebuf_r+0x18>
 80042a0:	08003591 	.word	0x08003591

080042a4 <__malloc_lock>:
 80042a4:	4801      	ldr	r0, [pc, #4]	; (80042ac <__malloc_lock+0x8>)
 80042a6:	f7ff ba45 	b.w	8003734 <__retarget_lock_acquire_recursive>
 80042aa:	bf00      	nop
 80042ac:	20000124 	.word	0x20000124

080042b0 <__malloc_unlock>:
 80042b0:	4801      	ldr	r0, [pc, #4]	; (80042b8 <__malloc_unlock+0x8>)
 80042b2:	f7ff ba40 	b.w	8003736 <__retarget_lock_release_recursive>
 80042b6:	bf00      	nop
 80042b8:	20000124 	.word	0x20000124

080042bc <_free_r>:
 80042bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042be:	2900      	cmp	r1, #0
 80042c0:	d048      	beq.n	8004354 <_free_r+0x98>
 80042c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042c6:	9001      	str	r0, [sp, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f1a1 0404 	sub.w	r4, r1, #4
 80042ce:	bfb8      	it	lt
 80042d0:	18e4      	addlt	r4, r4, r3
 80042d2:	f7ff ffe7 	bl	80042a4 <__malloc_lock>
 80042d6:	4a20      	ldr	r2, [pc, #128]	; (8004358 <_free_r+0x9c>)
 80042d8:	9801      	ldr	r0, [sp, #4]
 80042da:	6813      	ldr	r3, [r2, #0]
 80042dc:	4615      	mov	r5, r2
 80042de:	b933      	cbnz	r3, 80042ee <_free_r+0x32>
 80042e0:	6063      	str	r3, [r4, #4]
 80042e2:	6014      	str	r4, [r2, #0]
 80042e4:	b003      	add	sp, #12
 80042e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042ea:	f7ff bfe1 	b.w	80042b0 <__malloc_unlock>
 80042ee:	42a3      	cmp	r3, r4
 80042f0:	d90b      	bls.n	800430a <_free_r+0x4e>
 80042f2:	6821      	ldr	r1, [r4, #0]
 80042f4:	1862      	adds	r2, r4, r1
 80042f6:	4293      	cmp	r3, r2
 80042f8:	bf04      	itt	eq
 80042fa:	681a      	ldreq	r2, [r3, #0]
 80042fc:	685b      	ldreq	r3, [r3, #4]
 80042fe:	6063      	str	r3, [r4, #4]
 8004300:	bf04      	itt	eq
 8004302:	1852      	addeq	r2, r2, r1
 8004304:	6022      	streq	r2, [r4, #0]
 8004306:	602c      	str	r4, [r5, #0]
 8004308:	e7ec      	b.n	80042e4 <_free_r+0x28>
 800430a:	461a      	mov	r2, r3
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	b10b      	cbz	r3, 8004314 <_free_r+0x58>
 8004310:	42a3      	cmp	r3, r4
 8004312:	d9fa      	bls.n	800430a <_free_r+0x4e>
 8004314:	6811      	ldr	r1, [r2, #0]
 8004316:	1855      	adds	r5, r2, r1
 8004318:	42a5      	cmp	r5, r4
 800431a:	d10b      	bne.n	8004334 <_free_r+0x78>
 800431c:	6824      	ldr	r4, [r4, #0]
 800431e:	4421      	add	r1, r4
 8004320:	1854      	adds	r4, r2, r1
 8004322:	42a3      	cmp	r3, r4
 8004324:	6011      	str	r1, [r2, #0]
 8004326:	d1dd      	bne.n	80042e4 <_free_r+0x28>
 8004328:	681c      	ldr	r4, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	6053      	str	r3, [r2, #4]
 800432e:	4421      	add	r1, r4
 8004330:	6011      	str	r1, [r2, #0]
 8004332:	e7d7      	b.n	80042e4 <_free_r+0x28>
 8004334:	d902      	bls.n	800433c <_free_r+0x80>
 8004336:	230c      	movs	r3, #12
 8004338:	6003      	str	r3, [r0, #0]
 800433a:	e7d3      	b.n	80042e4 <_free_r+0x28>
 800433c:	6825      	ldr	r5, [r4, #0]
 800433e:	1961      	adds	r1, r4, r5
 8004340:	428b      	cmp	r3, r1
 8004342:	bf04      	itt	eq
 8004344:	6819      	ldreq	r1, [r3, #0]
 8004346:	685b      	ldreq	r3, [r3, #4]
 8004348:	6063      	str	r3, [r4, #4]
 800434a:	bf04      	itt	eq
 800434c:	1949      	addeq	r1, r1, r5
 800434e:	6021      	streq	r1, [r4, #0]
 8004350:	6054      	str	r4, [r2, #4]
 8004352:	e7c7      	b.n	80042e4 <_free_r+0x28>
 8004354:	b003      	add	sp, #12
 8004356:	bd30      	pop	{r4, r5, pc}
 8004358:	20000090 	.word	0x20000090

0800435c <_read_r>:
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	4d07      	ldr	r5, [pc, #28]	; (800437c <_read_r+0x20>)
 8004360:	4604      	mov	r4, r0
 8004362:	4608      	mov	r0, r1
 8004364:	4611      	mov	r1, r2
 8004366:	2200      	movs	r2, #0
 8004368:	602a      	str	r2, [r5, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	f7fc fdd6 	bl	8000f1c <_read>
 8004370:	1c43      	adds	r3, r0, #1
 8004372:	d102      	bne.n	800437a <_read_r+0x1e>
 8004374:	682b      	ldr	r3, [r5, #0]
 8004376:	b103      	cbz	r3, 800437a <_read_r+0x1e>
 8004378:	6023      	str	r3, [r4, #0]
 800437a:	bd38      	pop	{r3, r4, r5, pc}
 800437c:	2000012c 	.word	0x2000012c

08004380 <_fstat_r>:
 8004380:	b538      	push	{r3, r4, r5, lr}
 8004382:	4d07      	ldr	r5, [pc, #28]	; (80043a0 <_fstat_r+0x20>)
 8004384:	2300      	movs	r3, #0
 8004386:	4604      	mov	r4, r0
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	602b      	str	r3, [r5, #0]
 800438e:	f7fc fe11 	bl	8000fb4 <_fstat>
 8004392:	1c43      	adds	r3, r0, #1
 8004394:	d102      	bne.n	800439c <_fstat_r+0x1c>
 8004396:	682b      	ldr	r3, [r5, #0]
 8004398:	b103      	cbz	r3, 800439c <_fstat_r+0x1c>
 800439a:	6023      	str	r3, [r4, #0]
 800439c:	bd38      	pop	{r3, r4, r5, pc}
 800439e:	bf00      	nop
 80043a0:	2000012c 	.word	0x2000012c

080043a4 <_isatty_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4d06      	ldr	r5, [pc, #24]	; (80043c0 <_isatty_r+0x1c>)
 80043a8:	2300      	movs	r3, #0
 80043aa:	4604      	mov	r4, r0
 80043ac:	4608      	mov	r0, r1
 80043ae:	602b      	str	r3, [r5, #0]
 80043b0:	f7fc fe10 	bl	8000fd4 <_isatty>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	d102      	bne.n	80043be <_isatty_r+0x1a>
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	b103      	cbz	r3, 80043be <_isatty_r+0x1a>
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	bd38      	pop	{r3, r4, r5, pc}
 80043c0:	2000012c 	.word	0x2000012c

080043c4 <_init>:
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	bf00      	nop
 80043c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ca:	bc08      	pop	{r3}
 80043cc:	469e      	mov	lr, r3
 80043ce:	4770      	bx	lr

080043d0 <_fini>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	bf00      	nop
 80043d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d6:	bc08      	pop	{r3}
 80043d8:	469e      	mov	lr, r3
 80043da:	4770      	bx	lr
