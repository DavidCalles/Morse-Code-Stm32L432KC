
LED_MorseV0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08003f4c  08003f4c  00013f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041b0  080041b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041b8  080041b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041bc  080041bc  000141bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08004230  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08004230  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c93f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d58  00000000  00000000  0002c9df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002e738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002f100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210a1  00000000  00000000  0002fa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a55c  00000000  00000000  00050ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c226a  00000000  00000000  0005b00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011d277  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e60  00000000  00000000  0011d2cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f34 	.word	0x08003f34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003f34 	.word	0x08003f34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b0d9      	sub	sp, #356	; 0x164
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/*Morse alphabet*/
	MORSE_CHAR alphabet[ALPHABET_SIZE] = {
 800056e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000572:	4a2a      	ldr	r2, [pc, #168]	; (800061c <main+0xb4>)
 8000574:	4618      	mov	r0, r3
 8000576:	4611      	mov	r1, r2
 8000578:	f44f 739c 	mov.w	r3, #312	; 0x138
 800057c:	461a      	mov	r2, r3
 800057e:	f002 fd6d 	bl	800305c <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fb88 	bl	8000c96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f8dd 	bl	8000744 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f98d 	bl	80008a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f95b 	bl	8000848 <MX_USART2_UART_Init>
  GPIO_InitTypeDef GPIO_InitStruct2 = {0};
 8000592:	f107 0310 	add.w	r3, r7, #16
 8000596:	461a      	mov	r2, r3
 8000598:	2300      	movs	r3, #0
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	6053      	str	r3, [r2, #4]
 800059e:	6093      	str	r3, [r2, #8]
 80005a0:	60d3      	str	r3, [r2, #12]
 80005a2:	6113      	str	r3, [r2, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2140      	movs	r1, #64	; 0x40
 80005a8:	481d      	ldr	r0, [pc, #116]	; (8000620 <main+0xb8>)
 80005aa:	f000 fe5d 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct2.Pin = GPIO_PIN_6;
 80005ae:	f107 0310 	add.w	r3, r7, #16
 80005b2:	2240      	movs	r2, #64	; 0x40
 80005b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct2.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	2201      	movs	r2, #1
 80005bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct2.Pull = GPIO_NOPULL;
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct2.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c6:	f107 0310 	add.w	r3, r7, #16
 80005ca:	2202      	movs	r2, #2
 80005cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct2);
 80005ce:	f107 0310 	add.w	r3, r7, #16
 80005d2:	4619      	mov	r1, r3
 80005d4:	4812      	ldr	r0, [pc, #72]	; (8000620 <main+0xb8>)
 80005d6:	f000 fcdd 	bl	8000f94 <HAL_GPIO_Init>

  /* USER CODE BEGIN 2 */
  unsigned int x = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  char myname[] = "David Calles\n";
 80005e0:	463b      	mov	r3, r7
 80005e2:	4a10      	ldr	r2, [pc, #64]	; (8000624 <main+0xbc>)
 80005e4:	461c      	mov	r4, r3
 80005e6:	4613      	mov	r3, r2
 80005e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ea:	c407      	stmia	r4!, {r0, r1, r2}
 80005ec:	8023      	strh	r3, [r4, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	printf("Initiate conversion %d \r\n", x);
 80005ee:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 80005f2:	480d      	ldr	r0, [pc, #52]	; (8000628 <main+0xc0>)
 80005f4:	f002 fd48 	bl	8003088 <iprintf>
	String2Morse(myname, 13, alphabet);
 80005f8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80005fc:	463b      	mov	r3, r7
 80005fe:	210d      	movs	r1, #13
 8000600:	4618      	mov	r0, r3
 8000602:	f000 f815 	bl	8000630 <String2Morse>
	printf("End conversion %d \r\n", x++);
 8000606:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8000610:	4619      	mov	r1, r3
 8000612:	4806      	ldr	r0, [pc, #24]	; (800062c <main+0xc4>)
 8000614:	f002 fd38 	bl	8003088 <iprintf>
	printf("Initiate conversion %d \r\n", x);
 8000618:	e7e9      	b.n	80005ee <main+0x86>
 800061a:	bf00      	nop
 800061c:	08003f80 	.word	0x08003f80
 8000620:	48000400 	.word	0x48000400
 8000624:	080040b8 	.word	0x080040b8
 8000628:	08003f4c 	.word	0x08003f4c
 800062c:	08003f68 	.word	0x08003f68

08000630 <String2Morse>:

/**
  * @brief String2Morse
  * @retval None
  */
uint8_t String2Morse(char *name, uint8_t n, MORSE_CHAR *alphabet){
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	460b      	mov	r3, r1
 800063a:	607a      	str	r2, [r7, #4]
 800063c:	72fb      	strb	r3, [r7, #11]

	//Index calculation and cases evaluation
	uint8_t i = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	75fb      	strb	r3, [r7, #23]
	uint8_t index = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	75bb      	strb	r3, [r7, #22]
	CHAR_STATE state = NOTSHOW;
 8000646:	2300      	movs	r3, #0
 8000648:	757b      	strb	r3, [r7, #21]
	// Iterate through every character in string
	for(i=0; i<n; i++){
 800064a:	2300      	movs	r3, #0
 800064c:	75fb      	strb	r3, [r7, #23]
 800064e:	e06c      	b.n	800072a <String2Morse+0xfa>
		// Evaluate the type of character
		switch(name[i]){
 8000650:	7dfb      	ldrb	r3, [r7, #23]
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	4413      	add	r3, r2
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b7a      	cmp	r3, #122	; 0x7a
 800065a:	dc21      	bgt.n	80006a0 <String2Morse+0x70>
 800065c:	2b61      	cmp	r3, #97	; 0x61
 800065e:	da0f      	bge.n	8000680 <String2Morse+0x50>
 8000660:	2b20      	cmp	r3, #32
 8000662:	d016      	beq.n	8000692 <String2Morse+0x62>
 8000664:	2b20      	cmp	r3, #32
 8000666:	db1b      	blt.n	80006a0 <String2Morse+0x70>
 8000668:	3b41      	subs	r3, #65	; 0x41
 800066a:	2b19      	cmp	r3, #25
 800066c:	d818      	bhi.n	80006a0 <String2Morse+0x70>
			// Capital case letters evaluation according to ASCII.
			case 'A' ... 'Z':{
				index = name[i]-'A';
 800066e:	7dfb      	ldrb	r3, [r7, #23]
 8000670:	68fa      	ldr	r2, [r7, #12]
 8000672:	4413      	add	r3, r2
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3b41      	subs	r3, #65	; 0x41
 8000678:	75bb      	strb	r3, [r7, #22]
				state = SHOW;
 800067a:	2301      	movs	r3, #1
 800067c:	757b      	strb	r3, [r7, #21]
				break;
 800067e:	e012      	b.n	80006a6 <String2Morse+0x76>
			}//end case
			// Lower case letters evaluation according to ASCII.
			case 'a' ... 'z':{
				index = name[i]-'a';
 8000680:	7dfb      	ldrb	r3, [r7, #23]
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	3b61      	subs	r3, #97	; 0x61
 800068a:	75bb      	strb	r3, [r7, #22]
				state = SHOW;
 800068c:	2301      	movs	r3, #1
 800068e:	757b      	strb	r3, [r7, #21]
				break;
 8000690:	e009      	b.n	80006a6 <String2Morse+0x76>
			}//end case
			// Space evaluation
			case ' ':{
				HAL_Delay(SPACE);
 8000692:	f640 0034 	movw	r0, #2100	; 0x834
 8000696:	f000 fb73 	bl	8000d80 <HAL_Delay>
				state = NOTSHOW;
 800069a:	2300      	movs	r3, #0
 800069c:	757b      	strb	r3, [r7, #21]
				break;
 800069e:	e002      	b.n	80006a6 <String2Morse+0x76>
			}//end case
			// Other special characters will just be ignored
			default:{
				state = NOTSHOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	757b      	strb	r3, [r7, #21]
				break;
 80006a4:	bf00      	nop
			}//end default case
		}//end switch

		// Output of the morse code of the character
		if (state == SHOW){
 80006a6:	7d7b      	ldrb	r3, [r7, #21]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d13b      	bne.n	8000724 <String2Morse+0xf4>
			for(uint8_t j=0; j<alphabet[index].length; j++){
 80006ac:	2300      	movs	r3, #0
 80006ae:	753b      	strb	r3, [r7, #20]
 80006b0:	e01f      	b.n	80006f2 <String2Morse+0xc2>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);//Turn LED ON,
 80006b2:	2201      	movs	r2, #1
 80006b4:	2140      	movs	r1, #64	; 0x40
 80006b6:	4821      	ldr	r0, [pc, #132]	; (800073c <String2Morse+0x10c>)
 80006b8:	f000 fdd6 	bl	8001268 <HAL_GPIO_WritePin>
				HAL_Delay(alphabet[index].morse[j]);
 80006bc:	7dba      	ldrb	r2, [r7, #22]
 80006be:	4613      	mov	r3, r2
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	4413      	add	r3, r2
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	461a      	mov	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	441a      	add	r2, r3
 80006cc:	7d3b      	ldrb	r3, [r7, #20]
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	889b      	ldrh	r3, [r3, #4]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fb53 	bl	8000d80 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);//Turn LED OFF,
 80006da:	2200      	movs	r2, #0
 80006dc:	2140      	movs	r1, #64	; 0x40
 80006de:	4817      	ldr	r0, [pc, #92]	; (800073c <String2Morse+0x10c>)
 80006e0:	f000 fdc2 	bl	8001268 <HAL_GPIO_WritePin>
				HAL_Delay(PAUSE);
 80006e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006e8:	f000 fb4a 	bl	8000d80 <HAL_Delay>
			for(uint8_t j=0; j<alphabet[index].length; j++){
 80006ec:	7d3b      	ldrb	r3, [r7, #20]
 80006ee:	3301      	adds	r3, #1
 80006f0:	753b      	strb	r3, [r7, #20]
 80006f2:	7dba      	ldrb	r2, [r7, #22]
 80006f4:	4613      	mov	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	4413      	add	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	461a      	mov	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	789b      	ldrb	r3, [r3, #2]
 8000704:	7d3a      	ldrb	r2, [r7, #20]
 8000706:	429a      	cmp	r2, r3
 8000708:	d3d3      	bcc.n	80006b2 <String2Morse+0x82>
			}// end for j
			printf("%c\n\r", alphabet[index].capitalC); //Print detected char (debug)
 800070a:	7dba      	ldrb	r2, [r7, #22]
 800070c:	4613      	mov	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4413      	add	r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	461a      	mov	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	4808      	ldr	r0, [pc, #32]	; (8000740 <String2Morse+0x110>)
 8000720:	f002 fcb2 	bl	8003088 <iprintf>
	for(i=0; i<n; i++){
 8000724:	7dfb      	ldrb	r3, [r7, #23]
 8000726:	3301      	adds	r3, #1
 8000728:	75fb      	strb	r3, [r7, #23]
 800072a:	7dfa      	ldrb	r2, [r7, #23]
 800072c:	7afb      	ldrb	r3, [r7, #11]
 800072e:	429a      	cmp	r2, r3
 8000730:	d38e      	bcc.n	8000650 <String2Morse+0x20>
		}//end if (state == SHOW)

	}//end for i
	return i; // Number of characters processed
 8000732:	7dfb      	ldrb	r3, [r7, #23]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	48000400 	.word	0x48000400
 8000740:	080040c8 	.word	0x080040c8

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b0ac      	sub	sp, #176	; 0xb0
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800074e:	2244      	movs	r2, #68	; 0x44
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fc90 	bl	8003078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2254      	movs	r2, #84	; 0x54
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f002 fc82 	bl	8003078 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000774:	f000 fd90 	bl	8001298 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000778:	4b32      	ldr	r3, [pc, #200]	; (8000844 <SystemClock_Config+0x100>)
 800077a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800077e:	4a31      	ldr	r2, [pc, #196]	; (8000844 <SystemClock_Config+0x100>)
 8000780:	f023 0318 	bic.w	r3, r3, #24
 8000784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000788:	2314      	movs	r3, #20
 800078a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800078c:	2301      	movs	r3, #1
 800078e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000790:	2301      	movs	r3, #1
 8000792:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800079c:	2360      	movs	r3, #96	; 0x60
 800079e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007a8:	2301      	movs	r3, #1
 80007aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80007b4:	2310      	movs	r3, #16
 80007b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007ba:	2307      	movs	r3, #7
 80007bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 fdd5 	bl	8001380 <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007dc:	f000 f8ae 	bl	800093c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2303      	movs	r3, #3
 80007e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007f8:	2101      	movs	r1, #1
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 f9e0 	bl	8001bc0 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000806:	f000 f899 	bl	800093c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800080a:	2302      	movs	r3, #2
 800080c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	4618      	mov	r0, r3
 8000816:	f001 fbd9 	bl	8001fcc <HAL_RCCEx_PeriphCLKConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000820:	f000 f88c 	bl	800093c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000824:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000828:	f000 fd54 	bl	80012d4 <HAL_PWREx_ControlVoltageScaling>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000832:	f000 f883 	bl	800093c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000836:	f001 fdbd 	bl	80023b4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800083a:	bf00      	nop
 800083c:	37b0      	adds	r7, #176	; 0xb0
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000

08000848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 800084e:	4a15      	ldr	r2, [pc, #84]	; (80008a4 <MX_USART2_UART_Init+0x5c>)
 8000850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_USART2_UART_Init+0x58>)
 800088c:	f001 fe94 	bl	80025b8 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000896:	f000 f851 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000098 	.word	0x20000098
 80008a4:	40004400 	.word	0x40004400

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a16      	ldr	r2, [pc, #88]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_GPIO_Init+0x8c>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2108      	movs	r1, #8
 800090a:	480b      	ldr	r0, [pc, #44]	; (8000938 <MX_GPIO_Init+0x90>)
 800090c:	f000 fcac 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000910:	2308      	movs	r3, #8
 8000912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	4619      	mov	r1, r3
 8000926:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_GPIO_Init+0x90>)
 8000928:	f000 fb34 	bl	8000f94 <HAL_GPIO_Init>

}
 800092c:	bf00      	nop
 800092e:	3720      	adds	r7, #32
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40021000 	.word	0x40021000
 8000938:	48000400 	.word	0x48000400

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_MspInit+0x44>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000952:	4a0e      	ldr	r2, [pc, #56]	; (800098c <HAL_MspInit+0x44>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6613      	str	r3, [r2, #96]	; 0x60
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_MspInit+0x44>)
 800095c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_MspInit+0x44>)
 8000968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_MspInit+0x44>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	6593      	str	r3, [r2, #88]	; 0x58
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_MspInit+0x44>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a20      	ldr	r2, [pc, #128]	; (8000a30 <HAL_UART_MspInit+0xa0>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d13a      	bne.n	8000a28 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b2:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <HAL_UART_MspInit+0xa4>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b6:	4a1f      	ldr	r2, [pc, #124]	; (8000a34 <HAL_UART_MspInit+0xa4>)
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009bc:	6593      	str	r3, [r2, #88]	; 0x58
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <HAL_UART_MspInit+0xa4>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <HAL_UART_MspInit+0xa4>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <HAL_UART_MspInit+0xa4>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <HAL_UART_MspInit+0xa4>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80009e2:	2304      	movs	r3, #4
 80009e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f2:	2307      	movs	r3, #7
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a00:	f000 fac8 	bl	8000f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a16:	2303      	movs	r3, #3
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a24:	f000 fab6 	bl	8000f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a28:	bf00      	nop
 8000a2a:	3728      	adds	r7, #40	; 0x28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40004400 	.word	0x40004400
 8000a34:	40021000 	.word	0x40021000

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <NMI_Handler+0x4>

08000a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a84:	f000 f95c 	bl	8000d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8000a98:	2301      	movs	r3, #1
 8000a9a:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa4:	68b9      	ldr	r1, [r7, #8]
 8000aa6:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <_read+0x38>)
 8000aa8:	f001 fe68 	bl	800277c <HAL_UART_Receive>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d002      	beq.n	8000ab8 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	607b      	str	r3, [r7, #4]

	return len;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000098 	.word	0x20000098

08000ac8 <_write>:

int _write(int file, char *ptr, int len)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	4809      	ldr	r0, [pc, #36]	; (8000b08 <_write+0x40>)
 8000ae4:	f001 fdb6 	bl	8002654 <HAL_UART_Transmit>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8000aec:	7dfb      	ldrb	r3, [r7, #23]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d002      	beq.n	8000af8 <_write+0x30>
 8000af2:	7dfb      	ldrb	r3, [r7, #23]
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d101      	bne.n	8000afc <_write+0x34>
	{
		Error_Handler();
 8000af8:	f7ff ff20 	bl	800093c <Error_Handler>
	}

	return len;
 8000afc:	687b      	ldr	r3, [r7, #4]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000098 	.word	0x20000098

08000b0c <_close>:



int _close(int file)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	return -1;
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b34:	605a      	str	r2, [r3, #4]
	return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <_isatty>:

int _isatty(int file)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	return 1;
 8000b4c:	2301      	movs	r3, #1
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
	return 0;
 8000b66:	2300      	movs	r3, #0
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b7c:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <_sbrk+0x5c>)
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <_sbrk+0x60>)
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <_sbrk+0x64>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <_sbrk+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d207      	bcs.n	8000bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba4:	f002 fa30 	bl	8003008 <__errno>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	220c      	movs	r2, #12
 8000bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	e009      	b.n	8000bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <_sbrk+0x64>)
 8000bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20010000 	.word	0x20010000
 8000bd4:	00000400 	.word	0x00000400
 8000bd8:	2000008c 	.word	0x2000008c
 8000bdc:	20000130 	.word	0x20000130

08000be0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <SystemInit+0x5c>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bea:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <SystemInit+0x5c>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <SystemInit+0x60>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a11      	ldr	r2, [pc, #68]	; (8000c40 <SystemInit+0x60>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <SystemInit+0x60>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <SystemInit+0x60>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <SystemInit+0x60>)
 8000c0c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c10:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c14:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <SystemInit+0x60>)
 8000c18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c1c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <SystemInit+0x60>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <SystemInit+0x60>)
 8000c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c28:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <SystemInit+0x60>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00
 8000c40:	40021000 	.word	0x40021000

08000c44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c48:	f7ff ffca 	bl	8000be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c4e:	e003      	b.n	8000c58 <LoopCopyDataInit>

08000c50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c56:	3104      	adds	r1, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c58:	480a      	ldr	r0, [pc, #40]	; (8000c84 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c60:	d3f6      	bcc.n	8000c50 <CopyDataInit>
	ldr	r2, =_sbss
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c64:	e002      	b.n	8000c6c <LoopFillZerobss>

08000c66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c68:	f842 3b04 	str.w	r3, [r2], #4

08000c6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <LoopForever+0x16>)
	cmp	r2, r3
 8000c6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c70:	d3f9      	bcc.n	8000c66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c72:	f002 f9cf 	bl	8003014 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c76:	f7ff fc77 	bl	8000568 <main>

08000c7a <LoopForever>:

LoopForever:
    b LoopForever
 8000c7a:	e7fe      	b.n	8000c7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c7c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000c80:	080041c0 	.word	0x080041c0
	ldr	r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c88:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000c8c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000c90:	20000130 	.word	0x20000130

08000c94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC1_IRQHandler>

08000c96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f943 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 f80e 	bl	8000cc8 <HAL_InitTick>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d002      	beq.n	8000cb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	71fb      	strb	r3, [r7, #7]
 8000cb6:	e001      	b.n	8000cbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cb8:	f7ff fe46 	bl	8000948 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <HAL_InitTick+0x6c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d023      	beq.n	8000d24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <HAL_InitTick+0x70>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <HAL_InitTick+0x6c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f941 	bl	8000f7a <HAL_SYSTICK_Config>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10f      	bne.n	8000d1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d809      	bhi.n	8000d18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f000 f919 	bl	8000f42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_InitTick+0x74>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	e007      	b.n	8000d28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	73fb      	strb	r3, [r7, #15]
 8000d1c:	e004      	b.n	8000d28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	73fb      	strb	r3, [r7, #15]
 8000d22:	e001      	b.n	8000d28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000004 	.word	0x20000004

08000d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x20>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x24>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <HAL_IncTick+0x24>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008
 8000d64:	2000011c 	.word	0x2000011c

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <HAL_GetTick+0x14>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	2000011c 	.word	0x2000011c

08000d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d88:	f7ff ffee 	bl	8000d68 <HAL_GetTick>
 8000d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d98:	d005      	beq.n	8000da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_Delay+0x44>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4413      	add	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000da6:	bf00      	nop
 8000da8:	f7ff ffde 	bl	8000d68 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d8f7      	bhi.n	8000da8 <HAL_Delay+0x28>
  {
  }
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000008 	.word	0x20000008

08000dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de4:	4013      	ands	r3, r2
 8000de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	60d3      	str	r3, [r2, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <__NVIC_GetPriorityGrouping+0x18>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	f003 0307 	and.w	r3, r3, #7
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db0a      	blt.n	8000e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	490c      	ldr	r1, [pc, #48]	; (8000e78 <__NVIC_SetPriority+0x4c>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	440b      	add	r3, r1
 8000e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e54:	e00a      	b.n	8000e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4908      	ldr	r1, [pc, #32]	; (8000e7c <__NVIC_SetPriority+0x50>)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	3b04      	subs	r3, #4
 8000e64:	0112      	lsls	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	440b      	add	r3, r1
 8000e6a:	761a      	strb	r2, [r3, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f1c3 0307 	rsb	r3, r3, #7
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	bf28      	it	cs
 8000e9e:	2304      	movcs	r3, #4
 8000ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d902      	bls.n	8000eb0 <NVIC_EncodePriority+0x30>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3b03      	subs	r3, #3
 8000eae:	e000      	b.n	8000eb2 <NVIC_EncodePriority+0x32>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43d9      	mvns	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	4313      	orrs	r3, r2
         );
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3724      	adds	r7, #36	; 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f7ff ff8e 	bl	8000e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff47 	bl	8000dc8 <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f54:	f7ff ff5c 	bl	8000e10 <__NVIC_GetPriorityGrouping>
 8000f58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ff8e 	bl	8000e80 <NVIC_EncodePriority>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff5d 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffb0 	bl	8000ee8 <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa2:	e148      	b.n	8001236 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	2101      	movs	r1, #1
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 813a 	beq.w	8001230 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d00b      	beq.n	8000fdc <HAL_GPIO_Init+0x48>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d007      	beq.n	8000fdc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fd0:	2b11      	cmp	r3, #17
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b12      	cmp	r3, #18
 8000fda:	d130      	bne.n	800103e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001012:	2201      	movs	r2, #1
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	091b      	lsrs	r3, r3, #4
 8001028:	f003 0201 	and.w	r2, r3, #1
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0xea>
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b12      	cmp	r3, #18
 800107c:	d123      	bne.n	80010c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	220f      	movs	r2, #15
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	691a      	ldr	r2, [r3, #16]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	6939      	ldr	r1, [r7, #16]
 80010c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0203 	and.w	r2, r3, #3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 8094 	beq.w	8001230 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001108:	4b52      	ldr	r3, [pc, #328]	; (8001254 <HAL_GPIO_Init+0x2c0>)
 800110a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110c:	4a51      	ldr	r2, [pc, #324]	; (8001254 <HAL_GPIO_Init+0x2c0>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6613      	str	r3, [r2, #96]	; 0x60
 8001114:	4b4f      	ldr	r3, [pc, #316]	; (8001254 <HAL_GPIO_Init+0x2c0>)
 8001116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001120:	4a4d      	ldr	r2, [pc, #308]	; (8001258 <HAL_GPIO_Init+0x2c4>)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800114a:	d00d      	beq.n	8001168 <HAL_GPIO_Init+0x1d4>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a43      	ldr	r2, [pc, #268]	; (800125c <HAL_GPIO_Init+0x2c8>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d007      	beq.n	8001164 <HAL_GPIO_Init+0x1d0>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a42      	ldr	r2, [pc, #264]	; (8001260 <HAL_GPIO_Init+0x2cc>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d101      	bne.n	8001160 <HAL_GPIO_Init+0x1cc>
 800115c:	2302      	movs	r3, #2
 800115e:	e004      	b.n	800116a <HAL_GPIO_Init+0x1d6>
 8001160:	2307      	movs	r3, #7
 8001162:	e002      	b.n	800116a <HAL_GPIO_Init+0x1d6>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <HAL_GPIO_Init+0x1d6>
 8001168:	2300      	movs	r3, #0
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	f002 0203 	and.w	r2, r2, #3
 8001170:	0092      	lsls	r2, r2, #2
 8001172:	4093      	lsls	r3, r2
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800117a:	4937      	ldr	r1, [pc, #220]	; (8001258 <HAL_GPIO_Init+0x2c4>)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3302      	adds	r3, #2
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001188:	4b36      	ldr	r3, [pc, #216]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011ac:	4a2d      	ldr	r2, [pc, #180]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011b2:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011d6:	4a23      	ldr	r2, [pc, #140]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001200:	4a18      	ldr	r2, [pc, #96]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800122a:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	3301      	adds	r3, #1
 8001234:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	fa22 f303 	lsr.w	r3, r2, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	f47f aeaf 	bne.w	8000fa4 <HAL_GPIO_Init+0x10>
  }
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	371c      	adds	r7, #28
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	40021000 	.word	0x40021000
 8001258:	40010000 	.word	0x40010000
 800125c:	48000400 	.word	0x48000400
 8001260:	48000800 	.word	0x48000800
 8001264:	40010400 	.word	0x40010400

08001268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4613      	mov	r3, r2
 8001276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001278:	787b      	ldrb	r3, [r7, #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001284:	e002      	b.n	800128c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40007000 	.word	0x40007000

080012b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40007000 	.word	0x40007000

080012d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012e2:	d130      	bne.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012e4:	4b23      	ldr	r3, [pc, #140]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012f0:	d038      	beq.n	8001364 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012fa:	4a1e      	ldr	r2, [pc, #120]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001300:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2232      	movs	r2, #50	; 0x32
 8001308:	fb02 f303 	mul.w	r3, r2, r3
 800130c:	4a1b      	ldr	r2, [pc, #108]	; (800137c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800130e:	fba2 2303 	umull	r2, r3, r2, r3
 8001312:	0c9b      	lsrs	r3, r3, #18
 8001314:	3301      	adds	r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001318:	e002      	b.n	8001320 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3b01      	subs	r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800132c:	d102      	bne.n	8001334 <HAL_PWREx_ControlVoltageScaling+0x60>
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1f2      	bne.n	800131a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001340:	d110      	bne.n	8001364 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e00f      	b.n	8001366 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800134e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001352:	d007      	beq.n	8001364 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800135c:	4a05      	ldr	r2, [pc, #20]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001362:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40007000 	.word	0x40007000
 8001378:	20000000 	.word	0x20000000
 800137c:	431bde83 	.word	0x431bde83

08001380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d102      	bne.n	8001394 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	f000 bc11 	b.w	8001bb6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001394:	4ba0      	ldr	r3, [pc, #640]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800139e:	4b9e      	ldr	r3, [pc, #632]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80e4 	beq.w	800157e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d007      	beq.n	80013cc <HAL_RCC_OscConfig+0x4c>
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2b0c      	cmp	r3, #12
 80013c0:	f040 808b 	bne.w	80014da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	f040 8087 	bne.w	80014da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013cc:	4b92      	ldr	r3, [pc, #584]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_OscConfig+0x64>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e3e8      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1a      	ldr	r2, [r3, #32]
 80013e8:	4b8b      	ldr	r3, [pc, #556]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <HAL_RCC_OscConfig+0x7e>
 80013f4:	4b88      	ldr	r3, [pc, #544]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013fc:	e005      	b.n	800140a <HAL_RCC_OscConfig+0x8a>
 80013fe:	4b86      	ldr	r3, [pc, #536]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 8001400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800140a:	4293      	cmp	r3, r2
 800140c:	d223      	bcs.n	8001456 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fd7a 	bl	8001f0c <RCC_SetFlashLatencyFromMSIRange>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e3c9      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001422:	4b7d      	ldr	r3, [pc, #500]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a7c      	ldr	r2, [pc, #496]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 8001428:	f043 0308 	orr.w	r3, r3, #8
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b7a      	ldr	r3, [pc, #488]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	4977      	ldr	r1, [pc, #476]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001440:	4b75      	ldr	r3, [pc, #468]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	4972      	ldr	r1, [pc, #456]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
 8001454:	e025      	b.n	80014a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001456:	4b70      	ldr	r3, [pc, #448]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a6f      	ldr	r2, [pc, #444]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b6d      	ldr	r3, [pc, #436]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	496a      	ldr	r1, [pc, #424]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001474:	4b68      	ldr	r3, [pc, #416]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	4965      	ldr	r1, [pc, #404]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d109      	bne.n	80014a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4618      	mov	r0, r3
 8001494:	f000 fd3a 	bl	8001f0c <RCC_SetFlashLatencyFromMSIRange>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e389      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014a2:	f000 fc6f 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 80014a6:	4602      	mov	r2, r0
 80014a8:	4b5b      	ldr	r3, [pc, #364]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	495a      	ldr	r1, [pc, #360]	; (800161c <HAL_RCC_OscConfig+0x29c>)
 80014b4:	5ccb      	ldrb	r3, [r1, r3]
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	fa22 f303 	lsr.w	r3, r2, r3
 80014be:	4a58      	ldr	r2, [pc, #352]	; (8001620 <HAL_RCC_OscConfig+0x2a0>)
 80014c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014c2:	4b58      	ldr	r3, [pc, #352]	; (8001624 <HAL_RCC_OscConfig+0x2a4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fbfe 	bl	8000cc8 <HAL_InitTick>
 80014cc:	4603      	mov	r3, r0
 80014ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d052      	beq.n	800157c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	e36d      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d032      	beq.n	8001548 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014e2:	4b4d      	ldr	r3, [pc, #308]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a4c      	ldr	r2, [pc, #304]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014ee:	f7ff fc3b 	bl	8000d68 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014f6:	f7ff fc37 	bl	8000d68 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e356      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001508:	4b43      	ldr	r3, [pc, #268]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001514:	4b40      	ldr	r3, [pc, #256]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a3f      	ldr	r2, [pc, #252]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 800151a:	f043 0308 	orr.w	r3, r3, #8
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	493a      	ldr	r1, [pc, #232]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 800152e:	4313      	orrs	r3, r2
 8001530:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001532:	4b39      	ldr	r3, [pc, #228]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	4935      	ldr	r1, [pc, #212]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 8001542:	4313      	orrs	r3, r2
 8001544:	604b      	str	r3, [r1, #4]
 8001546:	e01a      	b.n	800157e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001548:	4b33      	ldr	r3, [pc, #204]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a32      	ldr	r2, [pc, #200]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001554:	f7ff fc08 	bl	8000d68 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800155c:	f7ff fc04 	bl	8000d68 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e323      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800156e:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x1dc>
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800157c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d073      	beq.n	8001672 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	2b08      	cmp	r3, #8
 800158e:	d005      	beq.n	800159c <HAL_RCC_OscConfig+0x21c>
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d10e      	bne.n	80015b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d10b      	bne.n	80015b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159c:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d063      	beq.n	8001670 <HAL_RCC_OscConfig+0x2f0>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d15f      	bne.n	8001670 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e300      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015bc:	d106      	bne.n	80015cc <HAL_RCC_OscConfig+0x24c>
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a15      	ldr	r2, [pc, #84]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 80015c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e01d      	b.n	8001608 <HAL_RCC_OscConfig+0x288>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x270>
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 80015dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 80015e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e00b      	b.n	8001608 <HAL_RCC_OscConfig+0x288>
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a08      	ldr	r2, [pc, #32]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 80015f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a05      	ldr	r2, [pc, #20]	; (8001618 <HAL_RCC_OscConfig+0x298>)
 8001602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d01b      	beq.n	8001648 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fbaa 	bl	8000d68 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001616:	e010      	b.n	800163a <HAL_RCC_OscConfig+0x2ba>
 8001618:	40021000 	.word	0x40021000
 800161c:	080040d0 	.word	0x080040d0
 8001620:	20000000 	.word	0x20000000
 8001624:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff fb9e 	bl	8000d68 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	; 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e2bd      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163a:	4baf      	ldr	r3, [pc, #700]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x2a8>
 8001646:	e014      	b.n	8001672 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001648:	f7ff fb8e 	bl	8000d68 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff fb8a 	bl	8000d68 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	; 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e2a9      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001662:	4ba5      	ldr	r3, [pc, #660]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x2d0>
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d060      	beq.n	8001740 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	2b04      	cmp	r3, #4
 8001682:	d005      	beq.n	8001690 <HAL_RCC_OscConfig+0x310>
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2b0c      	cmp	r3, #12
 8001688:	d119      	bne.n	80016be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2b02      	cmp	r3, #2
 800168e:	d116      	bne.n	80016be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001690:	4b99      	ldr	r3, [pc, #612]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_OscConfig+0x328>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e286      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a8:	4b93      	ldr	r3, [pc, #588]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	061b      	lsls	r3, r3, #24
 80016b6:	4990      	ldr	r1, [pc, #576]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016bc:	e040      	b.n	8001740 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d023      	beq.n	800170e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c6:	4b8c      	ldr	r3, [pc, #560]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a8b      	ldr	r2, [pc, #556]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d2:	f7ff fb49 	bl	8000d68 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016da:	f7ff fb45 	bl	8000d68 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e264      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ec:	4b82      	ldr	r3, [pc, #520]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	4b7f      	ldr	r3, [pc, #508]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	061b      	lsls	r3, r3, #24
 8001706:	497c      	ldr	r1, [pc, #496]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
 800170c:	e018      	b.n	8001740 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170e:	4b7a      	ldr	r3, [pc, #488]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a79      	ldr	r2, [pc, #484]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff fb25 	bl	8000d68 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001722:	f7ff fb21 	bl	8000d68 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e240      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001734:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f0      	bne.n	8001722 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b00      	cmp	r3, #0
 800174a:	d03c      	beq.n	80017c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d01c      	beq.n	800178e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001754:	4b68      	ldr	r3, [pc, #416]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800175a:	4a67      	ldr	r2, [pc, #412]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001764:	f7ff fb00 	bl	8000d68 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176c:	f7ff fafc 	bl	8000d68 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e21b      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800177e:	4b5e      	ldr	r3, [pc, #376]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0ef      	beq.n	800176c <HAL_RCC_OscConfig+0x3ec>
 800178c:	e01b      	b.n	80017c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178e:	4b5a      	ldr	r3, [pc, #360]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001794:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179e:	f7ff fae3 	bl	8000d68 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a6:	f7ff fadf 	bl	8000d68 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e1fe      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017b8:	4b4f      	ldr	r3, [pc, #316]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80017ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1ef      	bne.n	80017a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 80a6 	beq.w	8001920 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d4:	2300      	movs	r3, #0
 80017d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017d8:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80017da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10d      	bne.n	8001800 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e4:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80017e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e8:	4a43      	ldr	r2, [pc, #268]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80017ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ee:	6593      	str	r3, [r2, #88]	; 0x58
 80017f0:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80017f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017fc:	2301      	movs	r3, #1
 80017fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001800:	4b3e      	ldr	r3, [pc, #248]	; (80018fc <HAL_RCC_OscConfig+0x57c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d118      	bne.n	800183e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800180c:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <HAL_RCC_OscConfig+0x57c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a3a      	ldr	r2, [pc, #232]	; (80018fc <HAL_RCC_OscConfig+0x57c>)
 8001812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001816:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001818:	f7ff faa6 	bl	8000d68 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001820:	f7ff faa2 	bl	8000d68 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e1c1      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001832:	4b32      	ldr	r3, [pc, #200]	; (80018fc <HAL_RCC_OscConfig+0x57c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d108      	bne.n	8001858 <HAL_RCC_OscConfig+0x4d8>
 8001846:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184c:	4a2a      	ldr	r2, [pc, #168]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001856:	e024      	b.n	80018a2 <HAL_RCC_OscConfig+0x522>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b05      	cmp	r3, #5
 800185e:	d110      	bne.n	8001882 <HAL_RCC_OscConfig+0x502>
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001866:	4a24      	ldr	r2, [pc, #144]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001870:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001876:	4a20      	ldr	r2, [pc, #128]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001880:	e00f      	b.n	80018a2 <HAL_RCC_OscConfig+0x522>
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001888:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 800188a:	f023 0301 	bic.w	r3, r3, #1
 800188e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 8001894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001898:	4a17      	ldr	r2, [pc, #92]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 800189a:	f023 0304 	bic.w	r3, r3, #4
 800189e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d016      	beq.n	80018d8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018aa:	f7ff fa5d 	bl	8000d68 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018b0:	e00a      	b.n	80018c8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b2:	f7ff fa59 	bl	8000d68 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e176      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_RCC_OscConfig+0x578>)
 80018ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0ed      	beq.n	80018b2 <HAL_RCC_OscConfig+0x532>
 80018d6:	e01a      	b.n	800190e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff fa46 	bl	8000d68 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018de:	e00f      	b.n	8001900 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e0:	f7ff fa42 	bl	8000d68 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d906      	bls.n	8001900 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e15f      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001900:	4baa      	ldr	r3, [pc, #680]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1e8      	bne.n	80018e0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800190e:	7ffb      	ldrb	r3, [r7, #31]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d105      	bne.n	8001920 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001914:	4ba5      	ldr	r3, [pc, #660]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001918:	4aa4      	ldr	r2, [pc, #656]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 800191a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800191e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0320 	and.w	r3, r3, #32
 8001928:	2b00      	cmp	r3, #0
 800192a:	d03c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01c      	beq.n	800196e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001934:	4b9d      	ldr	r3, [pc, #628]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001936:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800193a:	4a9c      	ldr	r2, [pc, #624]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff fa10 	bl	8000d68 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800194c:	f7ff fa0c 	bl	8000d68 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e12b      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800195e:	4b93      	ldr	r3, [pc, #588]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0ef      	beq.n	800194c <HAL_RCC_OscConfig+0x5cc>
 800196c:	e01b      	b.n	80019a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800196e:	4b8f      	ldr	r3, [pc, #572]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001974:	4a8d      	ldr	r2, [pc, #564]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001976:	f023 0301 	bic.w	r3, r3, #1
 800197a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7ff f9f3 	bl	8000d68 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001986:	f7ff f9ef 	bl	8000d68 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e10e      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001998:	4b84      	ldr	r3, [pc, #528]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 800199a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1ef      	bne.n	8001986 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 8102 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	f040 80c5 	bne.w	8001b44 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019ba:	4b7c      	ldr	r3, [pc, #496]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f003 0203 	and.w	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d12c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	3b01      	subs	r3, #1
 80019da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d123      	bne.n	8001a28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d11b      	bne.n	8001a28 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d113      	bne.n	8001a28 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0a:	085b      	lsrs	r3, r3, #1
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d109      	bne.n	8001a28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	3b01      	subs	r3, #1
 8001a22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d067      	beq.n	8001af8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2b0c      	cmp	r3, #12
 8001a2c:	d062      	beq.n	8001af4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a2e:	4b5f      	ldr	r3, [pc, #380]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e0bb      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a3e:	4b5b      	ldr	r3, [pc, #364]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a5a      	ldr	r2, [pc, #360]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001a44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a48:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a4a:	f7ff f98d 	bl	8000d68 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a52:	f7ff f989 	bl	8000d68 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e0a8      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a64:	4b51      	ldr	r3, [pc, #324]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f0      	bne.n	8001a52 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a70:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	4b4e      	ldr	r3, [pc, #312]	; (8001bb0 <HAL_RCC_OscConfig+0x830>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a80:	3a01      	subs	r2, #1
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	4311      	orrs	r1, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a8a:	0212      	lsls	r2, r2, #8
 8001a8c:	4311      	orrs	r1, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a92:	0852      	lsrs	r2, r2, #1
 8001a94:	3a01      	subs	r2, #1
 8001a96:	0552      	lsls	r2, r2, #21
 8001a98:	4311      	orrs	r1, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a9e:	0852      	lsrs	r2, r2, #1
 8001aa0:	3a01      	subs	r2, #1
 8001aa2:	0652      	lsls	r2, r2, #25
 8001aa4:	4311      	orrs	r1, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001aaa:	06d2      	lsls	r2, r2, #27
 8001aac:	430a      	orrs	r2, r1
 8001aae:	493f      	ldr	r1, [pc, #252]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ab4:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a3c      	ldr	r2, [pc, #240]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001abe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ac0:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	4a39      	ldr	r2, [pc, #228]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001acc:	f7ff f94c 	bl	8000d68 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7ff f948 	bl	8000d68 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e067      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	4b31      	ldr	r3, [pc, #196]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001af2:	e05f      	b.n	8001bb4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e05e      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af8:	4b2c      	ldr	r3, [pc, #176]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d157      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b04:	4b29      	ldr	r3, [pc, #164]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a28      	ldr	r2, [pc, #160]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b10:	4b26      	ldr	r3, [pc, #152]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	4a25      	ldr	r2, [pc, #148]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b1c:	f7ff f924 	bl	8000d68 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff f920 	bl	8000d68 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e03f      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b36:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x7a4>
 8001b42:	e037      	b.n	8001bb4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	2b0c      	cmp	r3, #12
 8001b48:	d02d      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a17      	ldr	r2, [pc, #92]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b54:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d105      	bne.n	8001b6e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	4a11      	ldr	r2, [pc, #68]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b68:	f023 0303 	bic.w	r3, r3, #3
 8001b6c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	4a0e      	ldr	r2, [pc, #56]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b74:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7ff f8f3 	bl	8000d68 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b86:	f7ff f8ef 	bl	8000d68 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e00e      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b98:	4b04      	ldr	r3, [pc, #16]	; (8001bac <HAL_RCC_OscConfig+0x82c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1f0      	bne.n	8001b86 <HAL_RCC_OscConfig+0x806>
 8001ba4:	e006      	b.n	8001bb4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e005      	b.n	8001bb6 <HAL_RCC_OscConfig+0x836>
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3720      	adds	r7, #32
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop

08001bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0c8      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b66      	ldr	r3, [pc, #408]	; (8001d70 <HAL_RCC_ClockConfig+0x1b0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d910      	bls.n	8001c04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b63      	ldr	r3, [pc, #396]	; (8001d70 <HAL_RCC_ClockConfig+0x1b0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 0207 	bic.w	r2, r3, #7
 8001bea:	4961      	ldr	r1, [pc, #388]	; (8001d70 <HAL_RCC_ClockConfig+0x1b0>)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b5f      	ldr	r3, [pc, #380]	; (8001d70 <HAL_RCC_ClockConfig+0x1b0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0b0      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d04c      	beq.n	8001caa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d107      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c18:	4b56      	ldr	r3, [pc, #344]	; (8001d74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d121      	bne.n	8001c68 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e09e      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d107      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c30:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d115      	bne.n	8001c68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e092      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d107      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c48:	4b4a      	ldr	r3, [pc, #296]	; (8001d74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e086      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c58:	4b46      	ldr	r3, [pc, #280]	; (8001d74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e07e      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c68:	4b42      	ldr	r3, [pc, #264]	; (8001d74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f023 0203 	bic.w	r2, r3, #3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	493f      	ldr	r1, [pc, #252]	; (8001d74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c7a:	f7ff f875 	bl	8000d68 <HAL_GetTick>
 8001c7e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c82:	f7ff f871 	bl	8000d68 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e066      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c98:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 020c 	and.w	r2, r3, #12
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d1eb      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d008      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb6:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <HAL_RCC_ClockConfig+0x1b4>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	492c      	ldr	r1, [pc, #176]	; (8001d74 <HAL_RCC_ClockConfig+0x1b4>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc8:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <HAL_RCC_ClockConfig+0x1b0>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d210      	bcs.n	8001cf8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <HAL_RCC_ClockConfig+0x1b0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 0207 	bic.w	r2, r3, #7
 8001cde:	4924      	ldr	r1, [pc, #144]	; (8001d70 <HAL_RCC_ClockConfig+0x1b0>)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <HAL_RCC_ClockConfig+0x1b0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e036      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_RCC_ClockConfig+0x1b4>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4918      	ldr	r1, [pc, #96]	; (8001d74 <HAL_RCC_ClockConfig+0x1b4>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d009      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <HAL_RCC_ClockConfig+0x1b4>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4910      	ldr	r1, [pc, #64]	; (8001d74 <HAL_RCC_ClockConfig+0x1b4>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d36:	f000 f825 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <HAL_RCC_ClockConfig+0x1b4>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	490c      	ldr	r1, [pc, #48]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001d48:	5ccb      	ldrb	r3, [r1, r3]
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe ffb4 	bl	8000cc8 <HAL_InitTick>
 8001d60:	4603      	mov	r3, r0
 8001d62:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d64:	7afb      	ldrb	r3, [r7, #11]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40022000 	.word	0x40022000
 8001d74:	40021000 	.word	0x40021000
 8001d78:	080040d0 	.word	0x080040d0
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	20000004 	.word	0x20000004

08001d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b089      	sub	sp, #36	; 0x24
 8001d88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d92:	4b3e      	ldr	r3, [pc, #248]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d9c:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_GetSysClockFreq+0x34>
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	2b0c      	cmp	r3, #12
 8001db0:	d121      	bne.n	8001df6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d11e      	bne.n	8001df6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001db8:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dc4:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dca:	0a1b      	lsrs	r3, r3, #8
 8001dcc:	f003 030f 	and.w	r3, r3, #15
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	e005      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dd4:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001de0:	4a2b      	ldr	r2, [pc, #172]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10d      	bne.n	8001e0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001df4:	e00a      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d102      	bne.n	8001e02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dfc:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	e004      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e08:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	2b0c      	cmp	r3, #12
 8001e10:	d134      	bne.n	8001e7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e12:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d003      	beq.n	8001e2a <HAL_RCC_GetSysClockFreq+0xa6>
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d003      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0xac>
 8001e28:	e005      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e2c:	617b      	str	r3, [r7, #20]
      break;
 8001e2e:	e005      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e32:	617b      	str	r3, [r7, #20]
      break;
 8001e34:	e002      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	617b      	str	r3, [r7, #20]
      break;
 8001e3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	3301      	adds	r3, #1
 8001e48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	0a1b      	lsrs	r3, r3, #8
 8001e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	fb02 f203 	mul.w	r2, r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	0e5b      	lsrs	r3, r3, #25
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e7c:	69bb      	ldr	r3, [r7, #24]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3724      	adds	r7, #36	; 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	080040e8 	.word	0x080040e8
 8001e94:	00f42400 	.word	0x00f42400
 8001e98:	007a1200 	.word	0x007a1200

08001e9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000000 	.word	0x20000000

08001eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001eb8:	f7ff fff0 	bl	8001e9c <HAL_RCC_GetHCLKFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	4904      	ldr	r1, [pc, #16]	; (8001edc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	080040e0 	.word	0x080040e0

08001ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ee4:	f7ff ffda 	bl	8001e9c <HAL_RCC_GetHCLKFreq>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	0adb      	lsrs	r3, r3, #11
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	4904      	ldr	r1, [pc, #16]	; (8001f08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	f003 031f 	and.w	r3, r3, #31
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000
 8001f08:	080040e0 	.word	0x080040e0

08001f0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f14:	2300      	movs	r3, #0
 8001f16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f18:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f24:	f7ff f9c8 	bl	80012b8 <HAL_PWREx_GetVoltageRange>
 8001f28:	6178      	str	r0, [r7, #20]
 8001f2a:	e014      	b.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f2c:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f30:	4a24      	ldr	r2, [pc, #144]	; (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f36:	6593      	str	r3, [r2, #88]	; 0x58
 8001f38:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f44:	f7ff f9b8 	bl	80012b8 <HAL_PWREx_GetVoltageRange>
 8001f48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4e:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f5c:	d10b      	bne.n	8001f76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b80      	cmp	r3, #128	; 0x80
 8001f62:	d919      	bls.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2ba0      	cmp	r3, #160	; 0xa0
 8001f68:	d902      	bls.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	e013      	b.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f70:	2301      	movs	r3, #1
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	e010      	b.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b80      	cmp	r3, #128	; 0x80
 8001f7a:	d902      	bls.n	8001f82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	e00a      	b.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b80      	cmp	r3, #128	; 0x80
 8001f86:	d102      	bne.n	8001f8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f88:	2302      	movs	r3, #2
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	e004      	b.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b70      	cmp	r3, #112	; 0x70
 8001f92:	d101      	bne.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f94:	2301      	movs	r3, #1
 8001f96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f023 0207 	bic.w	r2, r3, #7
 8001fa0:	4909      	ldr	r1, [pc, #36]	; (8001fc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d001      	beq.n	8001fba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40022000 	.word	0x40022000

08001fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fd8:	2300      	movs	r3, #0
 8001fda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d031      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ff0:	d01a      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001ff2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ff6:	d814      	bhi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d009      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ffc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002000:	d10f      	bne.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002002:	4bac      	ldr	r3, [pc, #688]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	4aab      	ldr	r2, [pc, #684]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800200e:	e00c      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3304      	adds	r3, #4
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f9dc 	bl	80023d4 <RCCEx_PLLSAI1_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002020:	e003      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	74fb      	strb	r3, [r7, #19]
      break;
 8002026:	e000      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800202a:	7cfb      	ldrb	r3, [r7, #19]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10b      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002030:	4ba0      	ldr	r3, [pc, #640]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203e:	499d      	ldr	r1, [pc, #628]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002046:	e001      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 8099 	beq.w	800218c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800205e:	4b95      	ldr	r3, [pc, #596]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800206e:	2300      	movs	r3, #0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00d      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002074:	4b8f      	ldr	r3, [pc, #572]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002078:	4a8e      	ldr	r2, [pc, #568]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800207a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207e:	6593      	str	r3, [r2, #88]	; 0x58
 8002080:	4b8c      	ldr	r3, [pc, #560]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208c:	2301      	movs	r3, #1
 800208e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002090:	4b89      	ldr	r3, [pc, #548]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a88      	ldr	r2, [pc, #544]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800209c:	f7fe fe64 	bl	8000d68 <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020a2:	e009      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a4:	f7fe fe60 	bl	8000d68 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d902      	bls.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	74fb      	strb	r3, [r7, #19]
        break;
 80020b6:	e005      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020b8:	4b7f      	ldr	r3, [pc, #508]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0ef      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d155      	bne.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ca:	4b7a      	ldr	r3, [pc, #488]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01e      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d019      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020e6:	4b73      	ldr	r3, [pc, #460]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020f2:	4b70      	ldr	r3, [pc, #448]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f8:	4a6e      	ldr	r2, [pc, #440]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002102:	4b6c      	ldr	r3, [pc, #432]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002108:	4a6a      	ldr	r2, [pc, #424]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800210a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800210e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002112:	4a68      	ldr	r2, [pc, #416]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d016      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7fe fe20 	bl	8000d68 <HAL_GetTick>
 8002128:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800212a:	e00b      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7fe fe1c 	bl	8000d68 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d902      	bls.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	74fb      	strb	r3, [r7, #19]
            break;
 8002142:	e006      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002144:	4b5b      	ldr	r3, [pc, #364]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0ec      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002152:	7cfb      	ldrb	r3, [r7, #19]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10b      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002158:	4b56      	ldr	r3, [pc, #344]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002166:	4953      	ldr	r1, [pc, #332]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800216e:	e004      	b.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	74bb      	strb	r3, [r7, #18]
 8002174:	e001      	b.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002176:	7cfb      	ldrb	r3, [r7, #19]
 8002178:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800217a:	7c7b      	ldrb	r3, [r7, #17]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d105      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002180:	4b4c      	ldr	r3, [pc, #304]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	4a4b      	ldr	r2, [pc, #300]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002198:	4b46      	ldr	r3, [pc, #280]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	f023 0203 	bic.w	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4943      	ldr	r1, [pc, #268]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021ba:	4b3e      	ldr	r3, [pc, #248]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c0:	f023 020c 	bic.w	r2, r3, #12
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	493a      	ldr	r1, [pc, #232]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021dc:	4b35      	ldr	r3, [pc, #212]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	4932      	ldr	r1, [pc, #200]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021fe:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002204:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220c:	4929      	ldr	r1, [pc, #164]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002220:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002226:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	4921      	ldr	r1, [pc, #132]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002242:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002248:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	4918      	ldr	r1, [pc, #96]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4910      	ldr	r1, [pc, #64]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d02c      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	4907      	ldr	r1, [pc, #28]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022a4:	d10a      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022a6:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	4a02      	ldr	r2, [pc, #8]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022b0:	60d3      	str	r3, [r2, #12]
 80022b2:	e015      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3304      	adds	r3, #4
 80022ca:	2101      	movs	r1, #1
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 f881 	bl	80023d4 <RCCEx_PLLSAI1_Config>
 80022d2:	4603      	mov	r3, r0
 80022d4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022d6:	7cfb      	ldrb	r3, [r7, #19]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d028      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022ec:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	492d      	ldr	r1, [pc, #180]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800230a:	d106      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800230c:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4a27      	ldr	r2, [pc, #156]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002316:	60d3      	str	r3, [r2, #12]
 8002318:	e011      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002322:	d10c      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	2101      	movs	r1, #1
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f852 	bl	80023d4 <RCCEx_PLLSAI1_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800233a:	7cfb      	ldrb	r3, [r7, #19]
 800233c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d01c      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800234a:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800234c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002350:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002358:	4915      	ldr	r1, [pc, #84]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002364:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002368:	d10c      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3304      	adds	r3, #4
 800236e:	2102      	movs	r1, #2
 8002370:	4618      	mov	r0, r3
 8002372:	f000 f82f 	bl	80023d4 <RCCEx_PLLSAI1_Config>
 8002376:	4603      	mov	r3, r0
 8002378:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800237a:	7cfb      	ldrb	r3, [r7, #19]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00a      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239e:	4904      	ldr	r1, [pc, #16]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000

080023b4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80023be:	f043 0304 	orr.w	r3, r3, #4
 80023c2:	6013      	str	r3, [r2, #0]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000

080023d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023e2:	4b74      	ldr	r3, [pc, #464]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d018      	beq.n	8002420 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023ee:	4b71      	ldr	r3, [pc, #452]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f003 0203 	and.w	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d10d      	bne.n	800241a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
       ||
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002406:	4b6b      	ldr	r3, [pc, #428]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
       ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d047      	beq.n	80024aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
 800241e:	e044      	b.n	80024aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d018      	beq.n	800245a <RCCEx_PLLSAI1_Config+0x86>
 8002428:	2b03      	cmp	r3, #3
 800242a:	d825      	bhi.n	8002478 <RCCEx_PLLSAI1_Config+0xa4>
 800242c:	2b01      	cmp	r3, #1
 800242e:	d002      	beq.n	8002436 <RCCEx_PLLSAI1_Config+0x62>
 8002430:	2b02      	cmp	r3, #2
 8002432:	d009      	beq.n	8002448 <RCCEx_PLLSAI1_Config+0x74>
 8002434:	e020      	b.n	8002478 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002436:	4b5f      	ldr	r3, [pc, #380]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d11d      	bne.n	800247e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002446:	e01a      	b.n	800247e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002448:	4b5a      	ldr	r3, [pc, #360]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002450:	2b00      	cmp	r3, #0
 8002452:	d116      	bne.n	8002482 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002458:	e013      	b.n	8002482 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800245a:	4b56      	ldr	r3, [pc, #344]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10f      	bne.n	8002486 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002466:	4b53      	ldr	r3, [pc, #332]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002476:	e006      	b.n	8002486 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      break;
 800247c:	e004      	b.n	8002488 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800247e:	bf00      	nop
 8002480:	e002      	b.n	8002488 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002482:	bf00      	nop
 8002484:	e000      	b.n	8002488 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002486:	bf00      	nop
    }

    if(status == HAL_OK)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10d      	bne.n	80024aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800248e:	4b49      	ldr	r3, [pc, #292]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6819      	ldr	r1, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	430b      	orrs	r3, r1
 80024a4:	4943      	ldr	r1, [pc, #268]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d17c      	bne.n	80025aa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024b0:	4b40      	ldr	r3, [pc, #256]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a3f      	ldr	r2, [pc, #252]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024bc:	f7fe fc54 	bl	8000d68 <HAL_GetTick>
 80024c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024c2:	e009      	b.n	80024d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024c4:	f7fe fc50 	bl	8000d68 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d902      	bls.n	80024d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	73fb      	strb	r3, [r7, #15]
        break;
 80024d6:	e005      	b.n	80024e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024d8:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1ef      	bne.n	80024c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d15f      	bne.n	80025aa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d110      	bne.n	8002512 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024f0:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80024f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6892      	ldr	r2, [r2, #8]
 8002500:	0211      	lsls	r1, r2, #8
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68d2      	ldr	r2, [r2, #12]
 8002506:	06d2      	lsls	r2, r2, #27
 8002508:	430a      	orrs	r2, r1
 800250a:	492a      	ldr	r1, [pc, #168]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800250c:	4313      	orrs	r3, r2
 800250e:	610b      	str	r3, [r1, #16]
 8002510:	e027      	b.n	8002562 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d112      	bne.n	800253e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002518:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002520:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6892      	ldr	r2, [r2, #8]
 8002528:	0211      	lsls	r1, r2, #8
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6912      	ldr	r2, [r2, #16]
 800252e:	0852      	lsrs	r2, r2, #1
 8002530:	3a01      	subs	r2, #1
 8002532:	0552      	lsls	r2, r2, #21
 8002534:	430a      	orrs	r2, r1
 8002536:	491f      	ldr	r1, [pc, #124]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002538:	4313      	orrs	r3, r2
 800253a:	610b      	str	r3, [r1, #16]
 800253c:	e011      	b.n	8002562 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002546:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6892      	ldr	r2, [r2, #8]
 800254e:	0211      	lsls	r1, r2, #8
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6952      	ldr	r2, [r2, #20]
 8002554:	0852      	lsrs	r2, r2, #1
 8002556:	3a01      	subs	r2, #1
 8002558:	0652      	lsls	r2, r2, #25
 800255a:	430a      	orrs	r2, r1
 800255c:	4915      	ldr	r1, [pc, #84]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800255e:	4313      	orrs	r3, r2
 8002560:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002562:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a13      	ldr	r2, [pc, #76]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002568:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800256c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256e:	f7fe fbfb 	bl	8000d68 <HAL_GetTick>
 8002572:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002574:	e009      	b.n	800258a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002576:	f7fe fbf7 	bl	8000d68 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d902      	bls.n	800258a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	73fb      	strb	r3, [r7, #15]
          break;
 8002588:	e005      	b.n	8002596 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0ef      	beq.n	8002576 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d106      	bne.n	80025aa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	4903      	ldr	r1, [pc, #12]	; (80025b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000

080025b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e040      	b.n	800264c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe f9d8 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2224      	movs	r2, #36	; 0x24
 80025e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0201 	bic.w	r2, r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f992 	bl	8002920 <UART_SetConfig>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e022      	b.n	800264c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fb92 	bl	8002d38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002622:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002632:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fc19 	bl	8002e7c <UART_CheckIdleState>
 800264a:	4603      	mov	r3, r0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	; 0x28
 8002658:	af02      	add	r7, sp, #8
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	4613      	mov	r3, r2
 8002662:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002668:	2b20      	cmp	r3, #32
 800266a:	f040 8082 	bne.w	8002772 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <HAL_UART_Transmit+0x26>
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e07a      	b.n	8002774 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_UART_Transmit+0x38>
 8002688:	2302      	movs	r3, #2
 800268a:	e073      	b.n	8002774 <HAL_UART_Transmit+0x120>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2221      	movs	r2, #33	; 0x21
 80026a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026a2:	f7fe fb61 	bl	8000d68 <HAL_GetTick>
 80026a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	88fa      	ldrh	r2, [r7, #6]
 80026ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	88fa      	ldrh	r2, [r7, #6]
 80026b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c0:	d108      	bne.n	80026d4 <HAL_UART_Transmit+0x80>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d104      	bne.n	80026d4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	e003      	b.n	80026dc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80026e4:	e02d      	b.n	8002742 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2200      	movs	r2, #0
 80026ee:	2180      	movs	r1, #128	; 0x80
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 fc0c 	bl	8002f0e <UART_WaitOnFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e039      	b.n	8002774 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10b      	bne.n	800271e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	881a      	ldrh	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002712:	b292      	uxth	r2, r2
 8002714:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	3302      	adds	r3, #2
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	e008      	b.n	8002730 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	781a      	ldrb	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	b292      	uxth	r2, r2
 8002728:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3301      	adds	r3, #1
 800272e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002736:	b29b      	uxth	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1cb      	bne.n	80026e6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2200      	movs	r2, #0
 8002756:	2140      	movs	r1, #64	; 0x40
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fbd8 	bl	8002f0e <UART_WaitOnFlagUntilTimeout>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e005      	b.n	8002774 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	e000      	b.n	8002774 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002772:	2302      	movs	r3, #2
  }
}
 8002774:	4618      	mov	r0, r3
 8002776:	3720      	adds	r7, #32
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08a      	sub	sp, #40	; 0x28
 8002780:	af02      	add	r7, sp, #8
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002790:	2b20      	cmp	r3, #32
 8002792:	f040 80bf 	bne.w	8002914 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <HAL_UART_Receive+0x26>
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e0b7      	b.n	8002916 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_UART_Receive+0x38>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e0b0      	b.n	8002916 <HAL_UART_Receive+0x19a>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2222      	movs	r2, #34	; 0x22
 80027c8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027d0:	f7fe faca 	bl	8000d68 <HAL_GetTick>
 80027d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	88fa      	ldrh	r2, [r7, #6]
 80027da:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	88fa      	ldrh	r2, [r7, #6]
 80027e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ee:	d10e      	bne.n	800280e <HAL_UART_Receive+0x92>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <HAL_UART_Receive+0x88>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80027fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002802:	e02d      	b.n	8002860 <HAL_UART_Receive+0xe4>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	22ff      	movs	r2, #255	; 0xff
 8002808:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800280c:	e028      	b.n	8002860 <HAL_UART_Receive+0xe4>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10d      	bne.n	8002832 <HAL_UART_Receive+0xb6>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d104      	bne.n	8002828 <HAL_UART_Receive+0xac>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	22ff      	movs	r2, #255	; 0xff
 8002822:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002826:	e01b      	b.n	8002860 <HAL_UART_Receive+0xe4>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	227f      	movs	r2, #127	; 0x7f
 800282c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002830:	e016      	b.n	8002860 <HAL_UART_Receive+0xe4>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800283a:	d10d      	bne.n	8002858 <HAL_UART_Receive+0xdc>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d104      	bne.n	800284e <HAL_UART_Receive+0xd2>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	227f      	movs	r2, #127	; 0x7f
 8002848:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800284c:	e008      	b.n	8002860 <HAL_UART_Receive+0xe4>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	223f      	movs	r2, #63	; 0x3f
 8002852:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002856:	e003      	b.n	8002860 <HAL_UART_Receive+0xe4>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002866:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002870:	d108      	bne.n	8002884 <HAL_UART_Receive+0x108>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d104      	bne.n	8002884 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	e003      	b.n	800288c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002894:	e033      	b.n	80028fe <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2200      	movs	r2, #0
 800289e:	2120      	movs	r1, #32
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 fb34 	bl	8002f0e <UART_WaitOnFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e032      	b.n	8002916 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10c      	bne.n	80028d0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80028bc:	b29a      	uxth	r2, r3
 80028be:	8a7b      	ldrh	r3, [r7, #18]
 80028c0:	4013      	ands	r3, r2
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	3302      	adds	r3, #2
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	e00d      	b.n	80028ec <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	8a7b      	ldrh	r3, [r7, #18]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	4013      	ands	r3, r2
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3301      	adds	r3, #1
 80028ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1c5      	bne.n	8002896 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2220      	movs	r2, #32
 800290e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	e000      	b.n	8002916 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002914:	2302      	movs	r3, #2
  }
}
 8002916:	4618      	mov	r0, r3
 8002918:	3720      	adds	r7, #32
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	4313      	orrs	r3, r2
 8002942:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	4baf      	ldr	r3, [pc, #700]	; (8002c08 <UART_SetConfig+0x2e8>)
 800294c:	4013      	ands	r3, r2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	69f9      	ldr	r1, [r7, #28]
 8002954:	430b      	orrs	r3, r1
 8002956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4aa4      	ldr	r2, [pc, #656]	; (8002c0c <UART_SetConfig+0x2ec>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d004      	beq.n	8002988 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	69fa      	ldr	r2, [r7, #28]
 8002984:	4313      	orrs	r3, r2
 8002986:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	430a      	orrs	r2, r1
 800299a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a9b      	ldr	r2, [pc, #620]	; (8002c10 <UART_SetConfig+0x2f0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d121      	bne.n	80029ea <UART_SetConfig+0xca>
 80029a6:	4b9b      	ldr	r3, [pc, #620]	; (8002c14 <UART_SetConfig+0x2f4>)
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d817      	bhi.n	80029e4 <UART_SetConfig+0xc4>
 80029b4:	a201      	add	r2, pc, #4	; (adr r2, 80029bc <UART_SetConfig+0x9c>)
 80029b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ba:	bf00      	nop
 80029bc:	080029cd 	.word	0x080029cd
 80029c0:	080029d9 	.word	0x080029d9
 80029c4:	080029d3 	.word	0x080029d3
 80029c8:	080029df 	.word	0x080029df
 80029cc:	2301      	movs	r3, #1
 80029ce:	76fb      	strb	r3, [r7, #27]
 80029d0:	e070      	b.n	8002ab4 <UART_SetConfig+0x194>
 80029d2:	2302      	movs	r3, #2
 80029d4:	76fb      	strb	r3, [r7, #27]
 80029d6:	e06d      	b.n	8002ab4 <UART_SetConfig+0x194>
 80029d8:	2304      	movs	r3, #4
 80029da:	76fb      	strb	r3, [r7, #27]
 80029dc:	e06a      	b.n	8002ab4 <UART_SetConfig+0x194>
 80029de:	2308      	movs	r3, #8
 80029e0:	76fb      	strb	r3, [r7, #27]
 80029e2:	e067      	b.n	8002ab4 <UART_SetConfig+0x194>
 80029e4:	2310      	movs	r3, #16
 80029e6:	76fb      	strb	r3, [r7, #27]
 80029e8:	e064      	b.n	8002ab4 <UART_SetConfig+0x194>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a8a      	ldr	r2, [pc, #552]	; (8002c18 <UART_SetConfig+0x2f8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d132      	bne.n	8002a5a <UART_SetConfig+0x13a>
 80029f4:	4b87      	ldr	r3, [pc, #540]	; (8002c14 <UART_SetConfig+0x2f4>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b0c      	cmp	r3, #12
 8002a00:	d828      	bhi.n	8002a54 <UART_SetConfig+0x134>
 8002a02:	a201      	add	r2, pc, #4	; (adr r2, 8002a08 <UART_SetConfig+0xe8>)
 8002a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a08:	08002a3d 	.word	0x08002a3d
 8002a0c:	08002a55 	.word	0x08002a55
 8002a10:	08002a55 	.word	0x08002a55
 8002a14:	08002a55 	.word	0x08002a55
 8002a18:	08002a49 	.word	0x08002a49
 8002a1c:	08002a55 	.word	0x08002a55
 8002a20:	08002a55 	.word	0x08002a55
 8002a24:	08002a55 	.word	0x08002a55
 8002a28:	08002a43 	.word	0x08002a43
 8002a2c:	08002a55 	.word	0x08002a55
 8002a30:	08002a55 	.word	0x08002a55
 8002a34:	08002a55 	.word	0x08002a55
 8002a38:	08002a4f 	.word	0x08002a4f
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	76fb      	strb	r3, [r7, #27]
 8002a40:	e038      	b.n	8002ab4 <UART_SetConfig+0x194>
 8002a42:	2302      	movs	r3, #2
 8002a44:	76fb      	strb	r3, [r7, #27]
 8002a46:	e035      	b.n	8002ab4 <UART_SetConfig+0x194>
 8002a48:	2304      	movs	r3, #4
 8002a4a:	76fb      	strb	r3, [r7, #27]
 8002a4c:	e032      	b.n	8002ab4 <UART_SetConfig+0x194>
 8002a4e:	2308      	movs	r3, #8
 8002a50:	76fb      	strb	r3, [r7, #27]
 8002a52:	e02f      	b.n	8002ab4 <UART_SetConfig+0x194>
 8002a54:	2310      	movs	r3, #16
 8002a56:	76fb      	strb	r3, [r7, #27]
 8002a58:	e02c      	b.n	8002ab4 <UART_SetConfig+0x194>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a6b      	ldr	r2, [pc, #428]	; (8002c0c <UART_SetConfig+0x2ec>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d125      	bne.n	8002ab0 <UART_SetConfig+0x190>
 8002a64:	4b6b      	ldr	r3, [pc, #428]	; (8002c14 <UART_SetConfig+0x2f4>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a72:	d017      	beq.n	8002aa4 <UART_SetConfig+0x184>
 8002a74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a78:	d817      	bhi.n	8002aaa <UART_SetConfig+0x18a>
 8002a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a7e:	d00b      	beq.n	8002a98 <UART_SetConfig+0x178>
 8002a80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a84:	d811      	bhi.n	8002aaa <UART_SetConfig+0x18a>
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <UART_SetConfig+0x172>
 8002a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8e:	d006      	beq.n	8002a9e <UART_SetConfig+0x17e>
 8002a90:	e00b      	b.n	8002aaa <UART_SetConfig+0x18a>
 8002a92:	2300      	movs	r3, #0
 8002a94:	76fb      	strb	r3, [r7, #27]
 8002a96:	e00d      	b.n	8002ab4 <UART_SetConfig+0x194>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	76fb      	strb	r3, [r7, #27]
 8002a9c:	e00a      	b.n	8002ab4 <UART_SetConfig+0x194>
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	76fb      	strb	r3, [r7, #27]
 8002aa2:	e007      	b.n	8002ab4 <UART_SetConfig+0x194>
 8002aa4:	2308      	movs	r3, #8
 8002aa6:	76fb      	strb	r3, [r7, #27]
 8002aa8:	e004      	b.n	8002ab4 <UART_SetConfig+0x194>
 8002aaa:	2310      	movs	r3, #16
 8002aac:	76fb      	strb	r3, [r7, #27]
 8002aae:	e001      	b.n	8002ab4 <UART_SetConfig+0x194>
 8002ab0:	2310      	movs	r3, #16
 8002ab2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a54      	ldr	r2, [pc, #336]	; (8002c0c <UART_SetConfig+0x2ec>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d173      	bne.n	8002ba6 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002abe:	7efb      	ldrb	r3, [r7, #27]
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d824      	bhi.n	8002b0e <UART_SetConfig+0x1ee>
 8002ac4:	a201      	add	r2, pc, #4	; (adr r2, 8002acc <UART_SetConfig+0x1ac>)
 8002ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aca:	bf00      	nop
 8002acc:	08002af1 	.word	0x08002af1
 8002ad0:	08002b0f 	.word	0x08002b0f
 8002ad4:	08002af9 	.word	0x08002af9
 8002ad8:	08002b0f 	.word	0x08002b0f
 8002adc:	08002aff 	.word	0x08002aff
 8002ae0:	08002b0f 	.word	0x08002b0f
 8002ae4:	08002b0f 	.word	0x08002b0f
 8002ae8:	08002b0f 	.word	0x08002b0f
 8002aec:	08002b07 	.word	0x08002b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002af0:	f7ff f9e0 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 8002af4:	6178      	str	r0, [r7, #20]
        break;
 8002af6:	e00f      	b.n	8002b18 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002af8:	4b48      	ldr	r3, [pc, #288]	; (8002c1c <UART_SetConfig+0x2fc>)
 8002afa:	617b      	str	r3, [r7, #20]
        break;
 8002afc:	e00c      	b.n	8002b18 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002afe:	f7ff f941 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 8002b02:	6178      	str	r0, [r7, #20]
        break;
 8002b04:	e008      	b.n	8002b18 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b0a:	617b      	str	r3, [r7, #20]
        break;
 8002b0c:	e004      	b.n	8002b18 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	76bb      	strb	r3, [r7, #26]
        break;
 8002b16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 80fe 	beq.w	8002d1c <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d305      	bcc.n	8002b3c <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d902      	bls.n	8002b42 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	76bb      	strb	r3, [r7, #26]
 8002b40:	e0ec      	b.n	8002d1c <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f04f 0100 	mov.w	r1, #0
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	020b      	lsls	r3, r1, #8
 8002b54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002b58:	0202      	lsls	r2, r0, #8
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	6849      	ldr	r1, [r1, #4]
 8002b5e:	0849      	lsrs	r1, r1, #1
 8002b60:	4608      	mov	r0, r1
 8002b62:	f04f 0100 	mov.w	r1, #0
 8002b66:	1814      	adds	r4, r2, r0
 8002b68:	eb43 0501 	adc.w	r5, r3, r1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	461a      	mov	r2, r3
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	4620      	mov	r0, r4
 8002b78:	4629      	mov	r1, r5
 8002b7a:	f7fd fb79 	bl	8000270 <__aeabi_uldivmod>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4613      	mov	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b8c:	d308      	bcc.n	8002ba0 <UART_SetConfig+0x280>
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b94:	d204      	bcs.n	8002ba0 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	60da      	str	r2, [r3, #12]
 8002b9e:	e0bd      	b.n	8002d1c <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	76bb      	strb	r3, [r7, #26]
 8002ba4:	e0ba      	b.n	8002d1c <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bae:	d168      	bne.n	8002c82 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8002bb0:	7efb      	ldrb	r3, [r7, #27]
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d834      	bhi.n	8002c20 <UART_SetConfig+0x300>
 8002bb6:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <UART_SetConfig+0x29c>)
 8002bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbc:	08002be1 	.word	0x08002be1
 8002bc0:	08002be9 	.word	0x08002be9
 8002bc4:	08002bf1 	.word	0x08002bf1
 8002bc8:	08002c21 	.word	0x08002c21
 8002bcc:	08002bf7 	.word	0x08002bf7
 8002bd0:	08002c21 	.word	0x08002c21
 8002bd4:	08002c21 	.word	0x08002c21
 8002bd8:	08002c21 	.word	0x08002c21
 8002bdc:	08002bff 	.word	0x08002bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002be0:	f7ff f968 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 8002be4:	6178      	str	r0, [r7, #20]
        break;
 8002be6:	e020      	b.n	8002c2a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002be8:	f7ff f97a 	bl	8001ee0 <HAL_RCC_GetPCLK2Freq>
 8002bec:	6178      	str	r0, [r7, #20]
        break;
 8002bee:	e01c      	b.n	8002c2a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <UART_SetConfig+0x2fc>)
 8002bf2:	617b      	str	r3, [r7, #20]
        break;
 8002bf4:	e019      	b.n	8002c2a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bf6:	f7ff f8c5 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 8002bfa:	6178      	str	r0, [r7, #20]
        break;
 8002bfc:	e015      	b.n	8002c2a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c02:	617b      	str	r3, [r7, #20]
        break;
 8002c04:	e011      	b.n	8002c2a <UART_SetConfig+0x30a>
 8002c06:	bf00      	nop
 8002c08:	efff69f3 	.word	0xefff69f3
 8002c0c:	40008000 	.word	0x40008000
 8002c10:	40013800 	.word	0x40013800
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40004400 	.word	0x40004400
 8002c1c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	76bb      	strb	r3, [r7, #26]
        break;
 8002c28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d075      	beq.n	8002d1c <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	005a      	lsls	r2, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	085b      	lsrs	r3, r3, #1
 8002c3a:	441a      	add	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b0f      	cmp	r3, #15
 8002c4c:	d916      	bls.n	8002c7c <UART_SetConfig+0x35c>
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c54:	d212      	bcs.n	8002c7c <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	f023 030f 	bic.w	r3, r3, #15
 8002c5e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	085b      	lsrs	r3, r3, #1
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	89fb      	ldrh	r3, [r7, #14]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	89fa      	ldrh	r2, [r7, #14]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	e04f      	b.n	8002d1c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	76bb      	strb	r3, [r7, #26]
 8002c80:	e04c      	b.n	8002d1c <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c82:	7efb      	ldrb	r3, [r7, #27]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d828      	bhi.n	8002cda <UART_SetConfig+0x3ba>
 8002c88:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <UART_SetConfig+0x370>)
 8002c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8e:	bf00      	nop
 8002c90:	08002cb5 	.word	0x08002cb5
 8002c94:	08002cbd 	.word	0x08002cbd
 8002c98:	08002cc5 	.word	0x08002cc5
 8002c9c:	08002cdb 	.word	0x08002cdb
 8002ca0:	08002ccb 	.word	0x08002ccb
 8002ca4:	08002cdb 	.word	0x08002cdb
 8002ca8:	08002cdb 	.word	0x08002cdb
 8002cac:	08002cdb 	.word	0x08002cdb
 8002cb0:	08002cd3 	.word	0x08002cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cb4:	f7ff f8fe 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 8002cb8:	6178      	str	r0, [r7, #20]
        break;
 8002cba:	e013      	b.n	8002ce4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cbc:	f7ff f910 	bl	8001ee0 <HAL_RCC_GetPCLK2Freq>
 8002cc0:	6178      	str	r0, [r7, #20]
        break;
 8002cc2:	e00f      	b.n	8002ce4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <UART_SetConfig+0x414>)
 8002cc6:	617b      	str	r3, [r7, #20]
        break;
 8002cc8:	e00c      	b.n	8002ce4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cca:	f7ff f85b 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 8002cce:	6178      	str	r0, [r7, #20]
        break;
 8002cd0:	e008      	b.n	8002ce4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cd6:	617b      	str	r3, [r7, #20]
        break;
 8002cd8:	e004      	b.n	8002ce4 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	76bb      	strb	r3, [r7, #26]
        break;
 8002ce2:	bf00      	nop
    }

    if (pclk != 0U)
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d018      	beq.n	8002d1c <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	085a      	lsrs	r2, r3, #1
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	441a      	add	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	2b0f      	cmp	r3, #15
 8002d04:	d908      	bls.n	8002d18 <UART_SetConfig+0x3f8>
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0c:	d204      	bcs.n	8002d18 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	e001      	b.n	8002d1c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d28:	7ebb      	ldrb	r3, [r7, #26]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3720      	adds	r7, #32
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bdb0      	pop	{r4, r5, r7, pc}
 8002d32:	bf00      	nop
 8002d34:	00f42400 	.word	0x00f42400

08002d38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01a      	beq.n	8002e4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e36:	d10a      	bne.n	8002e4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	605a      	str	r2, [r3, #4]
  }
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e8c:	f7fd ff6c 	bl	8000d68 <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d10e      	bne.n	8002ebe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f82d 	bl	8002f0e <UART_WaitOnFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e023      	b.n	8002f06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d10e      	bne.n	8002eea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f817 	bl	8002f0e <UART_WaitOnFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e00d      	b.n	8002f06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2220      	movs	r2, #32
 8002eee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f1e:	e05e      	b.n	8002fde <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f26:	d05a      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f28:	f7fd ff1e 	bl	8000d68 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d302      	bcc.n	8002f3e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d11b      	bne.n	8002f76 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f4c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e043      	b.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d02c      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f92:	d124      	bne.n	8002fde <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f9c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fac:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0201 	bic.w	r2, r2, #1
 8002fbc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e00f      	b.n	8002ffe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69da      	ldr	r2, [r3, #28]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	bf0c      	ite	eq
 8002fee:	2301      	moveq	r3, #1
 8002ff0:	2300      	movne	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d091      	beq.n	8002f20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <__errno>:
 8003008:	4b01      	ldr	r3, [pc, #4]	; (8003010 <__errno+0x8>)
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	2000000c 	.word	0x2000000c

08003014 <__libc_init_array>:
 8003014:	b570      	push	{r4, r5, r6, lr}
 8003016:	4d0d      	ldr	r5, [pc, #52]	; (800304c <__libc_init_array+0x38>)
 8003018:	4c0d      	ldr	r4, [pc, #52]	; (8003050 <__libc_init_array+0x3c>)
 800301a:	1b64      	subs	r4, r4, r5
 800301c:	10a4      	asrs	r4, r4, #2
 800301e:	2600      	movs	r6, #0
 8003020:	42a6      	cmp	r6, r4
 8003022:	d109      	bne.n	8003038 <__libc_init_array+0x24>
 8003024:	4d0b      	ldr	r5, [pc, #44]	; (8003054 <__libc_init_array+0x40>)
 8003026:	4c0c      	ldr	r4, [pc, #48]	; (8003058 <__libc_init_array+0x44>)
 8003028:	f000 ff84 	bl	8003f34 <_init>
 800302c:	1b64      	subs	r4, r4, r5
 800302e:	10a4      	asrs	r4, r4, #2
 8003030:	2600      	movs	r6, #0
 8003032:	42a6      	cmp	r6, r4
 8003034:	d105      	bne.n	8003042 <__libc_init_array+0x2e>
 8003036:	bd70      	pop	{r4, r5, r6, pc}
 8003038:	f855 3b04 	ldr.w	r3, [r5], #4
 800303c:	4798      	blx	r3
 800303e:	3601      	adds	r6, #1
 8003040:	e7ee      	b.n	8003020 <__libc_init_array+0xc>
 8003042:	f855 3b04 	ldr.w	r3, [r5], #4
 8003046:	4798      	blx	r3
 8003048:	3601      	adds	r6, #1
 800304a:	e7f2      	b.n	8003032 <__libc_init_array+0x1e>
 800304c:	080041b8 	.word	0x080041b8
 8003050:	080041b8 	.word	0x080041b8
 8003054:	080041b8 	.word	0x080041b8
 8003058:	080041bc 	.word	0x080041bc

0800305c <memcpy>:
 800305c:	440a      	add	r2, r1
 800305e:	4291      	cmp	r1, r2
 8003060:	f100 33ff 	add.w	r3, r0, #4294967295
 8003064:	d100      	bne.n	8003068 <memcpy+0xc>
 8003066:	4770      	bx	lr
 8003068:	b510      	push	{r4, lr}
 800306a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800306e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003072:	4291      	cmp	r1, r2
 8003074:	d1f9      	bne.n	800306a <memcpy+0xe>
 8003076:	bd10      	pop	{r4, pc}

08003078 <memset>:
 8003078:	4402      	add	r2, r0
 800307a:	4603      	mov	r3, r0
 800307c:	4293      	cmp	r3, r2
 800307e:	d100      	bne.n	8003082 <memset+0xa>
 8003080:	4770      	bx	lr
 8003082:	f803 1b01 	strb.w	r1, [r3], #1
 8003086:	e7f9      	b.n	800307c <memset+0x4>

08003088 <iprintf>:
 8003088:	b40f      	push	{r0, r1, r2, r3}
 800308a:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <iprintf+0x2c>)
 800308c:	b513      	push	{r0, r1, r4, lr}
 800308e:	681c      	ldr	r4, [r3, #0]
 8003090:	b124      	cbz	r4, 800309c <iprintf+0x14>
 8003092:	69a3      	ldr	r3, [r4, #24]
 8003094:	b913      	cbnz	r3, 800309c <iprintf+0x14>
 8003096:	4620      	mov	r0, r4
 8003098:	f000 f866 	bl	8003168 <__sinit>
 800309c:	ab05      	add	r3, sp, #20
 800309e:	9a04      	ldr	r2, [sp, #16]
 80030a0:	68a1      	ldr	r1, [r4, #8]
 80030a2:	9301      	str	r3, [sp, #4]
 80030a4:	4620      	mov	r0, r4
 80030a6:	f000 f983 	bl	80033b0 <_vfiprintf_r>
 80030aa:	b002      	add	sp, #8
 80030ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030b0:	b004      	add	sp, #16
 80030b2:	4770      	bx	lr
 80030b4:	2000000c 	.word	0x2000000c

080030b8 <std>:
 80030b8:	2300      	movs	r3, #0
 80030ba:	b510      	push	{r4, lr}
 80030bc:	4604      	mov	r4, r0
 80030be:	e9c0 3300 	strd	r3, r3, [r0]
 80030c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030c6:	6083      	str	r3, [r0, #8]
 80030c8:	8181      	strh	r1, [r0, #12]
 80030ca:	6643      	str	r3, [r0, #100]	; 0x64
 80030cc:	81c2      	strh	r2, [r0, #14]
 80030ce:	6183      	str	r3, [r0, #24]
 80030d0:	4619      	mov	r1, r3
 80030d2:	2208      	movs	r2, #8
 80030d4:	305c      	adds	r0, #92	; 0x5c
 80030d6:	f7ff ffcf 	bl	8003078 <memset>
 80030da:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <std+0x38>)
 80030dc:	6263      	str	r3, [r4, #36]	; 0x24
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <std+0x3c>)
 80030e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <std+0x40>)
 80030e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <std+0x44>)
 80030e8:	6224      	str	r4, [r4, #32]
 80030ea:	6323      	str	r3, [r4, #48]	; 0x30
 80030ec:	bd10      	pop	{r4, pc}
 80030ee:	bf00      	nop
 80030f0:	08003959 	.word	0x08003959
 80030f4:	0800397b 	.word	0x0800397b
 80030f8:	080039b3 	.word	0x080039b3
 80030fc:	080039d7 	.word	0x080039d7

08003100 <_cleanup_r>:
 8003100:	4901      	ldr	r1, [pc, #4]	; (8003108 <_cleanup_r+0x8>)
 8003102:	f000 b8af 	b.w	8003264 <_fwalk_reent>
 8003106:	bf00      	nop
 8003108:	08003cb1 	.word	0x08003cb1

0800310c <__sfmoreglue>:
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	1e4a      	subs	r2, r1, #1
 8003110:	2568      	movs	r5, #104	; 0x68
 8003112:	4355      	muls	r5, r2
 8003114:	460e      	mov	r6, r1
 8003116:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800311a:	f000 f8c5 	bl	80032a8 <_malloc_r>
 800311e:	4604      	mov	r4, r0
 8003120:	b140      	cbz	r0, 8003134 <__sfmoreglue+0x28>
 8003122:	2100      	movs	r1, #0
 8003124:	e9c0 1600 	strd	r1, r6, [r0]
 8003128:	300c      	adds	r0, #12
 800312a:	60a0      	str	r0, [r4, #8]
 800312c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003130:	f7ff ffa2 	bl	8003078 <memset>
 8003134:	4620      	mov	r0, r4
 8003136:	bd70      	pop	{r4, r5, r6, pc}

08003138 <__sfp_lock_acquire>:
 8003138:	4801      	ldr	r0, [pc, #4]	; (8003140 <__sfp_lock_acquire+0x8>)
 800313a:	f000 b8b3 	b.w	80032a4 <__retarget_lock_acquire_recursive>
 800313e:	bf00      	nop
 8003140:	20000128 	.word	0x20000128

08003144 <__sfp_lock_release>:
 8003144:	4801      	ldr	r0, [pc, #4]	; (800314c <__sfp_lock_release+0x8>)
 8003146:	f000 b8ae 	b.w	80032a6 <__retarget_lock_release_recursive>
 800314a:	bf00      	nop
 800314c:	20000128 	.word	0x20000128

08003150 <__sinit_lock_acquire>:
 8003150:	4801      	ldr	r0, [pc, #4]	; (8003158 <__sinit_lock_acquire+0x8>)
 8003152:	f000 b8a7 	b.w	80032a4 <__retarget_lock_acquire_recursive>
 8003156:	bf00      	nop
 8003158:	20000123 	.word	0x20000123

0800315c <__sinit_lock_release>:
 800315c:	4801      	ldr	r0, [pc, #4]	; (8003164 <__sinit_lock_release+0x8>)
 800315e:	f000 b8a2 	b.w	80032a6 <__retarget_lock_release_recursive>
 8003162:	bf00      	nop
 8003164:	20000123 	.word	0x20000123

08003168 <__sinit>:
 8003168:	b510      	push	{r4, lr}
 800316a:	4604      	mov	r4, r0
 800316c:	f7ff fff0 	bl	8003150 <__sinit_lock_acquire>
 8003170:	69a3      	ldr	r3, [r4, #24]
 8003172:	b11b      	cbz	r3, 800317c <__sinit+0x14>
 8003174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003178:	f7ff bff0 	b.w	800315c <__sinit_lock_release>
 800317c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003180:	6523      	str	r3, [r4, #80]	; 0x50
 8003182:	4b13      	ldr	r3, [pc, #76]	; (80031d0 <__sinit+0x68>)
 8003184:	4a13      	ldr	r2, [pc, #76]	; (80031d4 <__sinit+0x6c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	62a2      	str	r2, [r4, #40]	; 0x28
 800318a:	42a3      	cmp	r3, r4
 800318c:	bf04      	itt	eq
 800318e:	2301      	moveq	r3, #1
 8003190:	61a3      	streq	r3, [r4, #24]
 8003192:	4620      	mov	r0, r4
 8003194:	f000 f820 	bl	80031d8 <__sfp>
 8003198:	6060      	str	r0, [r4, #4]
 800319a:	4620      	mov	r0, r4
 800319c:	f000 f81c 	bl	80031d8 <__sfp>
 80031a0:	60a0      	str	r0, [r4, #8]
 80031a2:	4620      	mov	r0, r4
 80031a4:	f000 f818 	bl	80031d8 <__sfp>
 80031a8:	2200      	movs	r2, #0
 80031aa:	60e0      	str	r0, [r4, #12]
 80031ac:	2104      	movs	r1, #4
 80031ae:	6860      	ldr	r0, [r4, #4]
 80031b0:	f7ff ff82 	bl	80030b8 <std>
 80031b4:	68a0      	ldr	r0, [r4, #8]
 80031b6:	2201      	movs	r2, #1
 80031b8:	2109      	movs	r1, #9
 80031ba:	f7ff ff7d 	bl	80030b8 <std>
 80031be:	68e0      	ldr	r0, [r4, #12]
 80031c0:	2202      	movs	r2, #2
 80031c2:	2112      	movs	r1, #18
 80031c4:	f7ff ff78 	bl	80030b8 <std>
 80031c8:	2301      	movs	r3, #1
 80031ca:	61a3      	str	r3, [r4, #24]
 80031cc:	e7d2      	b.n	8003174 <__sinit+0xc>
 80031ce:	bf00      	nop
 80031d0:	08004118 	.word	0x08004118
 80031d4:	08003101 	.word	0x08003101

080031d8 <__sfp>:
 80031d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031da:	4607      	mov	r7, r0
 80031dc:	f7ff ffac 	bl	8003138 <__sfp_lock_acquire>
 80031e0:	4b1e      	ldr	r3, [pc, #120]	; (800325c <__sfp+0x84>)
 80031e2:	681e      	ldr	r6, [r3, #0]
 80031e4:	69b3      	ldr	r3, [r6, #24]
 80031e6:	b913      	cbnz	r3, 80031ee <__sfp+0x16>
 80031e8:	4630      	mov	r0, r6
 80031ea:	f7ff ffbd 	bl	8003168 <__sinit>
 80031ee:	3648      	adds	r6, #72	; 0x48
 80031f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	d503      	bpl.n	8003200 <__sfp+0x28>
 80031f8:	6833      	ldr	r3, [r6, #0]
 80031fa:	b30b      	cbz	r3, 8003240 <__sfp+0x68>
 80031fc:	6836      	ldr	r6, [r6, #0]
 80031fe:	e7f7      	b.n	80031f0 <__sfp+0x18>
 8003200:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003204:	b9d5      	cbnz	r5, 800323c <__sfp+0x64>
 8003206:	4b16      	ldr	r3, [pc, #88]	; (8003260 <__sfp+0x88>)
 8003208:	60e3      	str	r3, [r4, #12]
 800320a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800320e:	6665      	str	r5, [r4, #100]	; 0x64
 8003210:	f000 f847 	bl	80032a2 <__retarget_lock_init_recursive>
 8003214:	f7ff ff96 	bl	8003144 <__sfp_lock_release>
 8003218:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800321c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003220:	6025      	str	r5, [r4, #0]
 8003222:	61a5      	str	r5, [r4, #24]
 8003224:	2208      	movs	r2, #8
 8003226:	4629      	mov	r1, r5
 8003228:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800322c:	f7ff ff24 	bl	8003078 <memset>
 8003230:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003234:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003238:	4620      	mov	r0, r4
 800323a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800323c:	3468      	adds	r4, #104	; 0x68
 800323e:	e7d9      	b.n	80031f4 <__sfp+0x1c>
 8003240:	2104      	movs	r1, #4
 8003242:	4638      	mov	r0, r7
 8003244:	f7ff ff62 	bl	800310c <__sfmoreglue>
 8003248:	4604      	mov	r4, r0
 800324a:	6030      	str	r0, [r6, #0]
 800324c:	2800      	cmp	r0, #0
 800324e:	d1d5      	bne.n	80031fc <__sfp+0x24>
 8003250:	f7ff ff78 	bl	8003144 <__sfp_lock_release>
 8003254:	230c      	movs	r3, #12
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	e7ee      	b.n	8003238 <__sfp+0x60>
 800325a:	bf00      	nop
 800325c:	08004118 	.word	0x08004118
 8003260:	ffff0001 	.word	0xffff0001

08003264 <_fwalk_reent>:
 8003264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003268:	4606      	mov	r6, r0
 800326a:	4688      	mov	r8, r1
 800326c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003270:	2700      	movs	r7, #0
 8003272:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003276:	f1b9 0901 	subs.w	r9, r9, #1
 800327a:	d505      	bpl.n	8003288 <_fwalk_reent+0x24>
 800327c:	6824      	ldr	r4, [r4, #0]
 800327e:	2c00      	cmp	r4, #0
 8003280:	d1f7      	bne.n	8003272 <_fwalk_reent+0xe>
 8003282:	4638      	mov	r0, r7
 8003284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003288:	89ab      	ldrh	r3, [r5, #12]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d907      	bls.n	800329e <_fwalk_reent+0x3a>
 800328e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003292:	3301      	adds	r3, #1
 8003294:	d003      	beq.n	800329e <_fwalk_reent+0x3a>
 8003296:	4629      	mov	r1, r5
 8003298:	4630      	mov	r0, r6
 800329a:	47c0      	blx	r8
 800329c:	4307      	orrs	r7, r0
 800329e:	3568      	adds	r5, #104	; 0x68
 80032a0:	e7e9      	b.n	8003276 <_fwalk_reent+0x12>

080032a2 <__retarget_lock_init_recursive>:
 80032a2:	4770      	bx	lr

080032a4 <__retarget_lock_acquire_recursive>:
 80032a4:	4770      	bx	lr

080032a6 <__retarget_lock_release_recursive>:
 80032a6:	4770      	bx	lr

080032a8 <_malloc_r>:
 80032a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032aa:	1ccd      	adds	r5, r1, #3
 80032ac:	f025 0503 	bic.w	r5, r5, #3
 80032b0:	3508      	adds	r5, #8
 80032b2:	2d0c      	cmp	r5, #12
 80032b4:	bf38      	it	cc
 80032b6:	250c      	movcc	r5, #12
 80032b8:	2d00      	cmp	r5, #0
 80032ba:	4606      	mov	r6, r0
 80032bc:	db01      	blt.n	80032c2 <_malloc_r+0x1a>
 80032be:	42a9      	cmp	r1, r5
 80032c0:	d903      	bls.n	80032ca <_malloc_r+0x22>
 80032c2:	230c      	movs	r3, #12
 80032c4:	6033      	str	r3, [r6, #0]
 80032c6:	2000      	movs	r0, #0
 80032c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032ca:	f000 fda3 	bl	8003e14 <__malloc_lock>
 80032ce:	4921      	ldr	r1, [pc, #132]	; (8003354 <_malloc_r+0xac>)
 80032d0:	680a      	ldr	r2, [r1, #0]
 80032d2:	4614      	mov	r4, r2
 80032d4:	b99c      	cbnz	r4, 80032fe <_malloc_r+0x56>
 80032d6:	4f20      	ldr	r7, [pc, #128]	; (8003358 <_malloc_r+0xb0>)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	b923      	cbnz	r3, 80032e6 <_malloc_r+0x3e>
 80032dc:	4621      	mov	r1, r4
 80032de:	4630      	mov	r0, r6
 80032e0:	f000 fb2a 	bl	8003938 <_sbrk_r>
 80032e4:	6038      	str	r0, [r7, #0]
 80032e6:	4629      	mov	r1, r5
 80032e8:	4630      	mov	r0, r6
 80032ea:	f000 fb25 	bl	8003938 <_sbrk_r>
 80032ee:	1c43      	adds	r3, r0, #1
 80032f0:	d123      	bne.n	800333a <_malloc_r+0x92>
 80032f2:	230c      	movs	r3, #12
 80032f4:	6033      	str	r3, [r6, #0]
 80032f6:	4630      	mov	r0, r6
 80032f8:	f000 fd92 	bl	8003e20 <__malloc_unlock>
 80032fc:	e7e3      	b.n	80032c6 <_malloc_r+0x1e>
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	1b5b      	subs	r3, r3, r5
 8003302:	d417      	bmi.n	8003334 <_malloc_r+0x8c>
 8003304:	2b0b      	cmp	r3, #11
 8003306:	d903      	bls.n	8003310 <_malloc_r+0x68>
 8003308:	6023      	str	r3, [r4, #0]
 800330a:	441c      	add	r4, r3
 800330c:	6025      	str	r5, [r4, #0]
 800330e:	e004      	b.n	800331a <_malloc_r+0x72>
 8003310:	6863      	ldr	r3, [r4, #4]
 8003312:	42a2      	cmp	r2, r4
 8003314:	bf0c      	ite	eq
 8003316:	600b      	streq	r3, [r1, #0]
 8003318:	6053      	strne	r3, [r2, #4]
 800331a:	4630      	mov	r0, r6
 800331c:	f000 fd80 	bl	8003e20 <__malloc_unlock>
 8003320:	f104 000b 	add.w	r0, r4, #11
 8003324:	1d23      	adds	r3, r4, #4
 8003326:	f020 0007 	bic.w	r0, r0, #7
 800332a:	1ac2      	subs	r2, r0, r3
 800332c:	d0cc      	beq.n	80032c8 <_malloc_r+0x20>
 800332e:	1a1b      	subs	r3, r3, r0
 8003330:	50a3      	str	r3, [r4, r2]
 8003332:	e7c9      	b.n	80032c8 <_malloc_r+0x20>
 8003334:	4622      	mov	r2, r4
 8003336:	6864      	ldr	r4, [r4, #4]
 8003338:	e7cc      	b.n	80032d4 <_malloc_r+0x2c>
 800333a:	1cc4      	adds	r4, r0, #3
 800333c:	f024 0403 	bic.w	r4, r4, #3
 8003340:	42a0      	cmp	r0, r4
 8003342:	d0e3      	beq.n	800330c <_malloc_r+0x64>
 8003344:	1a21      	subs	r1, r4, r0
 8003346:	4630      	mov	r0, r6
 8003348:	f000 faf6 	bl	8003938 <_sbrk_r>
 800334c:	3001      	adds	r0, #1
 800334e:	d1dd      	bne.n	800330c <_malloc_r+0x64>
 8003350:	e7cf      	b.n	80032f2 <_malloc_r+0x4a>
 8003352:	bf00      	nop
 8003354:	20000090 	.word	0x20000090
 8003358:	20000094 	.word	0x20000094

0800335c <__sfputc_r>:
 800335c:	6893      	ldr	r3, [r2, #8]
 800335e:	3b01      	subs	r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	b410      	push	{r4}
 8003364:	6093      	str	r3, [r2, #8]
 8003366:	da08      	bge.n	800337a <__sfputc_r+0x1e>
 8003368:	6994      	ldr	r4, [r2, #24]
 800336a:	42a3      	cmp	r3, r4
 800336c:	db01      	blt.n	8003372 <__sfputc_r+0x16>
 800336e:	290a      	cmp	r1, #10
 8003370:	d103      	bne.n	800337a <__sfputc_r+0x1e>
 8003372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003376:	f000 bb33 	b.w	80039e0 <__swbuf_r>
 800337a:	6813      	ldr	r3, [r2, #0]
 800337c:	1c58      	adds	r0, r3, #1
 800337e:	6010      	str	r0, [r2, #0]
 8003380:	7019      	strb	r1, [r3, #0]
 8003382:	4608      	mov	r0, r1
 8003384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003388:	4770      	bx	lr

0800338a <__sfputs_r>:
 800338a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338c:	4606      	mov	r6, r0
 800338e:	460f      	mov	r7, r1
 8003390:	4614      	mov	r4, r2
 8003392:	18d5      	adds	r5, r2, r3
 8003394:	42ac      	cmp	r4, r5
 8003396:	d101      	bne.n	800339c <__sfputs_r+0x12>
 8003398:	2000      	movs	r0, #0
 800339a:	e007      	b.n	80033ac <__sfputs_r+0x22>
 800339c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033a0:	463a      	mov	r2, r7
 80033a2:	4630      	mov	r0, r6
 80033a4:	f7ff ffda 	bl	800335c <__sfputc_r>
 80033a8:	1c43      	adds	r3, r0, #1
 80033aa:	d1f3      	bne.n	8003394 <__sfputs_r+0xa>
 80033ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080033b0 <_vfiprintf_r>:
 80033b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033b4:	460d      	mov	r5, r1
 80033b6:	b09d      	sub	sp, #116	; 0x74
 80033b8:	4614      	mov	r4, r2
 80033ba:	4698      	mov	r8, r3
 80033bc:	4606      	mov	r6, r0
 80033be:	b118      	cbz	r0, 80033c8 <_vfiprintf_r+0x18>
 80033c0:	6983      	ldr	r3, [r0, #24]
 80033c2:	b90b      	cbnz	r3, 80033c8 <_vfiprintf_r+0x18>
 80033c4:	f7ff fed0 	bl	8003168 <__sinit>
 80033c8:	4b89      	ldr	r3, [pc, #548]	; (80035f0 <_vfiprintf_r+0x240>)
 80033ca:	429d      	cmp	r5, r3
 80033cc:	d11b      	bne.n	8003406 <_vfiprintf_r+0x56>
 80033ce:	6875      	ldr	r5, [r6, #4]
 80033d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033d2:	07d9      	lsls	r1, r3, #31
 80033d4:	d405      	bmi.n	80033e2 <_vfiprintf_r+0x32>
 80033d6:	89ab      	ldrh	r3, [r5, #12]
 80033d8:	059a      	lsls	r2, r3, #22
 80033da:	d402      	bmi.n	80033e2 <_vfiprintf_r+0x32>
 80033dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033de:	f7ff ff61 	bl	80032a4 <__retarget_lock_acquire_recursive>
 80033e2:	89ab      	ldrh	r3, [r5, #12]
 80033e4:	071b      	lsls	r3, r3, #28
 80033e6:	d501      	bpl.n	80033ec <_vfiprintf_r+0x3c>
 80033e8:	692b      	ldr	r3, [r5, #16]
 80033ea:	b9eb      	cbnz	r3, 8003428 <_vfiprintf_r+0x78>
 80033ec:	4629      	mov	r1, r5
 80033ee:	4630      	mov	r0, r6
 80033f0:	f000 fb5a 	bl	8003aa8 <__swsetup_r>
 80033f4:	b1c0      	cbz	r0, 8003428 <_vfiprintf_r+0x78>
 80033f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033f8:	07dc      	lsls	r4, r3, #31
 80033fa:	d50e      	bpl.n	800341a <_vfiprintf_r+0x6a>
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	b01d      	add	sp, #116	; 0x74
 8003402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003406:	4b7b      	ldr	r3, [pc, #492]	; (80035f4 <_vfiprintf_r+0x244>)
 8003408:	429d      	cmp	r5, r3
 800340a:	d101      	bne.n	8003410 <_vfiprintf_r+0x60>
 800340c:	68b5      	ldr	r5, [r6, #8]
 800340e:	e7df      	b.n	80033d0 <_vfiprintf_r+0x20>
 8003410:	4b79      	ldr	r3, [pc, #484]	; (80035f8 <_vfiprintf_r+0x248>)
 8003412:	429d      	cmp	r5, r3
 8003414:	bf08      	it	eq
 8003416:	68f5      	ldreq	r5, [r6, #12]
 8003418:	e7da      	b.n	80033d0 <_vfiprintf_r+0x20>
 800341a:	89ab      	ldrh	r3, [r5, #12]
 800341c:	0598      	lsls	r0, r3, #22
 800341e:	d4ed      	bmi.n	80033fc <_vfiprintf_r+0x4c>
 8003420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003422:	f7ff ff40 	bl	80032a6 <__retarget_lock_release_recursive>
 8003426:	e7e9      	b.n	80033fc <_vfiprintf_r+0x4c>
 8003428:	2300      	movs	r3, #0
 800342a:	9309      	str	r3, [sp, #36]	; 0x24
 800342c:	2320      	movs	r3, #32
 800342e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003432:	f8cd 800c 	str.w	r8, [sp, #12]
 8003436:	2330      	movs	r3, #48	; 0x30
 8003438:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80035fc <_vfiprintf_r+0x24c>
 800343c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003440:	f04f 0901 	mov.w	r9, #1
 8003444:	4623      	mov	r3, r4
 8003446:	469a      	mov	sl, r3
 8003448:	f813 2b01 	ldrb.w	r2, [r3], #1
 800344c:	b10a      	cbz	r2, 8003452 <_vfiprintf_r+0xa2>
 800344e:	2a25      	cmp	r2, #37	; 0x25
 8003450:	d1f9      	bne.n	8003446 <_vfiprintf_r+0x96>
 8003452:	ebba 0b04 	subs.w	fp, sl, r4
 8003456:	d00b      	beq.n	8003470 <_vfiprintf_r+0xc0>
 8003458:	465b      	mov	r3, fp
 800345a:	4622      	mov	r2, r4
 800345c:	4629      	mov	r1, r5
 800345e:	4630      	mov	r0, r6
 8003460:	f7ff ff93 	bl	800338a <__sfputs_r>
 8003464:	3001      	adds	r0, #1
 8003466:	f000 80aa 	beq.w	80035be <_vfiprintf_r+0x20e>
 800346a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800346c:	445a      	add	r2, fp
 800346e:	9209      	str	r2, [sp, #36]	; 0x24
 8003470:	f89a 3000 	ldrb.w	r3, [sl]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80a2 	beq.w	80035be <_vfiprintf_r+0x20e>
 800347a:	2300      	movs	r3, #0
 800347c:	f04f 32ff 	mov.w	r2, #4294967295
 8003480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003484:	f10a 0a01 	add.w	sl, sl, #1
 8003488:	9304      	str	r3, [sp, #16]
 800348a:	9307      	str	r3, [sp, #28]
 800348c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003490:	931a      	str	r3, [sp, #104]	; 0x68
 8003492:	4654      	mov	r4, sl
 8003494:	2205      	movs	r2, #5
 8003496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800349a:	4858      	ldr	r0, [pc, #352]	; (80035fc <_vfiprintf_r+0x24c>)
 800349c:	f7fc fe98 	bl	80001d0 <memchr>
 80034a0:	9a04      	ldr	r2, [sp, #16]
 80034a2:	b9d8      	cbnz	r0, 80034dc <_vfiprintf_r+0x12c>
 80034a4:	06d1      	lsls	r1, r2, #27
 80034a6:	bf44      	itt	mi
 80034a8:	2320      	movmi	r3, #32
 80034aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034ae:	0713      	lsls	r3, r2, #28
 80034b0:	bf44      	itt	mi
 80034b2:	232b      	movmi	r3, #43	; 0x2b
 80034b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034b8:	f89a 3000 	ldrb.w	r3, [sl]
 80034bc:	2b2a      	cmp	r3, #42	; 0x2a
 80034be:	d015      	beq.n	80034ec <_vfiprintf_r+0x13c>
 80034c0:	9a07      	ldr	r2, [sp, #28]
 80034c2:	4654      	mov	r4, sl
 80034c4:	2000      	movs	r0, #0
 80034c6:	f04f 0c0a 	mov.w	ip, #10
 80034ca:	4621      	mov	r1, r4
 80034cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034d0:	3b30      	subs	r3, #48	; 0x30
 80034d2:	2b09      	cmp	r3, #9
 80034d4:	d94e      	bls.n	8003574 <_vfiprintf_r+0x1c4>
 80034d6:	b1b0      	cbz	r0, 8003506 <_vfiprintf_r+0x156>
 80034d8:	9207      	str	r2, [sp, #28]
 80034da:	e014      	b.n	8003506 <_vfiprintf_r+0x156>
 80034dc:	eba0 0308 	sub.w	r3, r0, r8
 80034e0:	fa09 f303 	lsl.w	r3, r9, r3
 80034e4:	4313      	orrs	r3, r2
 80034e6:	9304      	str	r3, [sp, #16]
 80034e8:	46a2      	mov	sl, r4
 80034ea:	e7d2      	b.n	8003492 <_vfiprintf_r+0xe2>
 80034ec:	9b03      	ldr	r3, [sp, #12]
 80034ee:	1d19      	adds	r1, r3, #4
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	9103      	str	r1, [sp, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bfbb      	ittet	lt
 80034f8:	425b      	neglt	r3, r3
 80034fa:	f042 0202 	orrlt.w	r2, r2, #2
 80034fe:	9307      	strge	r3, [sp, #28]
 8003500:	9307      	strlt	r3, [sp, #28]
 8003502:	bfb8      	it	lt
 8003504:	9204      	strlt	r2, [sp, #16]
 8003506:	7823      	ldrb	r3, [r4, #0]
 8003508:	2b2e      	cmp	r3, #46	; 0x2e
 800350a:	d10c      	bne.n	8003526 <_vfiprintf_r+0x176>
 800350c:	7863      	ldrb	r3, [r4, #1]
 800350e:	2b2a      	cmp	r3, #42	; 0x2a
 8003510:	d135      	bne.n	800357e <_vfiprintf_r+0x1ce>
 8003512:	9b03      	ldr	r3, [sp, #12]
 8003514:	1d1a      	adds	r2, r3, #4
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	9203      	str	r2, [sp, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	bfb8      	it	lt
 800351e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003522:	3402      	adds	r4, #2
 8003524:	9305      	str	r3, [sp, #20]
 8003526:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800360c <_vfiprintf_r+0x25c>
 800352a:	7821      	ldrb	r1, [r4, #0]
 800352c:	2203      	movs	r2, #3
 800352e:	4650      	mov	r0, sl
 8003530:	f7fc fe4e 	bl	80001d0 <memchr>
 8003534:	b140      	cbz	r0, 8003548 <_vfiprintf_r+0x198>
 8003536:	2340      	movs	r3, #64	; 0x40
 8003538:	eba0 000a 	sub.w	r0, r0, sl
 800353c:	fa03 f000 	lsl.w	r0, r3, r0
 8003540:	9b04      	ldr	r3, [sp, #16]
 8003542:	4303      	orrs	r3, r0
 8003544:	3401      	adds	r4, #1
 8003546:	9304      	str	r3, [sp, #16]
 8003548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800354c:	482c      	ldr	r0, [pc, #176]	; (8003600 <_vfiprintf_r+0x250>)
 800354e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003552:	2206      	movs	r2, #6
 8003554:	f7fc fe3c 	bl	80001d0 <memchr>
 8003558:	2800      	cmp	r0, #0
 800355a:	d03f      	beq.n	80035dc <_vfiprintf_r+0x22c>
 800355c:	4b29      	ldr	r3, [pc, #164]	; (8003604 <_vfiprintf_r+0x254>)
 800355e:	bb1b      	cbnz	r3, 80035a8 <_vfiprintf_r+0x1f8>
 8003560:	9b03      	ldr	r3, [sp, #12]
 8003562:	3307      	adds	r3, #7
 8003564:	f023 0307 	bic.w	r3, r3, #7
 8003568:	3308      	adds	r3, #8
 800356a:	9303      	str	r3, [sp, #12]
 800356c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800356e:	443b      	add	r3, r7
 8003570:	9309      	str	r3, [sp, #36]	; 0x24
 8003572:	e767      	b.n	8003444 <_vfiprintf_r+0x94>
 8003574:	fb0c 3202 	mla	r2, ip, r2, r3
 8003578:	460c      	mov	r4, r1
 800357a:	2001      	movs	r0, #1
 800357c:	e7a5      	b.n	80034ca <_vfiprintf_r+0x11a>
 800357e:	2300      	movs	r3, #0
 8003580:	3401      	adds	r4, #1
 8003582:	9305      	str	r3, [sp, #20]
 8003584:	4619      	mov	r1, r3
 8003586:	f04f 0c0a 	mov.w	ip, #10
 800358a:	4620      	mov	r0, r4
 800358c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003590:	3a30      	subs	r2, #48	; 0x30
 8003592:	2a09      	cmp	r2, #9
 8003594:	d903      	bls.n	800359e <_vfiprintf_r+0x1ee>
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0c5      	beq.n	8003526 <_vfiprintf_r+0x176>
 800359a:	9105      	str	r1, [sp, #20]
 800359c:	e7c3      	b.n	8003526 <_vfiprintf_r+0x176>
 800359e:	fb0c 2101 	mla	r1, ip, r1, r2
 80035a2:	4604      	mov	r4, r0
 80035a4:	2301      	movs	r3, #1
 80035a6:	e7f0      	b.n	800358a <_vfiprintf_r+0x1da>
 80035a8:	ab03      	add	r3, sp, #12
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	462a      	mov	r2, r5
 80035ae:	4b16      	ldr	r3, [pc, #88]	; (8003608 <_vfiprintf_r+0x258>)
 80035b0:	a904      	add	r1, sp, #16
 80035b2:	4630      	mov	r0, r6
 80035b4:	f3af 8000 	nop.w
 80035b8:	4607      	mov	r7, r0
 80035ba:	1c78      	adds	r0, r7, #1
 80035bc:	d1d6      	bne.n	800356c <_vfiprintf_r+0x1bc>
 80035be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035c0:	07d9      	lsls	r1, r3, #31
 80035c2:	d405      	bmi.n	80035d0 <_vfiprintf_r+0x220>
 80035c4:	89ab      	ldrh	r3, [r5, #12]
 80035c6:	059a      	lsls	r2, r3, #22
 80035c8:	d402      	bmi.n	80035d0 <_vfiprintf_r+0x220>
 80035ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035cc:	f7ff fe6b 	bl	80032a6 <__retarget_lock_release_recursive>
 80035d0:	89ab      	ldrh	r3, [r5, #12]
 80035d2:	065b      	lsls	r3, r3, #25
 80035d4:	f53f af12 	bmi.w	80033fc <_vfiprintf_r+0x4c>
 80035d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035da:	e711      	b.n	8003400 <_vfiprintf_r+0x50>
 80035dc:	ab03      	add	r3, sp, #12
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	462a      	mov	r2, r5
 80035e2:	4b09      	ldr	r3, [pc, #36]	; (8003608 <_vfiprintf_r+0x258>)
 80035e4:	a904      	add	r1, sp, #16
 80035e6:	4630      	mov	r0, r6
 80035e8:	f000 f880 	bl	80036ec <_printf_i>
 80035ec:	e7e4      	b.n	80035b8 <_vfiprintf_r+0x208>
 80035ee:	bf00      	nop
 80035f0:	0800413c 	.word	0x0800413c
 80035f4:	0800415c 	.word	0x0800415c
 80035f8:	0800411c 	.word	0x0800411c
 80035fc:	0800417c 	.word	0x0800417c
 8003600:	08004186 	.word	0x08004186
 8003604:	00000000 	.word	0x00000000
 8003608:	0800338b 	.word	0x0800338b
 800360c:	08004182 	.word	0x08004182

08003610 <_printf_common>:
 8003610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003614:	4616      	mov	r6, r2
 8003616:	4699      	mov	r9, r3
 8003618:	688a      	ldr	r2, [r1, #8]
 800361a:	690b      	ldr	r3, [r1, #16]
 800361c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003620:	4293      	cmp	r3, r2
 8003622:	bfb8      	it	lt
 8003624:	4613      	movlt	r3, r2
 8003626:	6033      	str	r3, [r6, #0]
 8003628:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800362c:	4607      	mov	r7, r0
 800362e:	460c      	mov	r4, r1
 8003630:	b10a      	cbz	r2, 8003636 <_printf_common+0x26>
 8003632:	3301      	adds	r3, #1
 8003634:	6033      	str	r3, [r6, #0]
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	0699      	lsls	r1, r3, #26
 800363a:	bf42      	ittt	mi
 800363c:	6833      	ldrmi	r3, [r6, #0]
 800363e:	3302      	addmi	r3, #2
 8003640:	6033      	strmi	r3, [r6, #0]
 8003642:	6825      	ldr	r5, [r4, #0]
 8003644:	f015 0506 	ands.w	r5, r5, #6
 8003648:	d106      	bne.n	8003658 <_printf_common+0x48>
 800364a:	f104 0a19 	add.w	sl, r4, #25
 800364e:	68e3      	ldr	r3, [r4, #12]
 8003650:	6832      	ldr	r2, [r6, #0]
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	42ab      	cmp	r3, r5
 8003656:	dc26      	bgt.n	80036a6 <_printf_common+0x96>
 8003658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800365c:	1e13      	subs	r3, r2, #0
 800365e:	6822      	ldr	r2, [r4, #0]
 8003660:	bf18      	it	ne
 8003662:	2301      	movne	r3, #1
 8003664:	0692      	lsls	r2, r2, #26
 8003666:	d42b      	bmi.n	80036c0 <_printf_common+0xb0>
 8003668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800366c:	4649      	mov	r1, r9
 800366e:	4638      	mov	r0, r7
 8003670:	47c0      	blx	r8
 8003672:	3001      	adds	r0, #1
 8003674:	d01e      	beq.n	80036b4 <_printf_common+0xa4>
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	68e5      	ldr	r5, [r4, #12]
 800367a:	6832      	ldr	r2, [r6, #0]
 800367c:	f003 0306 	and.w	r3, r3, #6
 8003680:	2b04      	cmp	r3, #4
 8003682:	bf08      	it	eq
 8003684:	1aad      	subeq	r5, r5, r2
 8003686:	68a3      	ldr	r3, [r4, #8]
 8003688:	6922      	ldr	r2, [r4, #16]
 800368a:	bf0c      	ite	eq
 800368c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003690:	2500      	movne	r5, #0
 8003692:	4293      	cmp	r3, r2
 8003694:	bfc4      	itt	gt
 8003696:	1a9b      	subgt	r3, r3, r2
 8003698:	18ed      	addgt	r5, r5, r3
 800369a:	2600      	movs	r6, #0
 800369c:	341a      	adds	r4, #26
 800369e:	42b5      	cmp	r5, r6
 80036a0:	d11a      	bne.n	80036d8 <_printf_common+0xc8>
 80036a2:	2000      	movs	r0, #0
 80036a4:	e008      	b.n	80036b8 <_printf_common+0xa8>
 80036a6:	2301      	movs	r3, #1
 80036a8:	4652      	mov	r2, sl
 80036aa:	4649      	mov	r1, r9
 80036ac:	4638      	mov	r0, r7
 80036ae:	47c0      	blx	r8
 80036b0:	3001      	adds	r0, #1
 80036b2:	d103      	bne.n	80036bc <_printf_common+0xac>
 80036b4:	f04f 30ff 	mov.w	r0, #4294967295
 80036b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036bc:	3501      	adds	r5, #1
 80036be:	e7c6      	b.n	800364e <_printf_common+0x3e>
 80036c0:	18e1      	adds	r1, r4, r3
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	2030      	movs	r0, #48	; 0x30
 80036c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036ca:	4422      	add	r2, r4
 80036cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036d4:	3302      	adds	r3, #2
 80036d6:	e7c7      	b.n	8003668 <_printf_common+0x58>
 80036d8:	2301      	movs	r3, #1
 80036da:	4622      	mov	r2, r4
 80036dc:	4649      	mov	r1, r9
 80036de:	4638      	mov	r0, r7
 80036e0:	47c0      	blx	r8
 80036e2:	3001      	adds	r0, #1
 80036e4:	d0e6      	beq.n	80036b4 <_printf_common+0xa4>
 80036e6:	3601      	adds	r6, #1
 80036e8:	e7d9      	b.n	800369e <_printf_common+0x8e>
	...

080036ec <_printf_i>:
 80036ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036f0:	460c      	mov	r4, r1
 80036f2:	4691      	mov	r9, r2
 80036f4:	7e27      	ldrb	r7, [r4, #24]
 80036f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036f8:	2f78      	cmp	r7, #120	; 0x78
 80036fa:	4680      	mov	r8, r0
 80036fc:	469a      	mov	sl, r3
 80036fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003702:	d807      	bhi.n	8003714 <_printf_i+0x28>
 8003704:	2f62      	cmp	r7, #98	; 0x62
 8003706:	d80a      	bhi.n	800371e <_printf_i+0x32>
 8003708:	2f00      	cmp	r7, #0
 800370a:	f000 80d8 	beq.w	80038be <_printf_i+0x1d2>
 800370e:	2f58      	cmp	r7, #88	; 0x58
 8003710:	f000 80a3 	beq.w	800385a <_printf_i+0x16e>
 8003714:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800371c:	e03a      	b.n	8003794 <_printf_i+0xa8>
 800371e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003722:	2b15      	cmp	r3, #21
 8003724:	d8f6      	bhi.n	8003714 <_printf_i+0x28>
 8003726:	a001      	add	r0, pc, #4	; (adr r0, 800372c <_printf_i+0x40>)
 8003728:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800372c:	08003785 	.word	0x08003785
 8003730:	08003799 	.word	0x08003799
 8003734:	08003715 	.word	0x08003715
 8003738:	08003715 	.word	0x08003715
 800373c:	08003715 	.word	0x08003715
 8003740:	08003715 	.word	0x08003715
 8003744:	08003799 	.word	0x08003799
 8003748:	08003715 	.word	0x08003715
 800374c:	08003715 	.word	0x08003715
 8003750:	08003715 	.word	0x08003715
 8003754:	08003715 	.word	0x08003715
 8003758:	080038a5 	.word	0x080038a5
 800375c:	080037c9 	.word	0x080037c9
 8003760:	08003887 	.word	0x08003887
 8003764:	08003715 	.word	0x08003715
 8003768:	08003715 	.word	0x08003715
 800376c:	080038c7 	.word	0x080038c7
 8003770:	08003715 	.word	0x08003715
 8003774:	080037c9 	.word	0x080037c9
 8003778:	08003715 	.word	0x08003715
 800377c:	08003715 	.word	0x08003715
 8003780:	0800388f 	.word	0x0800388f
 8003784:	680b      	ldr	r3, [r1, #0]
 8003786:	1d1a      	adds	r2, r3, #4
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	600a      	str	r2, [r1, #0]
 800378c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003794:	2301      	movs	r3, #1
 8003796:	e0a3      	b.n	80038e0 <_printf_i+0x1f4>
 8003798:	6825      	ldr	r5, [r4, #0]
 800379a:	6808      	ldr	r0, [r1, #0]
 800379c:	062e      	lsls	r6, r5, #24
 800379e:	f100 0304 	add.w	r3, r0, #4
 80037a2:	d50a      	bpl.n	80037ba <_printf_i+0xce>
 80037a4:	6805      	ldr	r5, [r0, #0]
 80037a6:	600b      	str	r3, [r1, #0]
 80037a8:	2d00      	cmp	r5, #0
 80037aa:	da03      	bge.n	80037b4 <_printf_i+0xc8>
 80037ac:	232d      	movs	r3, #45	; 0x2d
 80037ae:	426d      	negs	r5, r5
 80037b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037b4:	485e      	ldr	r0, [pc, #376]	; (8003930 <_printf_i+0x244>)
 80037b6:	230a      	movs	r3, #10
 80037b8:	e019      	b.n	80037ee <_printf_i+0x102>
 80037ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80037be:	6805      	ldr	r5, [r0, #0]
 80037c0:	600b      	str	r3, [r1, #0]
 80037c2:	bf18      	it	ne
 80037c4:	b22d      	sxthne	r5, r5
 80037c6:	e7ef      	b.n	80037a8 <_printf_i+0xbc>
 80037c8:	680b      	ldr	r3, [r1, #0]
 80037ca:	6825      	ldr	r5, [r4, #0]
 80037cc:	1d18      	adds	r0, r3, #4
 80037ce:	6008      	str	r0, [r1, #0]
 80037d0:	0628      	lsls	r0, r5, #24
 80037d2:	d501      	bpl.n	80037d8 <_printf_i+0xec>
 80037d4:	681d      	ldr	r5, [r3, #0]
 80037d6:	e002      	b.n	80037de <_printf_i+0xf2>
 80037d8:	0669      	lsls	r1, r5, #25
 80037da:	d5fb      	bpl.n	80037d4 <_printf_i+0xe8>
 80037dc:	881d      	ldrh	r5, [r3, #0]
 80037de:	4854      	ldr	r0, [pc, #336]	; (8003930 <_printf_i+0x244>)
 80037e0:	2f6f      	cmp	r7, #111	; 0x6f
 80037e2:	bf0c      	ite	eq
 80037e4:	2308      	moveq	r3, #8
 80037e6:	230a      	movne	r3, #10
 80037e8:	2100      	movs	r1, #0
 80037ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037ee:	6866      	ldr	r6, [r4, #4]
 80037f0:	60a6      	str	r6, [r4, #8]
 80037f2:	2e00      	cmp	r6, #0
 80037f4:	bfa2      	ittt	ge
 80037f6:	6821      	ldrge	r1, [r4, #0]
 80037f8:	f021 0104 	bicge.w	r1, r1, #4
 80037fc:	6021      	strge	r1, [r4, #0]
 80037fe:	b90d      	cbnz	r5, 8003804 <_printf_i+0x118>
 8003800:	2e00      	cmp	r6, #0
 8003802:	d04d      	beq.n	80038a0 <_printf_i+0x1b4>
 8003804:	4616      	mov	r6, r2
 8003806:	fbb5 f1f3 	udiv	r1, r5, r3
 800380a:	fb03 5711 	mls	r7, r3, r1, r5
 800380e:	5dc7      	ldrb	r7, [r0, r7]
 8003810:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003814:	462f      	mov	r7, r5
 8003816:	42bb      	cmp	r3, r7
 8003818:	460d      	mov	r5, r1
 800381a:	d9f4      	bls.n	8003806 <_printf_i+0x11a>
 800381c:	2b08      	cmp	r3, #8
 800381e:	d10b      	bne.n	8003838 <_printf_i+0x14c>
 8003820:	6823      	ldr	r3, [r4, #0]
 8003822:	07df      	lsls	r7, r3, #31
 8003824:	d508      	bpl.n	8003838 <_printf_i+0x14c>
 8003826:	6923      	ldr	r3, [r4, #16]
 8003828:	6861      	ldr	r1, [r4, #4]
 800382a:	4299      	cmp	r1, r3
 800382c:	bfde      	ittt	le
 800382e:	2330      	movle	r3, #48	; 0x30
 8003830:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003834:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003838:	1b92      	subs	r2, r2, r6
 800383a:	6122      	str	r2, [r4, #16]
 800383c:	f8cd a000 	str.w	sl, [sp]
 8003840:	464b      	mov	r3, r9
 8003842:	aa03      	add	r2, sp, #12
 8003844:	4621      	mov	r1, r4
 8003846:	4640      	mov	r0, r8
 8003848:	f7ff fee2 	bl	8003610 <_printf_common>
 800384c:	3001      	adds	r0, #1
 800384e:	d14c      	bne.n	80038ea <_printf_i+0x1fe>
 8003850:	f04f 30ff 	mov.w	r0, #4294967295
 8003854:	b004      	add	sp, #16
 8003856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800385a:	4835      	ldr	r0, [pc, #212]	; (8003930 <_printf_i+0x244>)
 800385c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	680e      	ldr	r6, [r1, #0]
 8003864:	061f      	lsls	r7, r3, #24
 8003866:	f856 5b04 	ldr.w	r5, [r6], #4
 800386a:	600e      	str	r6, [r1, #0]
 800386c:	d514      	bpl.n	8003898 <_printf_i+0x1ac>
 800386e:	07d9      	lsls	r1, r3, #31
 8003870:	bf44      	itt	mi
 8003872:	f043 0320 	orrmi.w	r3, r3, #32
 8003876:	6023      	strmi	r3, [r4, #0]
 8003878:	b91d      	cbnz	r5, 8003882 <_printf_i+0x196>
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	f023 0320 	bic.w	r3, r3, #32
 8003880:	6023      	str	r3, [r4, #0]
 8003882:	2310      	movs	r3, #16
 8003884:	e7b0      	b.n	80037e8 <_printf_i+0xfc>
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	f043 0320 	orr.w	r3, r3, #32
 800388c:	6023      	str	r3, [r4, #0]
 800388e:	2378      	movs	r3, #120	; 0x78
 8003890:	4828      	ldr	r0, [pc, #160]	; (8003934 <_printf_i+0x248>)
 8003892:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003896:	e7e3      	b.n	8003860 <_printf_i+0x174>
 8003898:	065e      	lsls	r6, r3, #25
 800389a:	bf48      	it	mi
 800389c:	b2ad      	uxthmi	r5, r5
 800389e:	e7e6      	b.n	800386e <_printf_i+0x182>
 80038a0:	4616      	mov	r6, r2
 80038a2:	e7bb      	b.n	800381c <_printf_i+0x130>
 80038a4:	680b      	ldr	r3, [r1, #0]
 80038a6:	6826      	ldr	r6, [r4, #0]
 80038a8:	6960      	ldr	r0, [r4, #20]
 80038aa:	1d1d      	adds	r5, r3, #4
 80038ac:	600d      	str	r5, [r1, #0]
 80038ae:	0635      	lsls	r5, r6, #24
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	d501      	bpl.n	80038b8 <_printf_i+0x1cc>
 80038b4:	6018      	str	r0, [r3, #0]
 80038b6:	e002      	b.n	80038be <_printf_i+0x1d2>
 80038b8:	0671      	lsls	r1, r6, #25
 80038ba:	d5fb      	bpl.n	80038b4 <_printf_i+0x1c8>
 80038bc:	8018      	strh	r0, [r3, #0]
 80038be:	2300      	movs	r3, #0
 80038c0:	6123      	str	r3, [r4, #16]
 80038c2:	4616      	mov	r6, r2
 80038c4:	e7ba      	b.n	800383c <_printf_i+0x150>
 80038c6:	680b      	ldr	r3, [r1, #0]
 80038c8:	1d1a      	adds	r2, r3, #4
 80038ca:	600a      	str	r2, [r1, #0]
 80038cc:	681e      	ldr	r6, [r3, #0]
 80038ce:	6862      	ldr	r2, [r4, #4]
 80038d0:	2100      	movs	r1, #0
 80038d2:	4630      	mov	r0, r6
 80038d4:	f7fc fc7c 	bl	80001d0 <memchr>
 80038d8:	b108      	cbz	r0, 80038de <_printf_i+0x1f2>
 80038da:	1b80      	subs	r0, r0, r6
 80038dc:	6060      	str	r0, [r4, #4]
 80038de:	6863      	ldr	r3, [r4, #4]
 80038e0:	6123      	str	r3, [r4, #16]
 80038e2:	2300      	movs	r3, #0
 80038e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038e8:	e7a8      	b.n	800383c <_printf_i+0x150>
 80038ea:	6923      	ldr	r3, [r4, #16]
 80038ec:	4632      	mov	r2, r6
 80038ee:	4649      	mov	r1, r9
 80038f0:	4640      	mov	r0, r8
 80038f2:	47d0      	blx	sl
 80038f4:	3001      	adds	r0, #1
 80038f6:	d0ab      	beq.n	8003850 <_printf_i+0x164>
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	079b      	lsls	r3, r3, #30
 80038fc:	d413      	bmi.n	8003926 <_printf_i+0x23a>
 80038fe:	68e0      	ldr	r0, [r4, #12]
 8003900:	9b03      	ldr	r3, [sp, #12]
 8003902:	4298      	cmp	r0, r3
 8003904:	bfb8      	it	lt
 8003906:	4618      	movlt	r0, r3
 8003908:	e7a4      	b.n	8003854 <_printf_i+0x168>
 800390a:	2301      	movs	r3, #1
 800390c:	4632      	mov	r2, r6
 800390e:	4649      	mov	r1, r9
 8003910:	4640      	mov	r0, r8
 8003912:	47d0      	blx	sl
 8003914:	3001      	adds	r0, #1
 8003916:	d09b      	beq.n	8003850 <_printf_i+0x164>
 8003918:	3501      	adds	r5, #1
 800391a:	68e3      	ldr	r3, [r4, #12]
 800391c:	9903      	ldr	r1, [sp, #12]
 800391e:	1a5b      	subs	r3, r3, r1
 8003920:	42ab      	cmp	r3, r5
 8003922:	dcf2      	bgt.n	800390a <_printf_i+0x21e>
 8003924:	e7eb      	b.n	80038fe <_printf_i+0x212>
 8003926:	2500      	movs	r5, #0
 8003928:	f104 0619 	add.w	r6, r4, #25
 800392c:	e7f5      	b.n	800391a <_printf_i+0x22e>
 800392e:	bf00      	nop
 8003930:	0800418d 	.word	0x0800418d
 8003934:	0800419e 	.word	0x0800419e

08003938 <_sbrk_r>:
 8003938:	b538      	push	{r3, r4, r5, lr}
 800393a:	4d06      	ldr	r5, [pc, #24]	; (8003954 <_sbrk_r+0x1c>)
 800393c:	2300      	movs	r3, #0
 800393e:	4604      	mov	r4, r0
 8003940:	4608      	mov	r0, r1
 8003942:	602b      	str	r3, [r5, #0]
 8003944:	f7fd f916 	bl	8000b74 <_sbrk>
 8003948:	1c43      	adds	r3, r0, #1
 800394a:	d102      	bne.n	8003952 <_sbrk_r+0x1a>
 800394c:	682b      	ldr	r3, [r5, #0]
 800394e:	b103      	cbz	r3, 8003952 <_sbrk_r+0x1a>
 8003950:	6023      	str	r3, [r4, #0]
 8003952:	bd38      	pop	{r3, r4, r5, pc}
 8003954:	2000012c 	.word	0x2000012c

08003958 <__sread>:
 8003958:	b510      	push	{r4, lr}
 800395a:	460c      	mov	r4, r1
 800395c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003960:	f000 fab4 	bl	8003ecc <_read_r>
 8003964:	2800      	cmp	r0, #0
 8003966:	bfab      	itete	ge
 8003968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800396a:	89a3      	ldrhlt	r3, [r4, #12]
 800396c:	181b      	addge	r3, r3, r0
 800396e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003972:	bfac      	ite	ge
 8003974:	6563      	strge	r3, [r4, #84]	; 0x54
 8003976:	81a3      	strhlt	r3, [r4, #12]
 8003978:	bd10      	pop	{r4, pc}

0800397a <__swrite>:
 800397a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800397e:	461f      	mov	r7, r3
 8003980:	898b      	ldrh	r3, [r1, #12]
 8003982:	05db      	lsls	r3, r3, #23
 8003984:	4605      	mov	r5, r0
 8003986:	460c      	mov	r4, r1
 8003988:	4616      	mov	r6, r2
 800398a:	d505      	bpl.n	8003998 <__swrite+0x1e>
 800398c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003990:	2302      	movs	r3, #2
 8003992:	2200      	movs	r2, #0
 8003994:	f000 f9c8 	bl	8003d28 <_lseek_r>
 8003998:	89a3      	ldrh	r3, [r4, #12]
 800399a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800399e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039a2:	81a3      	strh	r3, [r4, #12]
 80039a4:	4632      	mov	r2, r6
 80039a6:	463b      	mov	r3, r7
 80039a8:	4628      	mov	r0, r5
 80039aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039ae:	f000 b869 	b.w	8003a84 <_write_r>

080039b2 <__sseek>:
 80039b2:	b510      	push	{r4, lr}
 80039b4:	460c      	mov	r4, r1
 80039b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039ba:	f000 f9b5 	bl	8003d28 <_lseek_r>
 80039be:	1c43      	adds	r3, r0, #1
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	bf15      	itete	ne
 80039c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80039c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80039ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80039ce:	81a3      	strheq	r3, [r4, #12]
 80039d0:	bf18      	it	ne
 80039d2:	81a3      	strhne	r3, [r4, #12]
 80039d4:	bd10      	pop	{r4, pc}

080039d6 <__sclose>:
 80039d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039da:	f000 b8d3 	b.w	8003b84 <_close_r>
	...

080039e0 <__swbuf_r>:
 80039e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e2:	460e      	mov	r6, r1
 80039e4:	4614      	mov	r4, r2
 80039e6:	4605      	mov	r5, r0
 80039e8:	b118      	cbz	r0, 80039f2 <__swbuf_r+0x12>
 80039ea:	6983      	ldr	r3, [r0, #24]
 80039ec:	b90b      	cbnz	r3, 80039f2 <__swbuf_r+0x12>
 80039ee:	f7ff fbbb 	bl	8003168 <__sinit>
 80039f2:	4b21      	ldr	r3, [pc, #132]	; (8003a78 <__swbuf_r+0x98>)
 80039f4:	429c      	cmp	r4, r3
 80039f6:	d12b      	bne.n	8003a50 <__swbuf_r+0x70>
 80039f8:	686c      	ldr	r4, [r5, #4]
 80039fa:	69a3      	ldr	r3, [r4, #24]
 80039fc:	60a3      	str	r3, [r4, #8]
 80039fe:	89a3      	ldrh	r3, [r4, #12]
 8003a00:	071a      	lsls	r2, r3, #28
 8003a02:	d52f      	bpl.n	8003a64 <__swbuf_r+0x84>
 8003a04:	6923      	ldr	r3, [r4, #16]
 8003a06:	b36b      	cbz	r3, 8003a64 <__swbuf_r+0x84>
 8003a08:	6923      	ldr	r3, [r4, #16]
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	1ac0      	subs	r0, r0, r3
 8003a0e:	6963      	ldr	r3, [r4, #20]
 8003a10:	b2f6      	uxtb	r6, r6
 8003a12:	4283      	cmp	r3, r0
 8003a14:	4637      	mov	r7, r6
 8003a16:	dc04      	bgt.n	8003a22 <__swbuf_r+0x42>
 8003a18:	4621      	mov	r1, r4
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	f000 f948 	bl	8003cb0 <_fflush_r>
 8003a20:	bb30      	cbnz	r0, 8003a70 <__swbuf_r+0x90>
 8003a22:	68a3      	ldr	r3, [r4, #8]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	60a3      	str	r3, [r4, #8]
 8003a28:	6823      	ldr	r3, [r4, #0]
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	6022      	str	r2, [r4, #0]
 8003a2e:	701e      	strb	r6, [r3, #0]
 8003a30:	6963      	ldr	r3, [r4, #20]
 8003a32:	3001      	adds	r0, #1
 8003a34:	4283      	cmp	r3, r0
 8003a36:	d004      	beq.n	8003a42 <__swbuf_r+0x62>
 8003a38:	89a3      	ldrh	r3, [r4, #12]
 8003a3a:	07db      	lsls	r3, r3, #31
 8003a3c:	d506      	bpl.n	8003a4c <__swbuf_r+0x6c>
 8003a3e:	2e0a      	cmp	r6, #10
 8003a40:	d104      	bne.n	8003a4c <__swbuf_r+0x6c>
 8003a42:	4621      	mov	r1, r4
 8003a44:	4628      	mov	r0, r5
 8003a46:	f000 f933 	bl	8003cb0 <_fflush_r>
 8003a4a:	b988      	cbnz	r0, 8003a70 <__swbuf_r+0x90>
 8003a4c:	4638      	mov	r0, r7
 8003a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <__swbuf_r+0x9c>)
 8003a52:	429c      	cmp	r4, r3
 8003a54:	d101      	bne.n	8003a5a <__swbuf_r+0x7a>
 8003a56:	68ac      	ldr	r4, [r5, #8]
 8003a58:	e7cf      	b.n	80039fa <__swbuf_r+0x1a>
 8003a5a:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <__swbuf_r+0xa0>)
 8003a5c:	429c      	cmp	r4, r3
 8003a5e:	bf08      	it	eq
 8003a60:	68ec      	ldreq	r4, [r5, #12]
 8003a62:	e7ca      	b.n	80039fa <__swbuf_r+0x1a>
 8003a64:	4621      	mov	r1, r4
 8003a66:	4628      	mov	r0, r5
 8003a68:	f000 f81e 	bl	8003aa8 <__swsetup_r>
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	d0cb      	beq.n	8003a08 <__swbuf_r+0x28>
 8003a70:	f04f 37ff 	mov.w	r7, #4294967295
 8003a74:	e7ea      	b.n	8003a4c <__swbuf_r+0x6c>
 8003a76:	bf00      	nop
 8003a78:	0800413c 	.word	0x0800413c
 8003a7c:	0800415c 	.word	0x0800415c
 8003a80:	0800411c 	.word	0x0800411c

08003a84 <_write_r>:
 8003a84:	b538      	push	{r3, r4, r5, lr}
 8003a86:	4d07      	ldr	r5, [pc, #28]	; (8003aa4 <_write_r+0x20>)
 8003a88:	4604      	mov	r4, r0
 8003a8a:	4608      	mov	r0, r1
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	2200      	movs	r2, #0
 8003a90:	602a      	str	r2, [r5, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	f7fd f818 	bl	8000ac8 <_write>
 8003a98:	1c43      	adds	r3, r0, #1
 8003a9a:	d102      	bne.n	8003aa2 <_write_r+0x1e>
 8003a9c:	682b      	ldr	r3, [r5, #0]
 8003a9e:	b103      	cbz	r3, 8003aa2 <_write_r+0x1e>
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	bd38      	pop	{r3, r4, r5, pc}
 8003aa4:	2000012c 	.word	0x2000012c

08003aa8 <__swsetup_r>:
 8003aa8:	4b32      	ldr	r3, [pc, #200]	; (8003b74 <__swsetup_r+0xcc>)
 8003aaa:	b570      	push	{r4, r5, r6, lr}
 8003aac:	681d      	ldr	r5, [r3, #0]
 8003aae:	4606      	mov	r6, r0
 8003ab0:	460c      	mov	r4, r1
 8003ab2:	b125      	cbz	r5, 8003abe <__swsetup_r+0x16>
 8003ab4:	69ab      	ldr	r3, [r5, #24]
 8003ab6:	b913      	cbnz	r3, 8003abe <__swsetup_r+0x16>
 8003ab8:	4628      	mov	r0, r5
 8003aba:	f7ff fb55 	bl	8003168 <__sinit>
 8003abe:	4b2e      	ldr	r3, [pc, #184]	; (8003b78 <__swsetup_r+0xd0>)
 8003ac0:	429c      	cmp	r4, r3
 8003ac2:	d10f      	bne.n	8003ae4 <__swsetup_r+0x3c>
 8003ac4:	686c      	ldr	r4, [r5, #4]
 8003ac6:	89a3      	ldrh	r3, [r4, #12]
 8003ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003acc:	0719      	lsls	r1, r3, #28
 8003ace:	d42c      	bmi.n	8003b2a <__swsetup_r+0x82>
 8003ad0:	06dd      	lsls	r5, r3, #27
 8003ad2:	d411      	bmi.n	8003af8 <__swsetup_r+0x50>
 8003ad4:	2309      	movs	r3, #9
 8003ad6:	6033      	str	r3, [r6, #0]
 8003ad8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003adc:	81a3      	strh	r3, [r4, #12]
 8003ade:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae2:	e03e      	b.n	8003b62 <__swsetup_r+0xba>
 8003ae4:	4b25      	ldr	r3, [pc, #148]	; (8003b7c <__swsetup_r+0xd4>)
 8003ae6:	429c      	cmp	r4, r3
 8003ae8:	d101      	bne.n	8003aee <__swsetup_r+0x46>
 8003aea:	68ac      	ldr	r4, [r5, #8]
 8003aec:	e7eb      	b.n	8003ac6 <__swsetup_r+0x1e>
 8003aee:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <__swsetup_r+0xd8>)
 8003af0:	429c      	cmp	r4, r3
 8003af2:	bf08      	it	eq
 8003af4:	68ec      	ldreq	r4, [r5, #12]
 8003af6:	e7e6      	b.n	8003ac6 <__swsetup_r+0x1e>
 8003af8:	0758      	lsls	r0, r3, #29
 8003afa:	d512      	bpl.n	8003b22 <__swsetup_r+0x7a>
 8003afc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003afe:	b141      	cbz	r1, 8003b12 <__swsetup_r+0x6a>
 8003b00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b04:	4299      	cmp	r1, r3
 8003b06:	d002      	beq.n	8003b0e <__swsetup_r+0x66>
 8003b08:	4630      	mov	r0, r6
 8003b0a:	f000 f98f 	bl	8003e2c <_free_r>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	6363      	str	r3, [r4, #52]	; 0x34
 8003b12:	89a3      	ldrh	r3, [r4, #12]
 8003b14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b18:	81a3      	strh	r3, [r4, #12]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	6063      	str	r3, [r4, #4]
 8003b1e:	6923      	ldr	r3, [r4, #16]
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	89a3      	ldrh	r3, [r4, #12]
 8003b24:	f043 0308 	orr.w	r3, r3, #8
 8003b28:	81a3      	strh	r3, [r4, #12]
 8003b2a:	6923      	ldr	r3, [r4, #16]
 8003b2c:	b94b      	cbnz	r3, 8003b42 <__swsetup_r+0x9a>
 8003b2e:	89a3      	ldrh	r3, [r4, #12]
 8003b30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b38:	d003      	beq.n	8003b42 <__swsetup_r+0x9a>
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	4630      	mov	r0, r6
 8003b3e:	f000 f929 	bl	8003d94 <__smakebuf_r>
 8003b42:	89a0      	ldrh	r0, [r4, #12]
 8003b44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b48:	f010 0301 	ands.w	r3, r0, #1
 8003b4c:	d00a      	beq.n	8003b64 <__swsetup_r+0xbc>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60a3      	str	r3, [r4, #8]
 8003b52:	6963      	ldr	r3, [r4, #20]
 8003b54:	425b      	negs	r3, r3
 8003b56:	61a3      	str	r3, [r4, #24]
 8003b58:	6923      	ldr	r3, [r4, #16]
 8003b5a:	b943      	cbnz	r3, 8003b6e <__swsetup_r+0xc6>
 8003b5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b60:	d1ba      	bne.n	8003ad8 <__swsetup_r+0x30>
 8003b62:	bd70      	pop	{r4, r5, r6, pc}
 8003b64:	0781      	lsls	r1, r0, #30
 8003b66:	bf58      	it	pl
 8003b68:	6963      	ldrpl	r3, [r4, #20]
 8003b6a:	60a3      	str	r3, [r4, #8]
 8003b6c:	e7f4      	b.n	8003b58 <__swsetup_r+0xb0>
 8003b6e:	2000      	movs	r0, #0
 8003b70:	e7f7      	b.n	8003b62 <__swsetup_r+0xba>
 8003b72:	bf00      	nop
 8003b74:	2000000c 	.word	0x2000000c
 8003b78:	0800413c 	.word	0x0800413c
 8003b7c:	0800415c 	.word	0x0800415c
 8003b80:	0800411c 	.word	0x0800411c

08003b84 <_close_r>:
 8003b84:	b538      	push	{r3, r4, r5, lr}
 8003b86:	4d06      	ldr	r5, [pc, #24]	; (8003ba0 <_close_r+0x1c>)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	4608      	mov	r0, r1
 8003b8e:	602b      	str	r3, [r5, #0]
 8003b90:	f7fc ffbc 	bl	8000b0c <_close>
 8003b94:	1c43      	adds	r3, r0, #1
 8003b96:	d102      	bne.n	8003b9e <_close_r+0x1a>
 8003b98:	682b      	ldr	r3, [r5, #0]
 8003b9a:	b103      	cbz	r3, 8003b9e <_close_r+0x1a>
 8003b9c:	6023      	str	r3, [r4, #0]
 8003b9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ba0:	2000012c 	.word	0x2000012c

08003ba4 <__sflush_r>:
 8003ba4:	898a      	ldrh	r2, [r1, #12]
 8003ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003baa:	4605      	mov	r5, r0
 8003bac:	0710      	lsls	r0, r2, #28
 8003bae:	460c      	mov	r4, r1
 8003bb0:	d458      	bmi.n	8003c64 <__sflush_r+0xc0>
 8003bb2:	684b      	ldr	r3, [r1, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	dc05      	bgt.n	8003bc4 <__sflush_r+0x20>
 8003bb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	dc02      	bgt.n	8003bc4 <__sflush_r+0x20>
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bc6:	2e00      	cmp	r6, #0
 8003bc8:	d0f9      	beq.n	8003bbe <__sflush_r+0x1a>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003bd0:	682f      	ldr	r7, [r5, #0]
 8003bd2:	602b      	str	r3, [r5, #0]
 8003bd4:	d032      	beq.n	8003c3c <__sflush_r+0x98>
 8003bd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	075a      	lsls	r2, r3, #29
 8003bdc:	d505      	bpl.n	8003bea <__sflush_r+0x46>
 8003bde:	6863      	ldr	r3, [r4, #4]
 8003be0:	1ac0      	subs	r0, r0, r3
 8003be2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003be4:	b10b      	cbz	r3, 8003bea <__sflush_r+0x46>
 8003be6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003be8:	1ac0      	subs	r0, r0, r3
 8003bea:	2300      	movs	r3, #0
 8003bec:	4602      	mov	r2, r0
 8003bee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bf0:	6a21      	ldr	r1, [r4, #32]
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	47b0      	blx	r6
 8003bf6:	1c43      	adds	r3, r0, #1
 8003bf8:	89a3      	ldrh	r3, [r4, #12]
 8003bfa:	d106      	bne.n	8003c0a <__sflush_r+0x66>
 8003bfc:	6829      	ldr	r1, [r5, #0]
 8003bfe:	291d      	cmp	r1, #29
 8003c00:	d82c      	bhi.n	8003c5c <__sflush_r+0xb8>
 8003c02:	4a2a      	ldr	r2, [pc, #168]	; (8003cac <__sflush_r+0x108>)
 8003c04:	40ca      	lsrs	r2, r1
 8003c06:	07d6      	lsls	r6, r2, #31
 8003c08:	d528      	bpl.n	8003c5c <__sflush_r+0xb8>
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	6062      	str	r2, [r4, #4]
 8003c0e:	04d9      	lsls	r1, r3, #19
 8003c10:	6922      	ldr	r2, [r4, #16]
 8003c12:	6022      	str	r2, [r4, #0]
 8003c14:	d504      	bpl.n	8003c20 <__sflush_r+0x7c>
 8003c16:	1c42      	adds	r2, r0, #1
 8003c18:	d101      	bne.n	8003c1e <__sflush_r+0x7a>
 8003c1a:	682b      	ldr	r3, [r5, #0]
 8003c1c:	b903      	cbnz	r3, 8003c20 <__sflush_r+0x7c>
 8003c1e:	6560      	str	r0, [r4, #84]	; 0x54
 8003c20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c22:	602f      	str	r7, [r5, #0]
 8003c24:	2900      	cmp	r1, #0
 8003c26:	d0ca      	beq.n	8003bbe <__sflush_r+0x1a>
 8003c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c2c:	4299      	cmp	r1, r3
 8003c2e:	d002      	beq.n	8003c36 <__sflush_r+0x92>
 8003c30:	4628      	mov	r0, r5
 8003c32:	f000 f8fb 	bl	8003e2c <_free_r>
 8003c36:	2000      	movs	r0, #0
 8003c38:	6360      	str	r0, [r4, #52]	; 0x34
 8003c3a:	e7c1      	b.n	8003bc0 <__sflush_r+0x1c>
 8003c3c:	6a21      	ldr	r1, [r4, #32]
 8003c3e:	2301      	movs	r3, #1
 8003c40:	4628      	mov	r0, r5
 8003c42:	47b0      	blx	r6
 8003c44:	1c41      	adds	r1, r0, #1
 8003c46:	d1c7      	bne.n	8003bd8 <__sflush_r+0x34>
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0c4      	beq.n	8003bd8 <__sflush_r+0x34>
 8003c4e:	2b1d      	cmp	r3, #29
 8003c50:	d001      	beq.n	8003c56 <__sflush_r+0xb2>
 8003c52:	2b16      	cmp	r3, #22
 8003c54:	d101      	bne.n	8003c5a <__sflush_r+0xb6>
 8003c56:	602f      	str	r7, [r5, #0]
 8003c58:	e7b1      	b.n	8003bbe <__sflush_r+0x1a>
 8003c5a:	89a3      	ldrh	r3, [r4, #12]
 8003c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c60:	81a3      	strh	r3, [r4, #12]
 8003c62:	e7ad      	b.n	8003bc0 <__sflush_r+0x1c>
 8003c64:	690f      	ldr	r7, [r1, #16]
 8003c66:	2f00      	cmp	r7, #0
 8003c68:	d0a9      	beq.n	8003bbe <__sflush_r+0x1a>
 8003c6a:	0793      	lsls	r3, r2, #30
 8003c6c:	680e      	ldr	r6, [r1, #0]
 8003c6e:	bf08      	it	eq
 8003c70:	694b      	ldreq	r3, [r1, #20]
 8003c72:	600f      	str	r7, [r1, #0]
 8003c74:	bf18      	it	ne
 8003c76:	2300      	movne	r3, #0
 8003c78:	eba6 0807 	sub.w	r8, r6, r7
 8003c7c:	608b      	str	r3, [r1, #8]
 8003c7e:	f1b8 0f00 	cmp.w	r8, #0
 8003c82:	dd9c      	ble.n	8003bbe <__sflush_r+0x1a>
 8003c84:	6a21      	ldr	r1, [r4, #32]
 8003c86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c88:	4643      	mov	r3, r8
 8003c8a:	463a      	mov	r2, r7
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	47b0      	blx	r6
 8003c90:	2800      	cmp	r0, #0
 8003c92:	dc06      	bgt.n	8003ca2 <__sflush_r+0xfe>
 8003c94:	89a3      	ldrh	r3, [r4, #12]
 8003c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c9a:	81a3      	strh	r3, [r4, #12]
 8003c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca0:	e78e      	b.n	8003bc0 <__sflush_r+0x1c>
 8003ca2:	4407      	add	r7, r0
 8003ca4:	eba8 0800 	sub.w	r8, r8, r0
 8003ca8:	e7e9      	b.n	8003c7e <__sflush_r+0xda>
 8003caa:	bf00      	nop
 8003cac:	20400001 	.word	0x20400001

08003cb0 <_fflush_r>:
 8003cb0:	b538      	push	{r3, r4, r5, lr}
 8003cb2:	690b      	ldr	r3, [r1, #16]
 8003cb4:	4605      	mov	r5, r0
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	b913      	cbnz	r3, 8003cc0 <_fflush_r+0x10>
 8003cba:	2500      	movs	r5, #0
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	bd38      	pop	{r3, r4, r5, pc}
 8003cc0:	b118      	cbz	r0, 8003cca <_fflush_r+0x1a>
 8003cc2:	6983      	ldr	r3, [r0, #24]
 8003cc4:	b90b      	cbnz	r3, 8003cca <_fflush_r+0x1a>
 8003cc6:	f7ff fa4f 	bl	8003168 <__sinit>
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <_fflush_r+0x6c>)
 8003ccc:	429c      	cmp	r4, r3
 8003cce:	d11b      	bne.n	8003d08 <_fflush_r+0x58>
 8003cd0:	686c      	ldr	r4, [r5, #4]
 8003cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0ef      	beq.n	8003cba <_fflush_r+0xa>
 8003cda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cdc:	07d0      	lsls	r0, r2, #31
 8003cde:	d404      	bmi.n	8003cea <_fflush_r+0x3a>
 8003ce0:	0599      	lsls	r1, r3, #22
 8003ce2:	d402      	bmi.n	8003cea <_fflush_r+0x3a>
 8003ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ce6:	f7ff fadd 	bl	80032a4 <__retarget_lock_acquire_recursive>
 8003cea:	4628      	mov	r0, r5
 8003cec:	4621      	mov	r1, r4
 8003cee:	f7ff ff59 	bl	8003ba4 <__sflush_r>
 8003cf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cf4:	07da      	lsls	r2, r3, #31
 8003cf6:	4605      	mov	r5, r0
 8003cf8:	d4e0      	bmi.n	8003cbc <_fflush_r+0xc>
 8003cfa:	89a3      	ldrh	r3, [r4, #12]
 8003cfc:	059b      	lsls	r3, r3, #22
 8003cfe:	d4dd      	bmi.n	8003cbc <_fflush_r+0xc>
 8003d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d02:	f7ff fad0 	bl	80032a6 <__retarget_lock_release_recursive>
 8003d06:	e7d9      	b.n	8003cbc <_fflush_r+0xc>
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <_fflush_r+0x70>)
 8003d0a:	429c      	cmp	r4, r3
 8003d0c:	d101      	bne.n	8003d12 <_fflush_r+0x62>
 8003d0e:	68ac      	ldr	r4, [r5, #8]
 8003d10:	e7df      	b.n	8003cd2 <_fflush_r+0x22>
 8003d12:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <_fflush_r+0x74>)
 8003d14:	429c      	cmp	r4, r3
 8003d16:	bf08      	it	eq
 8003d18:	68ec      	ldreq	r4, [r5, #12]
 8003d1a:	e7da      	b.n	8003cd2 <_fflush_r+0x22>
 8003d1c:	0800413c 	.word	0x0800413c
 8003d20:	0800415c 	.word	0x0800415c
 8003d24:	0800411c 	.word	0x0800411c

08003d28 <_lseek_r>:
 8003d28:	b538      	push	{r3, r4, r5, lr}
 8003d2a:	4d07      	ldr	r5, [pc, #28]	; (8003d48 <_lseek_r+0x20>)
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	4608      	mov	r0, r1
 8003d30:	4611      	mov	r1, r2
 8003d32:	2200      	movs	r2, #0
 8003d34:	602a      	str	r2, [r5, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	f7fc ff0f 	bl	8000b5a <_lseek>
 8003d3c:	1c43      	adds	r3, r0, #1
 8003d3e:	d102      	bne.n	8003d46 <_lseek_r+0x1e>
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	b103      	cbz	r3, 8003d46 <_lseek_r+0x1e>
 8003d44:	6023      	str	r3, [r4, #0]
 8003d46:	bd38      	pop	{r3, r4, r5, pc}
 8003d48:	2000012c 	.word	0x2000012c

08003d4c <__swhatbuf_r>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	460e      	mov	r6, r1
 8003d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d54:	2900      	cmp	r1, #0
 8003d56:	b096      	sub	sp, #88	; 0x58
 8003d58:	4614      	mov	r4, r2
 8003d5a:	461d      	mov	r5, r3
 8003d5c:	da07      	bge.n	8003d6e <__swhatbuf_r+0x22>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	602b      	str	r3, [r5, #0]
 8003d62:	89b3      	ldrh	r3, [r6, #12]
 8003d64:	061a      	lsls	r2, r3, #24
 8003d66:	d410      	bmi.n	8003d8a <__swhatbuf_r+0x3e>
 8003d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d6c:	e00e      	b.n	8003d8c <__swhatbuf_r+0x40>
 8003d6e:	466a      	mov	r2, sp
 8003d70:	f000 f8be 	bl	8003ef0 <_fstat_r>
 8003d74:	2800      	cmp	r0, #0
 8003d76:	dbf2      	blt.n	8003d5e <__swhatbuf_r+0x12>
 8003d78:	9a01      	ldr	r2, [sp, #4]
 8003d7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d82:	425a      	negs	r2, r3
 8003d84:	415a      	adcs	r2, r3
 8003d86:	602a      	str	r2, [r5, #0]
 8003d88:	e7ee      	b.n	8003d68 <__swhatbuf_r+0x1c>
 8003d8a:	2340      	movs	r3, #64	; 0x40
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	6023      	str	r3, [r4, #0]
 8003d90:	b016      	add	sp, #88	; 0x58
 8003d92:	bd70      	pop	{r4, r5, r6, pc}

08003d94 <__smakebuf_r>:
 8003d94:	898b      	ldrh	r3, [r1, #12]
 8003d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d98:	079d      	lsls	r5, r3, #30
 8003d9a:	4606      	mov	r6, r0
 8003d9c:	460c      	mov	r4, r1
 8003d9e:	d507      	bpl.n	8003db0 <__smakebuf_r+0x1c>
 8003da0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	6123      	str	r3, [r4, #16]
 8003da8:	2301      	movs	r3, #1
 8003daa:	6163      	str	r3, [r4, #20]
 8003dac:	b002      	add	sp, #8
 8003dae:	bd70      	pop	{r4, r5, r6, pc}
 8003db0:	ab01      	add	r3, sp, #4
 8003db2:	466a      	mov	r2, sp
 8003db4:	f7ff ffca 	bl	8003d4c <__swhatbuf_r>
 8003db8:	9900      	ldr	r1, [sp, #0]
 8003dba:	4605      	mov	r5, r0
 8003dbc:	4630      	mov	r0, r6
 8003dbe:	f7ff fa73 	bl	80032a8 <_malloc_r>
 8003dc2:	b948      	cbnz	r0, 8003dd8 <__smakebuf_r+0x44>
 8003dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dc8:	059a      	lsls	r2, r3, #22
 8003dca:	d4ef      	bmi.n	8003dac <__smakebuf_r+0x18>
 8003dcc:	f023 0303 	bic.w	r3, r3, #3
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	81a3      	strh	r3, [r4, #12]
 8003dd6:	e7e3      	b.n	8003da0 <__smakebuf_r+0xc>
 8003dd8:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <__smakebuf_r+0x7c>)
 8003dda:	62b3      	str	r3, [r6, #40]	; 0x28
 8003ddc:	89a3      	ldrh	r3, [r4, #12]
 8003dde:	6020      	str	r0, [r4, #0]
 8003de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de4:	81a3      	strh	r3, [r4, #12]
 8003de6:	9b00      	ldr	r3, [sp, #0]
 8003de8:	6163      	str	r3, [r4, #20]
 8003dea:	9b01      	ldr	r3, [sp, #4]
 8003dec:	6120      	str	r0, [r4, #16]
 8003dee:	b15b      	cbz	r3, 8003e08 <__smakebuf_r+0x74>
 8003df0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003df4:	4630      	mov	r0, r6
 8003df6:	f000 f88d 	bl	8003f14 <_isatty_r>
 8003dfa:	b128      	cbz	r0, 8003e08 <__smakebuf_r+0x74>
 8003dfc:	89a3      	ldrh	r3, [r4, #12]
 8003dfe:	f023 0303 	bic.w	r3, r3, #3
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	81a3      	strh	r3, [r4, #12]
 8003e08:	89a0      	ldrh	r0, [r4, #12]
 8003e0a:	4305      	orrs	r5, r0
 8003e0c:	81a5      	strh	r5, [r4, #12]
 8003e0e:	e7cd      	b.n	8003dac <__smakebuf_r+0x18>
 8003e10:	08003101 	.word	0x08003101

08003e14 <__malloc_lock>:
 8003e14:	4801      	ldr	r0, [pc, #4]	; (8003e1c <__malloc_lock+0x8>)
 8003e16:	f7ff ba45 	b.w	80032a4 <__retarget_lock_acquire_recursive>
 8003e1a:	bf00      	nop
 8003e1c:	20000124 	.word	0x20000124

08003e20 <__malloc_unlock>:
 8003e20:	4801      	ldr	r0, [pc, #4]	; (8003e28 <__malloc_unlock+0x8>)
 8003e22:	f7ff ba40 	b.w	80032a6 <__retarget_lock_release_recursive>
 8003e26:	bf00      	nop
 8003e28:	20000124 	.word	0x20000124

08003e2c <_free_r>:
 8003e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e2e:	2900      	cmp	r1, #0
 8003e30:	d048      	beq.n	8003ec4 <_free_r+0x98>
 8003e32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e36:	9001      	str	r0, [sp, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f1a1 0404 	sub.w	r4, r1, #4
 8003e3e:	bfb8      	it	lt
 8003e40:	18e4      	addlt	r4, r4, r3
 8003e42:	f7ff ffe7 	bl	8003e14 <__malloc_lock>
 8003e46:	4a20      	ldr	r2, [pc, #128]	; (8003ec8 <_free_r+0x9c>)
 8003e48:	9801      	ldr	r0, [sp, #4]
 8003e4a:	6813      	ldr	r3, [r2, #0]
 8003e4c:	4615      	mov	r5, r2
 8003e4e:	b933      	cbnz	r3, 8003e5e <_free_r+0x32>
 8003e50:	6063      	str	r3, [r4, #4]
 8003e52:	6014      	str	r4, [r2, #0]
 8003e54:	b003      	add	sp, #12
 8003e56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e5a:	f7ff bfe1 	b.w	8003e20 <__malloc_unlock>
 8003e5e:	42a3      	cmp	r3, r4
 8003e60:	d90b      	bls.n	8003e7a <_free_r+0x4e>
 8003e62:	6821      	ldr	r1, [r4, #0]
 8003e64:	1862      	adds	r2, r4, r1
 8003e66:	4293      	cmp	r3, r2
 8003e68:	bf04      	itt	eq
 8003e6a:	681a      	ldreq	r2, [r3, #0]
 8003e6c:	685b      	ldreq	r3, [r3, #4]
 8003e6e:	6063      	str	r3, [r4, #4]
 8003e70:	bf04      	itt	eq
 8003e72:	1852      	addeq	r2, r2, r1
 8003e74:	6022      	streq	r2, [r4, #0]
 8003e76:	602c      	str	r4, [r5, #0]
 8003e78:	e7ec      	b.n	8003e54 <_free_r+0x28>
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	b10b      	cbz	r3, 8003e84 <_free_r+0x58>
 8003e80:	42a3      	cmp	r3, r4
 8003e82:	d9fa      	bls.n	8003e7a <_free_r+0x4e>
 8003e84:	6811      	ldr	r1, [r2, #0]
 8003e86:	1855      	adds	r5, r2, r1
 8003e88:	42a5      	cmp	r5, r4
 8003e8a:	d10b      	bne.n	8003ea4 <_free_r+0x78>
 8003e8c:	6824      	ldr	r4, [r4, #0]
 8003e8e:	4421      	add	r1, r4
 8003e90:	1854      	adds	r4, r2, r1
 8003e92:	42a3      	cmp	r3, r4
 8003e94:	6011      	str	r1, [r2, #0]
 8003e96:	d1dd      	bne.n	8003e54 <_free_r+0x28>
 8003e98:	681c      	ldr	r4, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	6053      	str	r3, [r2, #4]
 8003e9e:	4421      	add	r1, r4
 8003ea0:	6011      	str	r1, [r2, #0]
 8003ea2:	e7d7      	b.n	8003e54 <_free_r+0x28>
 8003ea4:	d902      	bls.n	8003eac <_free_r+0x80>
 8003ea6:	230c      	movs	r3, #12
 8003ea8:	6003      	str	r3, [r0, #0]
 8003eaa:	e7d3      	b.n	8003e54 <_free_r+0x28>
 8003eac:	6825      	ldr	r5, [r4, #0]
 8003eae:	1961      	adds	r1, r4, r5
 8003eb0:	428b      	cmp	r3, r1
 8003eb2:	bf04      	itt	eq
 8003eb4:	6819      	ldreq	r1, [r3, #0]
 8003eb6:	685b      	ldreq	r3, [r3, #4]
 8003eb8:	6063      	str	r3, [r4, #4]
 8003eba:	bf04      	itt	eq
 8003ebc:	1949      	addeq	r1, r1, r5
 8003ebe:	6021      	streq	r1, [r4, #0]
 8003ec0:	6054      	str	r4, [r2, #4]
 8003ec2:	e7c7      	b.n	8003e54 <_free_r+0x28>
 8003ec4:	b003      	add	sp, #12
 8003ec6:	bd30      	pop	{r4, r5, pc}
 8003ec8:	20000090 	.word	0x20000090

08003ecc <_read_r>:
 8003ecc:	b538      	push	{r3, r4, r5, lr}
 8003ece:	4d07      	ldr	r5, [pc, #28]	; (8003eec <_read_r+0x20>)
 8003ed0:	4604      	mov	r4, r0
 8003ed2:	4608      	mov	r0, r1
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	602a      	str	r2, [r5, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	f7fc fdd6 	bl	8000a8c <_read>
 8003ee0:	1c43      	adds	r3, r0, #1
 8003ee2:	d102      	bne.n	8003eea <_read_r+0x1e>
 8003ee4:	682b      	ldr	r3, [r5, #0]
 8003ee6:	b103      	cbz	r3, 8003eea <_read_r+0x1e>
 8003ee8:	6023      	str	r3, [r4, #0]
 8003eea:	bd38      	pop	{r3, r4, r5, pc}
 8003eec:	2000012c 	.word	0x2000012c

08003ef0 <_fstat_r>:
 8003ef0:	b538      	push	{r3, r4, r5, lr}
 8003ef2:	4d07      	ldr	r5, [pc, #28]	; (8003f10 <_fstat_r+0x20>)
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	4608      	mov	r0, r1
 8003efa:	4611      	mov	r1, r2
 8003efc:	602b      	str	r3, [r5, #0]
 8003efe:	f7fc fe11 	bl	8000b24 <_fstat>
 8003f02:	1c43      	adds	r3, r0, #1
 8003f04:	d102      	bne.n	8003f0c <_fstat_r+0x1c>
 8003f06:	682b      	ldr	r3, [r5, #0]
 8003f08:	b103      	cbz	r3, 8003f0c <_fstat_r+0x1c>
 8003f0a:	6023      	str	r3, [r4, #0]
 8003f0c:	bd38      	pop	{r3, r4, r5, pc}
 8003f0e:	bf00      	nop
 8003f10:	2000012c 	.word	0x2000012c

08003f14 <_isatty_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	4d06      	ldr	r5, [pc, #24]	; (8003f30 <_isatty_r+0x1c>)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	4608      	mov	r0, r1
 8003f1e:	602b      	str	r3, [r5, #0]
 8003f20:	f7fc fe10 	bl	8000b44 <_isatty>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	d102      	bne.n	8003f2e <_isatty_r+0x1a>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	b103      	cbz	r3, 8003f2e <_isatty_r+0x1a>
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	bd38      	pop	{r3, r4, r5, pc}
 8003f30:	2000012c 	.word	0x2000012c

08003f34 <_init>:
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f36:	bf00      	nop
 8003f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3a:	bc08      	pop	{r3}
 8003f3c:	469e      	mov	lr, r3
 8003f3e:	4770      	bx	lr

08003f40 <_fini>:
 8003f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f42:	bf00      	nop
 8003f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f46:	bc08      	pop	{r3}
 8003f48:	469e      	mov	lr, r3
 8003f4a:	4770      	bx	lr
